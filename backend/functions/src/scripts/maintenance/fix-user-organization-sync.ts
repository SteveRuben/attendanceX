/**
 * Script de migration pour corriger la synchronisation entre les utilisateurs et leurs organisations
 * Ce script met √† jour le champ organizationId des utilisateurs bas√© sur leur appartenance dans organization_members
 */

import { collections } from '../../config';
import { OrganizationRole } from '../../common/types';

interface OrganizationMember {
  id: string;
  userId: string;
  organizationId: string;
  role: OrganizationRole;
  isActive: boolean;
}

interface User {
  id: string;
  organizationId?: string;
  role?: OrganizationRole;
}

export async function fixUserOrganizationSync(): Promise<void> {
  console.log('üîß D√©but de la correction de synchronisation utilisateur-organisation...');

  try {
    // 1. R√©cup√©rer tous les membres d'organisation actifs
    const membersSnapshot = await collections.organization_members
      .where('isActive', '==', true)
      .get();

    console.log(`üìä ${membersSnapshot.size} membres d'organisation trouv√©s`);

    const updates: Promise<any>[] = [];
    let fixedCount = 0;
    let alreadyCorrectCount = 0;

    // 2. Pour chaque membre, v√©rifier et corriger l'utilisateur correspondant
    for (const memberDoc of membersSnapshot.docs) {
      const member = memberDoc.data() as OrganizationMember;
      
      // R√©cup√©rer l'utilisateur
      const userDoc = await collections.users.doc(member.userId).get();
      
      if (!userDoc.exists) {
        console.warn(`‚ö†Ô∏è Utilisateur ${member.userId} non trouv√© pour le membre ${member.id}`);
        continue;
      }

      const user = userDoc.data() as User;
      
      // V√©rifier si l'utilisateur a besoin d'√™tre mis √† jour
      const needsUpdate = user.organizationId !== member.organizationId || user.role !== member.role;
      
      if (needsUpdate) {
        console.log(`üîÑ Correction n√©cessaire pour l'utilisateur ${member.userId}:`, {
          currentOrgId: user.organizationId,
          correctOrgId: member.organizationId,
          currentRole: user.role,
          correctRole: member.role
        });

        // Ajouter la mise √† jour √† la liste
        updates.push(
          collections.users.doc(member.userId).update({
            organizationId: member.organizationId,
            role: member.role
          })
        );
        
        fixedCount++;
      } else {
        alreadyCorrectCount++;
      }
    }

    // 3. Ex√©cuter toutes les mises √† jour
    if (updates.length > 0) {
      console.log(`üöÄ Ex√©cution de ${updates.length} mises √† jour...`);
      await Promise.all(updates);
      console.log(`‚úÖ ${fixedCount} utilisateurs corrig√©s`);
    }

    // 4. V√©rifier les utilisateurs orphelins (avec organizationId mais sans membership)
    console.log('üîç V√©rification des utilisateurs orphelins...');
    
    const usersWithOrgSnapshot = await collections.users
      .where('organizationId', '!=', null)
      .get();

    let orphanCount = 0;
    const orphanUpdates: Promise<any>[] = [];

    for (const userDoc of usersWithOrgSnapshot.docs) {
      const user = userDoc.data() as User;
      
      if (!user.organizationId) {continue;}

      // V√©rifier si l'utilisateur a un membership actif
      const membershipSnapshot = await collections.organization_members
        .where('userId', '==', userDoc.id)
        .where('organizationId', '==', user.organizationId)
        .where('isActive', '==', true)
        .limit(1)
        .get();

      if (membershipSnapshot.empty) {
        console.log(`üßπ Utilisateur orphelin trouv√©: ${userDoc.id} (org: ${user.organizationId})`);
        
        orphanUpdates.push(
          collections.users.doc(userDoc.id).update({
            organizationId: null,
            role: null
          })
        );
        
        orphanCount++;
      }
    }

    if (orphanUpdates.length > 0) {
      console.log(`üöÄ Nettoyage de ${orphanUpdates.length} utilisateurs orphelins...`);
      await Promise.all(orphanUpdates);
      console.log(`‚úÖ ${orphanCount} utilisateurs orphelins nettoy√©s`);
    }

    // 5. R√©sum√©
    console.log('üìà R√©sum√© de la correction:');
    console.log(`  - Utilisateurs d√©j√† corrects: ${alreadyCorrectCount}`);
    console.log(`  - Utilisateurs corrig√©s: ${fixedCount}`);
    console.log(`  - Utilisateurs orphelins nettoy√©s: ${orphanCount}`);
    console.log('‚úÖ Correction termin√©e avec succ√®s');

  } catch (error) {
    console.error('‚ùå Erreur lors de la correction:', error);
    throw error;
  }
}

// Fonction utilitaire pour ex√©cuter le script
export async function runFixUserOrganizationSync(): Promise<void> {
  try {
    await fixUserOrganizationSync();
    process.exit(0);
  } catch (error) {
    console.error('‚ùå √âchec de la correction:', error);
    process.exit(1);
  }
}

// Ex√©cuter le script si appel√© directement
if (require.main === module) {
  runFixUserOrganizationSync();
}