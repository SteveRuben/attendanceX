/**
 * Script pour configurer automatiquement les index Firestore
 */

import { writeFileSync, existsSync, mkdirSync } from 'fs';
import { join } from 'path';
import { generateFirestoreIndexesConfig, manualIndexInstructions } from '../config/firestore-indexes';

/**
 * G√©n√©rer le fichier firestore.indexes.json
 */
function generateIndexesFile(): void {
  try {
    const config = generateFirestoreIndexesConfig();
    const configPath = join(process.cwd(), 'firestore.indexes.json');
    
    // Cr√©er le r√©pertoire si n√©cessaire
    const dir = join(process.cwd());
    if (!existsSync(dir)) {
      mkdirSync(dir, { recursive: true });
    }

    // √âcrire le fichier de configuration
    writeFileSync(configPath, JSON.stringify(config, null, 2));
    
    console.log('‚úÖ Fichier firestore.indexes.json g√©n√©r√© avec succ√®s');
    console.log(`üìÅ Emplacement: ${configPath}`);
    console.log(`üìä Nombre d'index: ${config.indexes.length}`);
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la g√©n√©ration du fichier d\'index:', error);
    throw error;
  }
}

/**
 * G√©n√©rer le fichier firestore.rules avec les r√®gles de s√©curit√©
 */
function generateSecurityRules(): void {
  try {
    const rules = `
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ============================================================================
    // R√àGLES POUR LA COLLECTION EMPLOYEES
    // ============================================================================
    match /employees/{employeeId} {
      // Lecture: employ√© lui-m√™me, managers et admins de l'organisation
      allow read: if isAuthenticated() && (
        isOwner(employeeId) || 
        isManagerInOrganization(resource.data.organizationId) ||
        isAdmin()
      );
      
      // √âcriture: managers et admins de l'organisation
      allow write: if isAuthenticated() && (
        isManagerInOrganization(resource.data.organizationId) ||
        isAdmin()
      );
    }
    
    // ============================================================================
    // R√àGLES POUR LA COLLECTION PRESENCE_ENTRIES
    // ============================================================================
    match /presence_entries/{entryId} {
      // Lecture: employ√© concern√©, managers et admins de l'organisation
      allow read: if isAuthenticated() && (
        isEmployeeEntry(resource.data.employeeId) ||
        isManagerInOrganization(resource.data.organizationId) ||
        isAdmin()
      );
      
      // Cr√©ation: employ√© concern√©, managers et admins
      allow create: if isAuthenticated() && (
        isEmployeeEntry(request.resource.data.employeeId) ||
        isManagerInOrganization(request.resource.data.organizationId) ||
        isAdmin()
      ) && validatePresenceEntry();
      
      // Mise √† jour: managers et admins seulement
      allow update: if isAuthenticated() && (
        isManagerInOrganization(resource.data.organizationId) ||
        isAdmin()
      ) && validatePresenceEntryUpdate();
      
      // Suppression: admins seulement
      allow delete: if isAuthenticated() && isAdmin();
    }
    
    // ============================================================================
    // R√àGLES POUR LA COLLECTION WORK_SCHEDULES
    // ============================================================================
    match /work_schedules/{scheduleId} {
      // Lecture: membres de l'organisation
      allow read: if isAuthenticated() && (
        isMemberOfOrganization(resource.data.organizationId) ||
        isAdmin()
      );
      
      // √âcriture: managers et admins de l'organisation
      allow write: if isAuthenticated() && (
        isManagerInOrganization(resource.data.organizationId) ||
        isAdmin()
      );
    }
    
    // ============================================================================
    // R√àGLES POUR LA COLLECTION LEAVE_REQUESTS
    // ============================================================================
    match /leave_requests/{requestId} {
      // Lecture: employ√© concern√©, managers et admins
      allow read: if isAuthenticated() && (
        isEmployeeEntry(resource.data.employeeId) ||
        isManagerInOrganization(resource.data.organizationId) ||
        isAdmin()
      );
      
      // Cr√©ation: employ√© concern√©
      allow create: if isAuthenticated() && 
        isEmployeeEntry(request.resource.data.employeeId) &&
        validateLeaveRequest();
      
      // Mise √† jour: employ√© (avant approbation) ou managers/admins
      allow update: if isAuthenticated() && (
        (isEmployeeEntry(resource.data.employeeId) && resource.data.status == 'pending') ||
        isManagerInOrganization(resource.data.organizationId) ||
        isAdmin()
      );
      
      // Suppression: employ√© (avant approbation) ou admins
      allow delete: if isAuthenticated() && (
        (isEmployeeEntry(resource.data.employeeId) && resource.data.status == 'pending') ||
        isAdmin()
      );
    }
    
    // ============================================================================
    // R√àGLES POUR LA COLLECTION PRESENCE_REPORTS
    // ============================================================================
    match /presence_reports/{reportId} {
      // Lecture: cr√©ateur du rapport, managers et admins de l'organisation
      allow read: if isAuthenticated() && (
        resource.data.createdBy == request.auth.uid ||
        isManagerInOrganization(resource.data.organizationId) ||
        isAdmin()
      );
      
      // √âcriture: managers et admins de l'organisation
      allow write: if isAuthenticated() && (
        isManagerInOrganization(request.resource.data.organizationId) ||
        isAdmin()
      );
    }
    
    // ============================================================================
    // R√àGLES POUR LA COLLECTION PRESENCE_AUDIT_LOGS
    // ============================================================================
    match /presence_audit_logs/{logId} {
      // Lecture: admins seulement
      allow read: if isAuthenticated() && isAdmin();
      
      // √âcriture: syst√®me seulement (via triggers)
      allow write: if false;
    }
    
    // ============================================================================
    // R√àGLES POUR LA COLLECTION ORGANIZATION_PRESENCE_SETTINGS
    // ============================================================================
    match /organization_presence_settings/{settingsId} {
      // Lecture: membres de l'organisation
      allow read: if isAuthenticated() && (
        isMemberOfOrganization(resource.data.organizationId) ||
        isAdmin()
      );
      
      // √âcriture: admins de l'organisation
      allow write: if isAuthenticated() && (
        isAdminInOrganization(resource.data.organizationId) ||
        isAdmin()
      );
    }
    
    // ============================================================================
    // R√àGLES POUR LA COLLECTION PRESENCE_NOTIFICATIONS
    // ============================================================================
    match /presence_notifications/{notificationId} {
      // Lecture: destinataire de la notification
      allow read: if isAuthenticated() && (
        resource.data.recipientId == request.auth.uid ||
        isAdmin()
      );
      
      // Mise √† jour: destinataire (pour marquer comme lu)
      allow update: if isAuthenticated() && 
        resource.data.recipientId == request.auth.uid &&
        onlyUpdatingReadStatus();
      
      // Cr√©ation/Suppression: syst√®me seulement
      allow create, delete: if false;
    }
    
    // ============================================================================
    // FONCTIONS UTILITAIRES
    // ============================================================================
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return request.auth.token.role == 'admin';
    }
    
    function isOwner(employeeId) {
      return request.auth.uid == employeeId;
    }
    
    function isEmployeeEntry(employeeId) {
      // V√©rifier si l'utilisateur est l'employ√© concern√©
      return exists(/databases/$(database)/documents/employees/$(employeeId)) &&
             get(/databases/$(database)/documents/employees/$(employeeId)).data.userId == request.auth.uid;
    }
    
    function isMemberOfOrganization(organizationId) {
      // V√©rifier si l'utilisateur est membre de l'organisation
      return request.auth.token.organizationId == organizationId;
    }
    
    function isManagerInOrganization(organizationId) {
      return request.auth.token.organizationId == organizationId &&
             (request.auth.token.role == 'manager' || request.auth.token.role == 'admin');
    }
    
    function isAdminInOrganization(organizationId) {
      return request.auth.token.organizationId == organizationId &&
             request.auth.token.role == 'admin';
    }
    
    function validatePresenceEntry() {
      let data = request.resource.data;
      return data.keys().hasAll(['employeeId', 'organizationId', 'date']) &&
             data.employeeId is string &&
             data.organizationId is string &&
             data.date is string;
    }
    
    function validatePresenceEntryUpdate() {
      // Emp√™cher la modification de certains champs critiques
      let unchangedFields = ['employeeId', 'organizationId', 'date', 'createdAt', 'createdBy'];
      return unchangedFields.all(field, resource.data[field] == request.resource.data[field]);
    }
    
    function validateLeaveRequest() {
      let data = request.resource.data;
      return data.keys().hasAll(['employeeId', 'organizationId', 'type', 'startDate', 'endDate']) &&
             data.employeeId is string &&
             data.organizationId is string &&
             data.type is string &&
             data.startDate is timestamp &&
             data.endDate is timestamp &&
             data.startDate <= data.endDate;
    }
    
    function onlyUpdatingReadStatus() {
      let changedFields = request.resource.data.diff(resource.data).changedKeys();
      return changedFields.hasOnly(['isRead', 'readAt', 'updatedAt']);
    }
  }
}`;

    const rulesPath = join(process.cwd(), 'firestore.rules');
    writeFileSync(rulesPath, rules.trim());
    
    console.log('‚úÖ Fichier firestore.rules g√©n√©r√© avec succ√®s');
    console.log(`üìÅ Emplacement: ${rulesPath}`);
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la g√©n√©ration des r√®gles de s√©curit√©:', error);
    throw error;
  }
}

/**
 * Afficher les instructions de d√©ploiement
 */
function showDeploymentInstructions(): void {
  console.log(`
üöÄ INSTRUCTIONS DE D√âPLOIEMENT
===============================

1. D√©ployer les index Firestore:
   firebase deploy --only firestore:indexes

2. D√©ployer les r√®gles de s√©curit√©:
   firebase deploy --only firestore:rules

3. D√©ployer les fonctions (triggers):
   firebase deploy --only functions

4. V√©rifier le d√©ploiement:
   firebase firestore:indexes

üìã INSTRUCTIONS MANUELLES
=========================
${manualIndexInstructions}

‚ö†Ô∏è  IMPORTANT
=============
- Les index peuvent prendre plusieurs minutes √† se construire
- Surveillez la console Firebase pour le statut des index
- Testez les requ√™tes apr√®s le d√©ploiement des index
- Les r√®gles de s√©curit√© sont appliqu√©es imm√©diatement

üîç MONITORING
=============
- Surveillez les m√©triques de performance dans la console Firebase
- V√©rifiez les logs des fonctions pour les erreurs de triggers
- Utilisez les outils de d√©bogage Firestore pour optimiser les requ√™tes
`);
}

/**
 * Valider la configuration des index
 */
function validateIndexConfiguration(): boolean {
  try {
    const config = generateFirestoreIndexesConfig();
    
    // V√©rifications de base
    if (!config.indexes || config.indexes.length === 0) {
      console.error('‚ùå Aucun index configur√©');
      return false;
    }

    // V√©rifier que chaque index a au moins un champ
    for (const index of config.indexes) {
      if (!index.fields || index.fields.length === 0) {
        console.error('‚ùå Index sans champs d√©tect√©');
        return false;
      }

      // V√©rifier les champs requis
      for (const field of index.fields) {
        if (!field.fieldPath) {
          console.error('‚ùå Champ sans fieldPath d√©tect√©');
          return false;
        }
      }
    }

    console.log('‚úÖ Configuration des index valid√©e');
    console.log(`üìä ${config.indexes.length} index configur√©s`);
    
    return true;
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la validation:', error);
    return false;
  }
}

/**
 * Fonction principale
 */
async function main(): Promise<void> {
  try {
    console.log('üîß Configuration des index Firestore pour la gestion de pr√©sence');
    console.log('================================================================');

    // 1. Valider la configuration
    if (!validateIndexConfiguration()) {
      process.exit(1);
    }

    // 2. G√©n√©rer les fichiers
    generateIndexesFile();
    generateSecurityRules();

    // 3. Afficher les instructions
    showDeploymentInstructions();

    console.log('‚úÖ Configuration termin√©e avec succ√®s!');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la configuration:', error);
    process.exit(1);
  }
}

// Ex√©cuter le script si appel√© directement
if (require.main === module) {
  main().catch(console.error);
}

export {
  generateIndexesFile,
  generateSecurityRules,
  validateIndexConfiguration,
  showDeploymentInstructions
};