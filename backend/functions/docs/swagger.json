{
  "openapi": "3.0.0",
  "info": {
    "title": "Attendance Management System API",
    "version": "2.0.0",
    "description": "\n      API complète pour le système de gestion de présence multi-services.\n      \n      ## Fonctionnalités principales\n      - **Authentification JWT** : Système d'authentification sécurisé avec tokens JWT\n      - **Gestion des utilisateurs** : CRUD complet avec permissions basées sur les rôles\n      - **Gestion des événements** : Création, planification et gestion des événements\n      - **Gestion des présences** : Check-in multi-modal (QR, GPS, biométrie, manuel)\n      - **Notifications** : Système multi-canal (email, SMS, push)\n      - **Rapports** : Génération de rapports avancés avec export\n      - **Intelligence Artificielle** : Prédictions et analyses comportementales\n      \n      ## Authentification\n      Cette API utilise l'authentification JWT (JSON Web Tokens). Pour accéder aux endpoints protégés :\n      1. Obtenez un token via `POST /auth/login`\n      2. Incluez le token dans l'header : `Authorization: Bearer <token>`\n      \n      ## Organisation-centrée\n      Toutes les données sont isolées par organisation. Chaque utilisateur appartient à une organisation\n      et ne peut accéder qu'aux données de son organisation.\n      \n      ## Codes d'erreur\n      - **400** : Données invalides\n      - **401** : Non authentifié\n      - **403** : Permissions insuffisantes\n      - **404** : Ressource non trouvée\n      - **409** : Conflit (ex: email déjà utilisé)\n      - **429** : Rate limiting dépassé\n      - **500** : Erreur serveur\n    ",
    "contact": {
      "name": "Support API",
      "email": "support@attendance-x.com",
      "url": "https://attendance-x.com/support"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "http://localhost:5001/attendance-x/us-central1/api",
      "description": "Serveur de développement local"
    },
    {
      "url": "https://us-central1-attendance-x.cloudfunctions.net/api",
      "description": "Serveur de production"
    }
  ],
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Token JWT obtenu via /auth/login"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifiant unique de l'utilisateur"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Adresse email de l'utilisateur"
          },
          "firstName": {
            "type": "string",
            "description": "Prénom de l'utilisateur"
          },
          "lastName": {
            "type": "string",
            "description": "Nom de famille de l'utilisateur"
          },
          "role": {
            "type": "string",
            "enum": [
              "user",
              "manager",
              "admin",
              "super_admin"
            ],
            "description": "Rôle de l'utilisateur dans l'organisation"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "inactive",
              "suspended"
            ],
            "description": "Statut du compte utilisateur"
          },
          "organizationId": {
            "type": "string",
            "description": "Identifiant de l'organisation"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date de création du compte"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date de dernière modification"
          }
        },
        "required": [
          "id",
          "email",
          "firstName",
          "lastName",
          "role",
          "status",
          "organizationId"
        ]
      },
      "Event": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifiant unique de l'événement"
          },
          "title": {
            "type": "string",
            "description": "Titre de l'événement"
          },
          "description": {
            "type": "string",
            "description": "Description détaillée de l'événement"
          },
          "startTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date et heure de début"
          },
          "endTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date et heure de fin"
          },
          "location": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "address": {
                "type": "string"
              },
              "coordinates": {
                "type": "object",
                "properties": {
                  "latitude": {
                    "type": "number"
                  },
                  "longitude": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "organizerId": {
            "type": "string",
            "description": "Identifiant de l'organisateur"
          },
          "organizationId": {
            "type": "string",
            "description": "Identifiant de l'organisation"
          },
          "status": {
            "type": "string",
            "enum": [
              "draft",
              "published",
              "ongoing",
              "completed",
              "cancelled"
            ],
            "description": "Statut de l'événement"
          },
          "maxParticipants": {
            "type": "number",
            "description": "Nombre maximum de participants"
          },
          "requiresCheckIn": {
            "type": "boolean",
            "description": "Si l'événement nécessite un check-in"
          },
          "checkInMethods": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "qr_code",
                "geolocation",
                "manual",
                "biometric"
              ]
            },
            "description": "Méthodes de check-in autorisées"
          }
        },
        "required": [
          "id",
          "title",
          "startTime",
          "endTime",
          "organizerId",
          "organizationId"
        ]
      },
      "Attendance": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifiant unique de la présence"
          },
          "userId": {
            "type": "string",
            "description": "Identifiant de l'utilisateur"
          },
          "eventId": {
            "type": "string",
            "description": "Identifiant de l'événement"
          },
          "status": {
            "type": "string",
            "enum": [
              "present",
              "late",
              "absent",
              "excused"
            ],
            "description": "Statut de présence"
          },
          "checkInTime": {
            "type": "string",
            "format": "date-time",
            "description": "Heure de check-in"
          },
          "checkInMethod": {
            "type": "string",
            "enum": [
              "qr_code",
              "geolocation",
              "manual",
              "biometric"
            ],
            "description": "Méthode utilisée pour le check-in"
          },
          "location": {
            "type": "object",
            "properties": {
              "latitude": {
                "type": "number"
              },
              "longitude": {
                "type": "number"
              },
              "accuracy": {
                "type": "number"
              }
            }
          },
          "validated": {
            "type": "boolean",
            "description": "Si la présence a été validée par un superviseur"
          },
          "validatedBy": {
            "type": "string",
            "description": "Identifiant du superviseur qui a validé"
          },
          "validatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date de validation"
          }
        },
        "required": [
          "id",
          "userId",
          "eventId",
          "status"
        ]
      },
      "LoginRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "Adresse email de l'utilisateur"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "description": "Mot de passe de l'utilisateur"
          },
          "rememberMe": {
            "type": "boolean",
            "description": "Maintenir la session plus longtemps"
          },
          "twoFactorCode": {
            "type": "string",
            "pattern": "^[0-9]{6}$",
            "description": "Code 2FA si activé"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Succès de l'authentification"
          },
          "accessToken": {
            "type": "string",
            "description": "Token JWT d'accès (24h)"
          },
          "refreshToken": {
            "type": "string",
            "description": "Token de rafraîchissement (7j)"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "expiresIn": {
            "type": "number",
            "description": "Durée de validité du token en secondes"
          }
        }
      },
      "RegisterRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]",
            "description": "Mot de passe fort (min 8 chars, maj, min, chiffre, caractère spécial)"
          },
          "firstName": {
            "type": "string",
            "minLength": 2
          },
          "lastName": {
            "type": "string",
            "minLength": 2
          },
          "organizationName": {
            "type": "string",
            "description": "Nom de l'organisation (pour nouveaux utilisateurs)"
          }
        },
        "required": [
          "email",
          "password",
          "firstName",
          "lastName"
        ]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Code d'erreur unique"
              },
              "message": {
                "type": "string",
                "description": "Message d'erreur lisible"
              },
              "details": {
                "type": "object",
                "description": "Détails supplémentaires sur l'erreur"
              }
            }
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "requestId": {
            "type": "string",
            "description": "Identifiant unique de la requête pour le debugging"
          }
        }
      },
      "PaginationMeta": {
        "type": "object",
        "properties": {
          "page": {
            "type": "number",
            "description": "Page actuelle (commence à 1)"
          },
          "limit": {
            "type": "number",
            "description": "Nombre d'éléments par page"
          },
          "total": {
            "type": "number",
            "description": "Nombre total d'éléments"
          },
          "totalPages": {
            "type": "number",
            "description": "Nombre total de pages"
          },
          "hasNext": {
            "type": "boolean",
            "description": "S'il y a une page suivante"
          },
          "hasPrev": {
            "type": "boolean",
            "description": "S'il y a une page précédente"
          }
        }
      }
    },
    "parameters": {
      "PageParam": {
        "name": "page",
        "in": "query",
        "description": "Numéro de page (commence à 1)",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 1
        }
      },
      "LimitParam": {
        "name": "limit",
        "in": "query",
        "description": "Nombre d'éléments par page",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 100,
          "default": 20
        }
      },
      "SortParam": {
        "name": "sort",
        "in": "query",
        "description": "Champ de tri (préfixer par - pour ordre décroissant)",
        "required": false,
        "schema": {
          "type": "string",
          "example": "-createdAt"
        }
      }
    },
    "responses": {
      "UnauthorizedError": {
        "description": "Token d'authentification manquant ou invalide",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "success": false,
              "error": {
                "code": "UNAUTHORIZED",
                "message": "Token d'authentification requis"
              },
              "timestamp": "2024-01-15T10:30:00Z",
              "requestId": "req_123456789"
            }
          }
        }
      },
      "ForbiddenError": {
        "description": "Permissions insuffisantes",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "success": false,
              "error": {
                "code": "FORBIDDEN",
                "message": "Permissions insuffisantes pour cette action"
              },
              "timestamp": "2024-01-15T10:30:00Z",
              "requestId": "req_123456789"
            }
          }
        }
      },
      "NotFoundError": {
        "description": "Ressource non trouvée",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "ValidationError": {
        "description": "Erreur de validation des données",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "success": false,
              "error": {
                "code": "VALIDATION_ERROR",
                "message": "Données invalides",
                "details": {
                  "email": "Format d'email invalide",
                  "password": "Le mot de passe doit contenir au moins 8 caractères"
                }
              },
              "timestamp": "2024-01-15T10:30:00Z",
              "requestId": "req_123456789"
            }
          }
        }
      },
      "RateLimitError": {
        "description": "Limite de taux dépassée",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "success": false,
              "error": {
                "code": "RATE_LIMIT_EXCEEDED",
                "message": "Trop de requêtes. Réessayez dans 15 minutes."
              },
              "timestamp": "2024-01-15T10:30:00Z",
              "requestId": "req_123456789"
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "Endpoints d'authentification et gestion des sessions JWT"
    },
    {
      "name": "Users",
      "description": "Gestion des utilisateurs et profils"
    },
    {
      "name": "Events",
      "description": "Gestion des événements et planification"
    },
    {
      "name": "Attendances",
      "description": "Gestion des présences et check-in"
    },
    {
      "name": "Notifications",
      "description": "Système de notifications multi-canal"
    },
    {
      "name": "Reports",
      "description": "Génération et gestion des rapports"
    },
    {
      "name": "ML/AI",
      "description": "Intelligence artificielle et prédictions"
    },
    {
      "name": "System",
      "description": "Endpoints système et monitoring"
    }
  ],
  "paths": {
    "/api/appointments/analytics/stats": {
      "get": {
        "summary": "Récupère les statistiques générales des rendez-vous",
        "tags": [
          "Appointment Analytics"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "startDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Date de début (YYYY-MM-DD)"
          },
          {
            "in": "query",
            "name": "endDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Date de fin (YYYY-MM-DD)"
          },
          {
            "in": "query",
            "name": "practitionerId",
            "schema": {
              "type": "string"
            },
            "description": "ID du praticien"
          },
          {
            "in": "query",
            "name": "serviceId",
            "schema": {
              "type": "string"
            },
            "description": "ID du service"
          },
          {
            "in": "query",
            "name": "clientId",
            "schema": {
              "type": "string"
            },
            "description": "ID du client"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "scheduled",
                  "confirmed",
                  "completed",
                  "cancelled",
                  "no-show"
                ]
              }
            },
            "description": "Statuts des rendez-vous à inclure"
          }
        ],
        "responses": {
          "200": {
            "description": "Statistiques récupérées avec succès"
          },
          "400": {
            "description": "Paramètres invalides"
          },
          "401": {
            "description": "Non autorisé"
          },
          "500": {
            "description": "Erreur serveur"
          }
        }
      }
    },
    "/api/appointments/analytics/attendance-rate": {
      "get": {
        "summary": "Calcule le taux de présence pour une période",
        "tags": [
          "Appointment Analytics"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "startDate",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Date de début (YYYY-MM-DD)"
          },
          {
            "in": "query",
            "name": "endDate",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Date de fin (YYYY-MM-DD)"
          },
          {
            "in": "query",
            "name": "practitionerId",
            "schema": {
              "type": "string"
            },
            "description": "ID du praticien (optionnel)"
          }
        ],
        "responses": {
          "200": {
            "description": "Taux de présence calculé avec succès"
          }
        }
      }
    },
    "/api/appointments/analytics/cancellation-rate": {
      "get": {
        "summary": "Calcule le taux d'annulation pour une période",
        "tags": [
          "Appointment Analytics"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "startDate",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Date de début (YYYY-MM-DD)"
          },
          {
            "in": "query",
            "name": "endDate",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Date de fin (YYYY-MM-DD)"
          },
          {
            "in": "query",
            "name": "practitionerId",
            "schema": {
              "type": "string"
            },
            "description": "ID du praticien (optionnel)"
          }
        ],
        "responses": {
          "200": {
            "description": "Taux d'annulation calculé avec succès"
          }
        }
      }
    },
    "/api/appointments/analytics/peak-hours": {
      "get": {
        "summary": "Récupère les heures de pointe",
        "tags": [
          "Appointment Analytics"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "startDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Date de début (YYYY-MM-DD)"
          },
          {
            "in": "query",
            "name": "endDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Date de fin (YYYY-MM-DD)"
          },
          {
            "in": "query",
            "name": "practitionerId",
            "schema": {
              "type": "string"
            },
            "description": "ID du praticien"
          },
          {
            "in": "query",
            "name": "serviceId",
            "schema": {
              "type": "string"
            },
            "description": "ID du service"
          }
        ],
        "responses": {
          "200": {
            "description": "Heures de pointe récupérées avec succès"
          }
        }
      }
    },
    "/api/appointments/analytics/summary": {
      "get": {
        "summary": "Récupère un résumé des métriques clés",
        "tags": [
          "Appointment Analytics"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "startDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Date de début (par défaut 30 derniers jours)"
          },
          {
            "in": "query",
            "name": "endDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Date de fin (par défaut aujourd'hui)"
          }
        ],
        "responses": {
          "200": {
            "description": "Résumé récupéré avec succès"
          }
        }
      }
    },
    "/api/appointments/analytics/trends/monthly": {
      "get": {
        "summary": "Récupère les tendances mensuelles",
        "tags": [
          "Appointment Analytics"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "startDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Date de début (par défaut 12 derniers mois)"
          },
          {
            "in": "query",
            "name": "endDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Date de fin (par défaut aujourd'hui)"
          },
          {
            "in": "query",
            "name": "practitionerId",
            "schema": {
              "type": "string"
            },
            "description": "ID du praticien"
          }
        ],
        "responses": {
          "200": {
            "description": "Tendances mensuelles récupérées avec succès"
          }
        }
      }
    },
    "/api/appointments/analytics/services": {
      "get": {
        "summary": "Récupère les statistiques par service",
        "tags": [
          "Appointment Analytics"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "startDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Date de début"
          },
          {
            "in": "query",
            "name": "endDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Date de fin"
          }
        ],
        "responses": {
          "200": {
            "description": "Statistiques par service récupérées avec succès"
          }
        }
      }
    },
    "/api/appointments/analytics/practitioners": {
      "get": {
        "summary": "Récupère les statistiques par praticien",
        "tags": [
          "Appointment Analytics"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "startDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Date de début"
          },
          {
            "in": "query",
            "name": "endDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Date de fin"
          },
          {
            "in": "query",
            "name": "serviceId",
            "schema": {
              "type": "string"
            },
            "description": "ID du service"
          }
        ],
        "responses": {
          "200": {
            "description": "Statistiques par praticien récupérées avec succès"
          }
        }
      }
    },
    "/api/appointments/analytics/reports/excel": {
      "get": {
        "summary": "Génère un rapport Excel des statistiques",
        "tags": [
          "Appointment Analytics"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "startDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Date de début"
          },
          {
            "in": "query",
            "name": "endDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Date de fin"
          },
          {
            "in": "query",
            "name": "practitionerId",
            "schema": {
              "type": "string"
            },
            "description": "ID du praticien"
          },
          {
            "in": "query",
            "name": "serviceId",
            "schema": {
              "type": "string"
            },
            "description": "ID du service"
          }
        ],
        "responses": {
          "200": {
            "description": "Fichier Excel généré et téléchargé",
            "content": {
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Paramètres invalides"
          },
          "401": {
            "description": "Non autorisé"
          },
          "500": {
            "description": "Erreur lors de la génération du rapport"
          }
        }
      }
    },
    "/api/appointments/analytics/reports/pdf": {
      "get": {
        "summary": "Génère un rapport PDF des statistiques",
        "tags": [
          "Appointment Analytics"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "startDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Date de début"
          },
          {
            "in": "query",
            "name": "endDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Date de fin"
          },
          {
            "in": "query",
            "name": "practitionerId",
            "schema": {
              "type": "string"
            },
            "description": "ID du praticien"
          },
          {
            "in": "query",
            "name": "serviceId",
            "schema": {
              "type": "string"
            },
            "description": "ID du service"
          }
        ],
        "responses": {
          "200": {
            "description": "Fichier PDF généré et téléchargé",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Paramètres invalides"
          },
          "401": {
            "description": "Non autorisé"
          },
          "500": {
            "description": "Erreur lors de la génération du rapport"
          }
        }
      }
    },
    "/appointments/{organizationId}": {
      "post": {
        "tags": [
          "Appointments"
        ],
        "summary": "Créer un nouveau rendez-vous",
        "description": "Crée un nouveau rendez-vous pour l'organisation spécifiée.\n\n**Fonctionnalités:**\n- Validation des données d'entrée\n- Vérification de disponibilité automatique\n- Détection de conflits\n- Création du rendez-vous avec statut \"scheduled\"\n\n**Validations:**\n- Client et praticien doivent exister\n- Créneau doit être disponible\n- Date doit être dans le futur\n- Respect des horaires d'ouverture\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organizationId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID de l'organisation"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "clientId": {
                    "type": "string",
                    "description": "ID du client"
                  },
                  "practitionerId": {
                    "type": "string",
                    "description": "ID du praticien"
                  },
                  "serviceId": {
                    "type": "string",
                    "description": "ID du service"
                  },
                  "date": {
                    "type": "string",
                    "format": "date",
                    "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
                    "description": "Date du rendez-vous (YYYY-MM-DD)"
                  },
                  "startTime": {
                    "type": "string",
                    "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$",
                    "description": "Heure de début (HH:MM)"
                  },
                  "notes": {
                    "type": "string",
                    "maxLength": 1000,
                    "description": "Notes optionnelles"
                  }
                },
                "required": [
                  "clientId",
                  "practitionerId",
                  "serviceId",
                  "date",
                  "startTime"
                ]
              },
              "example": {
                "clientId": "client123",
                "practitionerId": "practitioner456",
                "serviceId": "service789",
                "date": "2024-03-15",
                "startTime": "14:30",
                "notes": "Première consultation"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Rendez-vous créé avec succès",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Rendez-vous créé avec succès"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Appointment"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "409": {
            "description": "Conflit de créneaux",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "success": false,
                  "error": {
                    "code": "APPOINTMENT_CONFLICT",
                    "message": "Ce créneau est déjà occupé"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Appointments"
        ],
        "summary": "Récupérer les rendez-vous avec filtres",
        "description": "Récupère la liste des rendez-vous pour l'organisation avec possibilité de filtrage.\n\n**Filtres disponibles:**\n- Par période (startDate, endDate)\n- Par praticien (practitionerId)\n- Par service (serviceId)\n- Par client (clientId)\n- Par statut (status)\n- Recherche textuelle (searchQuery)\n- Pagination (page, limit)\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organizationId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID de l'organisation"
          },
          {
            "in": "query",
            "name": "startDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Date de début (YYYY-MM-DD)"
          },
          {
            "in": "query",
            "name": "endDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Date de fin (YYYY-MM-DD)"
          },
          {
            "in": "query",
            "name": "practitionerId",
            "schema": {
              "type": "string"
            },
            "description": "Filtrer par praticien"
          },
          {
            "in": "query",
            "name": "serviceId",
            "schema": {
              "type": "string"
            },
            "description": "Filtrer par service"
          },
          {
            "in": "query",
            "name": "clientId",
            "schema": {
              "type": "string"
            },
            "description": "Filtrer par client"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "scheduled",
                  "confirmed",
                  "completed",
                  "cancelled",
                  "no-show"
                ]
              }
            },
            "description": "Filtrer par statut"
          },
          {
            "in": "query",
            "name": "searchQuery",
            "schema": {
              "type": "string",
              "maxLength": 100
            },
            "description": "Recherche textuelle"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Numéro de page"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Nombre d'éléments par page"
          }
        ],
        "responses": {
          "200": {
            "description": "Liste des rendez-vous",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Appointment"
                      }
                    },
                    "count": {
                      "type": "integer",
                      "description": "Nombre total de résultats"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/appointments/{organizationId}/{appointmentId}": {
      "get": {
        "tags": [
          "Appointments"
        ],
        "summary": "Récupérer un rendez-vous par ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organizationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "appointmentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Détails du rendez-vous",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Appointment"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Appointments"
        ],
        "summary": "Mettre à jour un rendez-vous",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organizationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "appointmentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string",
                    "format": "date"
                  },
                  "startTime": {
                    "type": "string",
                    "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"
                  },
                  "duration": {
                    "type": "integer",
                    "minimum": 5,
                    "maximum": 480
                  },
                  "serviceId": {
                    "type": "string"
                  },
                  "practitionerId": {
                    "type": "string"
                  },
                  "notes": {
                    "type": "string",
                    "maxLength": 1000
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "scheduled",
                      "confirmed",
                      "completed",
                      "cancelled",
                      "no-show"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rendez-vous mis à jour avec succès"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "description": "Conflit de créneaux"
          }
        }
      },
      "delete": {
        "tags": [
          "Appointments"
        ],
        "summary": "Supprimer un rendez-vous",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organizationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "appointmentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reason": {
                    "type": "string",
                    "maxLength": 500,
                    "description": "Raison de la suppression"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rendez-vous supprimé avec succès"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/appointments/{organizationId}/{appointmentId}/status": {
      "patch": {
        "tags": [
          "Appointments"
        ],
        "summary": "Mettre à jour le statut d'un rendez-vous",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/appointments/{organizationId}/{appointmentId}/confirm": {
      "post": {
        "tags": [
          "Appointments"
        ],
        "summary": "Confirmer un rendez-vous",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/appointments/{organizationId}/{appointmentId}/complete": {
      "post": {
        "tags": [
          "Appointments"
        ],
        "summary": "Terminer un rendez-vous",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/appointments/{organizationId}/{appointmentId}/cancel": {
      "post": {
        "tags": [
          "Appointments"
        ],
        "summary": "Annuler un rendez-vous",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/appointments/{organizationId}/{appointmentId}/no-show": {
      "post": {
        "tags": [
          "Appointments"
        ],
        "summary": "Marquer un rendez-vous comme absent",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/appointments/{organizationId}/available-slots": {
      "get": {
        "tags": [
          "Appointments"
        ],
        "summary": "Récupérer les créneaux disponibles (protégé)",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/appointments/{organizationId}/public/available-slots": {
      "get": {
        "tags": [
          "Public Booking"
        ],
        "summary": "Récupérer les créneaux disponibles pour réservation publique",
        "description": "Endpoint public pour récupérer les créneaux disponibles.\nUtilisé par l'interface de réservation client.\n\n**Fonctionnalités:**\n- Pas d'authentification requise\n- Filtrage par date, service et praticien\n- Respect des règles de réservation de l'organisation\n- Rate limiting pour éviter les abus\n",
        "parameters": [
          {
            "in": "path",
            "name": "organizationId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID de l'organisation"
          },
          {
            "in": "query",
            "name": "date",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Date pour laquelle récupérer les créneaux (YYYY-MM-DD)"
          },
          {
            "in": "query",
            "name": "serviceId",
            "schema": {
              "type": "string"
            },
            "description": "ID du service (optionnel)"
          },
          {
            "in": "query",
            "name": "practitionerId",
            "schema": {
              "type": "string"
            },
            "description": "ID du praticien (optionnel)"
          }
        ],
        "responses": {
          "200": {
            "description": "Liste des créneaux disponibles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AvailableSlot"
                      }
                    }
                  }
                },
                "example": {
                  "success": true,
                  "data": [
                    {
                      "date": "2024-03-15",
                      "startTime": "09:00",
                      "endTime": "09:30",
                      "duration": 30,
                      "practitionerId": "practitioner123",
                      "serviceId": "service456"
                    },
                    {
                      "date": "2024-03-15",
                      "startTime": "10:00",
                      "endTime": "10:30",
                      "duration": 30,
                      "practitionerId": "practitioner123",
                      "serviceId": "service456"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitError"
          }
        },
        "security": []
      }
    },
    "/appointments/{organizationId}/public/book": {
      "post": {
        "tags": [
          "Public Booking"
        ],
        "summary": "Créer une réservation publique",
        "description": "Endpoint public pour créer une réservation.\nUtilisé par l'interface de réservation client.\n\n**Fonctionnalités:**\n- Pas d'authentification requise\n- Création automatique du client si nouveau\n- Validation des créneaux disponibles\n- Envoi automatique de confirmation\n- Respect des règles de réservation\n",
        "parameters": [
          {
            "in": "path",
            "name": "organizationId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID de l'organisation"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "clientData": {
                    "type": "object",
                    "properties": {
                      "firstName": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 50
                      },
                      "lastName": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 50
                      },
                      "email": {
                        "type": "string",
                        "format": "email"
                      },
                      "phone": {
                        "type": "string",
                        "minLength": 10,
                        "maxLength": 20
                      },
                      "preferences": {
                        "type": "object",
                        "properties": {
                          "reminderMethod": {
                            "type": "string",
                            "enum": [
                              "email",
                              "sms",
                              "both"
                            ]
                          },
                          "language": {
                            "type": "string",
                            "minLength": 2,
                            "maxLength": 5
                          }
                        }
                      }
                    },
                    "required": [
                      "firstName",
                      "lastName",
                      "email",
                      "phone"
                    ]
                  },
                  "appointmentData": {
                    "type": "object",
                    "properties": {
                      "date": {
                        "type": "string",
                        "format": "date"
                      },
                      "startTime": {
                        "type": "string",
                        "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"
                      },
                      "serviceId": {
                        "type": "string"
                      },
                      "practitionerId": {
                        "type": "string"
                      },
                      "notes": {
                        "type": "string",
                        "maxLength": 1000
                      }
                    },
                    "required": [
                      "date",
                      "startTime",
                      "serviceId"
                    ]
                  }
                },
                "required": [
                  "clientData",
                  "appointmentData"
                ]
              },
              "example": {
                "clientData": {
                  "firstName": "Jean",
                  "lastName": "Dupont",
                  "email": "jean.dupont@example.com",
                  "phone": "+33123456789",
                  "preferences": {
                    "reminderMethod": "email",
                    "language": "fr"
                  }
                },
                "appointmentData": {
                  "date": "2024-03-15",
                  "startTime": "14:30",
                  "serviceId": "service789",
                  "notes": "Première consultation"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Réservation créée avec succès",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Réservation créée avec succès"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "appointment": {
                          "$ref": "#/components/schemas/Appointment"
                        },
                        "client": {
                          "$ref": "#/components/schemas/Client"
                        },
                        "isNewClient": {
                          "type": "boolean",
                          "description": "Indique si le client a été créé lors de cette réservation"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "409": {
            "description": "Conflit de créneaux ou créneau non disponible"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitError"
          }
        },
        "security": []
      }
    },
    "/appointments/{organizationId}/public/{appointmentId}/modify": {
      "put": {
        "tags": [
          "Public Booking"
        ],
        "summary": "Modifier une réservation publique",
        "description": "Endpoint public pour modifier une réservation existante.\nNécessite l'email du client pour authentification.\n",
        "parameters": [
          {
            "in": "path",
            "name": "organizationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "appointmentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "clientEmail": {
                    "type": "string",
                    "format": "email",
                    "description": "Email du client pour authentification"
                  },
                  "updates": {
                    "type": "object",
                    "properties": {
                      "date": {
                        "type": "string",
                        "format": "date"
                      },
                      "startTime": {
                        "type": "string",
                        "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"
                      },
                      "serviceId": {
                        "type": "string"
                      },
                      "notes": {
                        "type": "string",
                        "maxLength": 1000
                      }
                    }
                  }
                },
                "required": [
                  "clientEmail",
                  "updates"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Réservation modifiée avec succès"
          },
          "403": {
            "description": "Email client incorrect"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "security": []
      }
    },
    "/appointments/{organizationId}/public/{appointmentId}/cancel": {
      "post": {
        "tags": [
          "Public Booking"
        ],
        "summary": "Annuler une réservation publique",
        "description": "Endpoint public pour annuler une réservation existante.\nNécessite l'email du client pour authentification.\n",
        "parameters": [
          {
            "in": "path",
            "name": "organizationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "appointmentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "clientEmail": {
                    "type": "string",
                    "format": "email",
                    "description": "Email du client pour authentification"
                  },
                  "reason": {
                    "type": "string",
                    "maxLength": 500,
                    "description": "Raison de l'annulation (optionnel)"
                  }
                },
                "required": [
                  "clientEmail"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Réservation annulée avec succès"
          },
          "403": {
            "description": "Email client incorrect"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "security": []
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Connexion utilisateur avec JWT",
        "description": "Authentifie un utilisateur et retourne des tokens JWT.\n\n**Fonctionnalités:**\n- Authentification par email/mot de passe\n- Support 2FA (si activé)\n- Génération de tokens JWT (access + refresh)\n- Rate limiting (5 tentatives/15min)\n- Détection d'activité suspecte\n\n**Sécurité:**\n- Hachage sécurisé des mots de passe (bcrypt)\n- Protection contre les attaques par force brute\n- Limitation des sessions concurrentes\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              },
              "examples": {
                "basic": {
                  "summary": "Connexion basique",
                  "value": {
                    "email": "user@example.com",
                    "password": "SecurePass123!",
                    "rememberMe": false
                  }
                },
                "with2FA": {
                  "summary": "Connexion avec 2FA",
                  "value": {
                    "email": "user@example.com",
                    "password": "SecurePass123!",
                    "twoFactorCode": "123456",
                    "rememberMe": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Connexion réussie",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                },
                "example": {
                  "success": true,
                  "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                  "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                  "user": {
                    "id": "user123",
                    "email": "user@example.com",
                    "firstName": "John",
                    "lastName": "Doe",
                    "role": "user"
                  },
                  "expiresIn": 86400
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "description": "Identifiants invalides",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "success": false,
                  "error": {
                    "code": "INVALID_CREDENTIALS",
                    "message": "Email ou mot de passe incorrect"
                  }
                }
              }
            }
          },
          "423": {
            "description": "Compte verrouillé",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "success": false,
                  "error": {
                    "code": "ACCOUNT_LOCKED",
                    "message": "Compte temporairement verrouillé suite à trop de tentatives"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimitError"
          }
        },
        "security": []
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Inscription d'un nouvel utilisateur",
        "description": "Crée un nouveau compte utilisateur avec vérification email.\n\n**Fonctionnalités:**\n- Création de compte avec validation\n- Hachage sécurisé du mot de passe\n- Envoi d'email de vérification\n- Attribution automatique du rôle\n- Génération de tokens JWT\n\n**Validation:**\n- Email unique dans l'organisation\n- Mot de passe fort requis (8+ chars, maj, min, chiffre, spécial)\n- Noms minimum 2 caractères\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              },
              "example": {
                "email": "newuser@example.com",
                "password": "SecurePass123!",
                "firstName": "Jane",
                "lastName": "Smith",
                "organizationName": "Mon Entreprise"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Inscription réussie",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Compte créé avec succès. Vérifiez votre email."
                    },
                    "user": {
                      "$ref": "#/components/schemas/User"
                    },
                    "accessToken": {
                      "type": "string",
                      "description": "Token JWT d'accès"
                    },
                    "refreshToken": {
                      "type": "string",
                      "description": "Token de rafraîchissement"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "409": {
            "description": "Email déjà utilisé",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "success": false,
                  "error": {
                    "code": "EMAIL_ALREADY_EXISTS",
                    "message": "Cette adresse email est déjà utilisée"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimitError"
          }
        },
        "security": []
      }
    },
    "/auth/refresh-token": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Rafraîchissement du token JWT",
        "description": "Génère un nouveau token d'accès à partir du refresh token.\n\n**Sécurité:**\n- Rotation automatique du refresh token\n- Détection de réutilisation de token\n- Révocation en cascade si compromission détectée\n- Validation de la famille de tokens\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refreshToken": {
                    "type": "string",
                    "description": "Token de rafraîchissement valide"
                  }
                },
                "required": [
                  "refreshToken"
                ]
              },
              "example": {
                "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token rafraîchi avec succès",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "accessToken": {
                      "type": "string",
                      "description": "Nouveau token d'accès"
                    },
                    "refreshToken": {
                      "type": "string",
                      "description": "Nouveau refresh token (rotation)"
                    },
                    "expiresIn": {
                      "type": "number",
                      "description": "Durée de validité en secondes",
                      "example": 86400
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Refresh token invalide ou expiré",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "success": false,
                  "error": {
                    "code": "INVALID_REFRESH_TOKEN",
                    "message": "Token de rafraîchissement invalide ou expiré"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimitError"
          }
        },
        "security": []
      }
    },
    "/auth/forgot-password": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Demande de réinitialisation de mot de passe",
        "description": "Envoie un email avec un lien de réinitialisation de mot de passe.\n\n**Sécurité:**\n- Token JWT temporaire (30 minutes)\n- Rate limiting (2 demandes/heure)\n- Email sécurisé avec lien unique\n- Pas de révélation d'existence du compte\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Adresse email du compte"
                  }
                },
                "required": [
                  "email"
                ]
              },
              "example": {
                "email": "user@example.com"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email envoyé (même si compte inexistant)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Si ce compte existe, un email de réinitialisation a été envoyé"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitError"
          }
        },
        "security": []
      }
    },
    "/auth/reset-password": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Réinitialisation du mot de passe",
        "description": "Réinitialise le mot de passe avec un token de réinitialisation valide.\n\n**Sécurité:**\n- Validation du token JWT de réinitialisation\n- Nouveau mot de passe fort requis\n- Révocation de toutes les sessions existantes\n- Historique des mots de passe (évite réutilisation)\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "Token de réinitialisation reçu par email"
                  },
                  "newPassword": {
                    "type": "string",
                    "minLength": 8,
                    "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]",
                    "description": "Nouveau mot de passe fort"
                  }
                },
                "required": [
                  "token",
                  "newPassword"
                ]
              },
              "example": {
                "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                "newPassword": "NewSecurePass123!"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Mot de passe réinitialisé avec succès",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Mot de passe réinitialisé avec succès"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "description": "Token de réinitialisation invalide",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "success": false,
                  "error": {
                    "code": "INVALID_RESET_TOKEN",
                    "message": "Token de réinitialisation invalide ou expiré"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimitError"
          }
        },
        "security": []
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Liste des utilisateurs",
        "description": "Récupère la liste paginée des utilisateurs de l'organisation.\n\n**Permissions requises:** `read:users`\n\n**Filtres disponibles:**\n- Par rôle\n- Par statut\n- Par date de création\n- Recherche textuelle (nom, email)\n",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageParam"
          },
          {
            "$ref": "#/components/parameters/LimitParam"
          },
          {
            "$ref": "#/components/parameters/SortParam"
          },
          {
            "name": "role",
            "in": "query",
            "description": "Filtrer par rôle",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "user",
                "manager",
                "admin"
              ]
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filtrer par statut",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "inactive",
                "suspended"
              ]
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Recherche textuelle (nom, email)",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 2,
              "example": "john"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Liste des utilisateurs récupérée avec succès",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "users": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/User"
                          }
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/PaginationMeta"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "success": {
                    "summary": "Réponse réussie",
                    "value": {
                      "success": true,
                      "data": {
                        "users": [
                          {
                            "id": "user_123",
                            "email": "john.doe@example.com",
                            "firstName": "John",
                            "lastName": "Doe",
                            "role": "user",
                            "status": "active",
                            "organizationId": "org_456",
                            "createdAt": "2024-01-15T10:30:00Z",
                            "updatedAt": "2024-01-15T10:30:00Z"
                          }
                        ],
                        "pagination": {
                          "page": 1,
                          "limit": 20,
                          "total": 150,
                          "totalPages": 8,
                          "hasNext": true,
                          "hasPrev": false
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitError"
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Créer un utilisateur",
        "description": "Crée un nouveau utilisateur dans l'organisation.\n\n**Permissions requises:** `create:users`\n\n**Validations:**\n- Email unique dans l'organisation\n- Mot de passe fort requis\n- Rôle valide selon les permissions\n",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password",
                  "firstName",
                  "lastName",
                  "role"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Adresse email unique",
                    "example": "new.user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 8,
                    "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]",
                    "description": "Mot de passe fort (8+ chars, maj, min, chiffre, spécial)",
                    "example": "SecurePass123!"
                  },
                  "firstName": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 50,
                    "example": "Jane"
                  },
                  "lastName": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 50,
                    "example": "Smith"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "user",
                      "manager",
                      "admin"
                    ],
                    "description": "Rôle de l'utilisateur",
                    "example": "user"
                  },
                  "sendWelcomeEmail": {
                    "type": "boolean",
                    "description": "Envoyer un email de bienvenue",
                    "default": true
                  }
                }
              },
              "examples": {
                "manager": {
                  "summary": "Créer un manager",
                  "value": {
                    "email": "manager@example.com",
                    "password": "ManagerPass123!",
                    "firstName": "Alice",
                    "lastName": "Johnson",
                    "role": "manager",
                    "sendWelcomeEmail": true
                  }
                },
                "user": {
                  "summary": "Créer un utilisateur standard",
                  "value": {
                    "email": "user@example.com",
                    "password": "UserPass123!",
                    "firstName": "Bob",
                    "lastName": "Wilson",
                    "role": "user",
                    "sendWelcomeEmail": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Utilisateur créé avec succès",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/User"
                        },
                        "temporaryPassword": {
                          "type": "string",
                          "description": "Mot de passe temporaire (si généré automatiquement)"
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Utilisateur créé avec succès"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "409": {
            "description": "Email déjà utilisé",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "success": false,
                  "error": {
                    "code": "EMAIL_ALREADY_EXISTS",
                    "message": "Cette adresse email est déjà utilisée"
                  },
                  "timestamp": "2024-01-15T10:30:00Z",
                  "requestId": "req_123456789"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/integrations": {
      "get": {
        "summary": "Get user's integrations",
        "tags": [
          "Integrations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "provider",
            "schema": {
              "type": "string",
              "enum": [
                "google",
                "microsoft",
                "slack",
                "zoom"
              ]
            },
            "description": "Filter by provider"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "connected",
                "disconnected",
                "error",
                "pending"
              ]
            },
            "description": "Filter by status"
          }
        ],
        "responses": {
          "200": {
            "description": "List of user integrations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UserIntegration"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/user/integrations/{provider}/connect": {
      "post": {
        "summary": "Initiate OAuth connection for a provider",
        "tags": [
          "Integrations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "provider",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "google",
                "microsoft",
                "slack",
                "zoom"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "scopes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Requested OAuth scopes"
                  },
                  "redirectUri": {
                    "type": "string",
                    "description": "OAuth redirect URI"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OAuth authorization URL",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "authUrl": {
                          "type": "string"
                        },
                        "state": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/user/integrations/{provider}/callback": {
      "post": {
        "summary": "Handle OAuth callback",
        "tags": [
          "Integrations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "provider",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "google",
                "microsoft",
                "slack",
                "zoom"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "state"
                ],
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "OAuth authorization code"
                  },
                  "state": {
                    "type": "string",
                    "description": "OAuth state parameter"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Integration connected successfully"
          }
        }
      }
    },
    "/api/user/integrations/{id}/settings": {
      "put": {
        "summary": "Update integration sync settings",
        "tags": [
          "Integrations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "syncSettings": {
                    "type": "object",
                    "properties": {
                      "enabled": {
                        "type": "boolean"
                      },
                      "syncCalendar": {
                        "type": "boolean"
                      },
                      "syncContacts": {
                        "type": "boolean"
                      },
                      "syncFrequency": {
                        "type": "string",
                        "enum": [
                          "realtime",
                          "hourly",
                          "daily",
                          "weekly"
                        ]
                      },
                      "bidirectional": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Settings updated successfully"
          }
        }
      }
    },
    "/api/user/integrations/{id}": {
      "delete": {
        "summary": "Disconnect an integration",
        "tags": [
          "Integrations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Integration disconnected successfully"
          }
        }
      }
    },
    "/api/user/integrations/{id}/history": {
      "get": {
        "summary": "Get integration sync history",
        "tags": [
          "Integrations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "success",
                "error",
                "pending"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sync history",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "history": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/SyncHistory"
                          }
                        },
                        "total": {
                          "type": "integer"
                        },
                        "hasMore": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/user/integrations/{id}/sync": {
      "post": {
        "summary": "Trigger manual sync for an integration",
        "tags": [
          "Integrations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "syncType": {
                    "type": "string",
                    "enum": [
                      "full",
                      "incremental"
                    ],
                    "default": "incremental"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sync initiated successfully"
          }
        }
      }
    },
    "/api/user/integrations/{id}/test": {
      "post": {
        "summary": "Test integration connection",
        "tags": [
          "Integrations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Connection test results"
          }
        }
      }
    },
    "/api/user/integrations/analytics/metrics": {
      "get": {
        "summary": "Get integration analytics metrics (Admin only)",
        "tags": [
          "Integrations",
          "Analytics"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Analytics metrics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "integrationMetrics": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/IntegrationMetrics"
                          }
                        },
                        "userAdoptionMetrics": {
                          "$ref": "#/components/schemas/UserAdoptionMetrics"
                        },
                        "performanceMetrics": {
                          "$ref": "#/components/schemas/PerformanceMetrics"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Access denied - Admin role required"
          }
        }
      }
    },
    "/api/migration/organization/run": {
      "post": {
        "summary": "Exécuter la migration d'organisation",
        "description": "Migre les utilisateurs existants vers le système d'organisation. Nécessite les droits super admin.",
        "tags": [
          "Migration"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "dryRun": {
                    "type": "boolean",
                    "description": "Si true, simule la migration sans l'exécuter",
                    "default": false
                  },
                  "batchSize": {
                    "type": "integer",
                    "description": "Nombre d'utilisateurs à traiter par batch",
                    "default": 100,
                    "minimum": 1,
                    "maximum": 1000
                  },
                  "defaultOrganizationName": {
                    "type": "string",
                    "description": "Nom par défaut pour les organisations créées",
                    "default": "Mon Organisation"
                  },
                  "defaultSector": {
                    "type": "string",
                    "enum": [
                      "services",
                      "retail",
                      "healthcare",
                      "beauty",
                      "education",
                      "consulting",
                      "association",
                      "other"
                    ],
                    "description": "Secteur par défaut pour les organisations créées",
                    "default": "other"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Migration exécutée avec succès",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "totalUsers": {
                          "type": "integer"
                        },
                        "usersWithOrganization": {
                          "type": "integer"
                        },
                        "usersWithoutOrganization": {
                          "type": "integer"
                        },
                        "organizationsCreated": {
                          "type": "integer"
                        },
                        "usersMigrated": {
                          "type": "integer"
                        },
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "userId": {
                                "type": "string"
                              },
                              "error": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Permissions insuffisantes"
          },
          "500": {
            "description": "Erreur lors de la migration"
          }
        }
      }
    },
    "/api/migration/organization/rollback": {
      "post": {
        "summary": "Rollback de la migration d'organisation",
        "description": "Annule la migration d'organisation en supprimant les organisations créées et en réinitialisant les utilisateurs. Nécessite les droits super admin.",
        "tags": [
          "Migration"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Rollback exécuté avec succès",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Permissions insuffisantes"
          },
          "500": {
            "description": "Erreur lors du rollback"
          }
        }
      }
    },
    "/api/migration/organization/status": {
      "get": {
        "summary": "Obtenir le statut de la migration",
        "description": "Retourne l'état actuel de la migration d'organisation",
        "tags": [
          "Migration"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Statut de la migration",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "totalUsers": {
                          "type": "integer"
                        },
                        "totalOrganizations": {
                          "type": "integer"
                        },
                        "usersWithOrganization": {
                          "type": "integer"
                        },
                        "usersWithoutOrganization": {
                          "type": "integer"
                        },
                        "migrationOrganizations": {
                          "type": "integer"
                        },
                        "migrationNeeded": {
                          "type": "boolean"
                        },
                        "migrationCompleted": {
                          "type": "boolean"
                        },
                        "migrationProgress": {
                          "type": "number",
                          "description": "Pourcentage de progression (0-100)"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Erreur lors de la récupération du statut"
          }
        }
      }
    },
    "/api/migration/organization/validate": {
      "post": {
        "summary": "Valider l'intégrité des données après migration",
        "description": "Vérifie l'intégrité des données utilisateurs et organisations après la migration",
        "tags": [
          "Migration"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Validation terminée",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "isValid": {
                          "type": "boolean"
                        },
                        "usersValidation": {
                          "type": "object",
                          "properties": {
                            "total": {
                              "type": "integer"
                            },
                            "valid": {
                              "type": "integer"
                            },
                            "invalid": {
                              "type": "integer"
                            },
                            "errors": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "userId": {
                                    "type": "string"
                                  },
                                  "error": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "organizationsValidation": {
                          "type": "object",
                          "properties": {
                            "total": {
                              "type": "integer"
                            },
                            "valid": {
                              "type": "integer"
                            },
                            "invalid": {
                              "type": "integer"
                            },
                            "errors": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "organizationId": {
                                    "type": "string"
                                  },
                                  "error": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "dataIntegrity": {
                          "type": "object",
                          "properties": {
                            "orphanedUsers": {
                              "type": "integer"
                            },
                            "orphanedOrganizations": {
                              "type": "integer"
                            },
                            "inconsistentMemberCounts": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Erreur lors de la validation"
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Récupérer le profil de l'utilisateur connecté",
        "description": "Retourne les informations du profil de l'utilisateur actuellement connecté.\n\n**Fonctionnalités:**\n- Informations complètes du profil\n- Permissions et rôles\n- Statistiques personnelles\n- Préférences utilisateur\n",
        "responses": {
          "200": {
            "description": "Profil utilisateur récupéré avec succès",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                },
                "example": {
                  "success": true,
                  "data": {
                    "id": "user123",
                    "email": "user@example.com",
                    "firstName": "John",
                    "lastName": "Doe",
                    "role": "user",
                    "status": "active",
                    "organizationId": "org123",
                    "createdAt": "2024-01-15T10:30:00Z",
                    "updatedAt": "2024-01-15T10:30:00Z"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Mettre à jour le profil personnel",
        "description": "Permet à l'utilisateur de mettre à jour ses propres informations de profil.\n\n**Champs modifiables:**\n- Prénom et nom\n- Téléphone\n- Préférences\n- Photo de profil\n\n**Restrictions:**\n- Email non modifiable (sécurité)\n- Rôle non modifiable (permissions)\n- Statut non modifiable (admin seulement)\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string",
                    "minLength": 2,
                    "description": "Prénom de l'utilisateur"
                  },
                  "lastName": {
                    "type": "string",
                    "minLength": 2,
                    "description": "Nom de famille"
                  },
                  "phone": {
                    "type": "string",
                    "pattern": "^\\\\+?[1-9]\\\\d{1,14}$",
                    "description": "Numéro de téléphone (format international)"
                  },
                  "preferences": {
                    "type": "object",
                    "properties": {
                      "language": {
                        "type": "string",
                        "enum": [
                          "fr",
                          "en",
                          "es"
                        ]
                      },
                      "timezone": {
                        "type": "string",
                        "example": "Europe/Paris"
                      },
                      "notifications": {
                        "type": "object",
                        "properties": {
                          "email": {
                            "type": "boolean"
                          },
                          "sms": {
                            "type": "boolean"
                          },
                          "push": {
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "example": {
                "firstName": "John",
                "lastName": "Doe",
                "phone": "+33123456789",
                "preferences": {
                  "language": "fr",
                  "timezone": "Europe/Paris",
                  "notifications": {
                    "email": true,
                    "sms": false,
                    "push": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profil mis à jour avec succès",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Profil mis à jour avec succès"
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/users/{id}/complete-setup": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Finaliser la configuration d'un utilisateur existant",
        "description": "Complète automatiquement les données manquantes d'un utilisateur qui appartient déjà à une organisation.\n\n**Fonctionnalités:**\n- Mise à jour des informations utilisateur manquantes\n- Association à l'organisation existante si nécessaire\n- Finalisation du processus d'onboarding\n- Nettoyage des données temporaires\n",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID de l'utilisateur",
            "example": "user123"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "organizationName": {
                    "type": "string",
                    "description": "Nom d'organisation fourni lors de l'inscription",
                    "example": "Mon Entreprise"
                  },
                  "userData": {
                    "type": "object",
                    "properties": {
                      "firstName": {
                        "type": "string",
                        "example": "John"
                      },
                      "lastName": {
                        "type": "string",
                        "example": "Doe"
                      },
                      "phone": {
                        "type": "string",
                        "example": "+33123456789"
                      }
                    }
                  }
                }
              },
              "example": {
                "organizationName": "Mon Entreprise",
                "userData": {
                  "firstName": "John",
                  "lastName": "Doe",
                  "phone": "+33123456789"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Configuration finalisée avec succès",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Configuration finalisée avec succès"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/User"
                        },
                        "organization": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "role": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "success": true,
                  "message": "Configuration finalisée avec succès",
                  "data": {
                    "user": {
                      "id": "user123",
                      "email": "user@example.com",
                      "firstName": "John",
                      "lastName": "Doe"
                    },
                    "organization": {
                      "id": "org123",
                      "name": "Mon Entreprise",
                      "role": "admin"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Utilisateur non trouvé"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/users/{id}/organizations": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Récupérer les organisations d'un utilisateur",
        "description": "Retourne la liste des organisations auxquelles l'utilisateur appartient.\n\n**Fonctionnalités:**\n- Liste des organisations avec rôles\n- Statut d'appartenance (actif/inactif)\n- Date d'adhésion\n- Permissions dans chaque organisation\n\n**Permissions:**\n- L'utilisateur peut voir ses propres organisations\n- Les admins peuvent voir les organisations de tous les utilisateurs\n",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID de l'utilisateur",
            "example": "user123"
          }
        ],
        "responses": {
          "200": {
            "description": "Liste des organisations récupérée avec succès",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "organizationId": {
                            "type": "string",
                            "example": "org123"
                          },
                          "organizationName": {
                            "type": "string",
                            "example": "Mon Entreprise"
                          },
                          "role": {
                            "type": "string",
                            "enum": [
                              "admin",
                              "manager",
                              "user"
                            ],
                            "example": "admin"
                          },
                          "isActive": {
                            "type": "boolean",
                            "example": true
                          },
                          "joinedAt": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2024-01-15T10:30:00Z"
                          },
                          "permissions": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "example": [
                              "manage_users",
                              "view_reports"
                            ]
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "success": true,
                  "data": [
                    {
                      "organizationId": "org123",
                      "organizationName": "Mon Entreprise",
                      "role": "admin",
                      "isActive": true,
                      "joinedAt": "2024-01-15T10:30:00Z",
                      "permissions": [
                        "manage_users",
                        "view_reports",
                        "manage_organization"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "description": "Utilisateur non trouvé",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Utilisateur non trouvé"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    }
  }
}