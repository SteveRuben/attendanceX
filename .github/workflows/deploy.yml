# .github/workflows/deploy.yml - Déploiement en production
name: 🚀 Deploy to Production

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  # 🔍 Pre-deployment checks
  pre-deployment:
    name: 🔍 Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      environment: ${{ steps.env.outputs.environment }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏷️ Get version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=$(date +%Y%m%d)-${GITHUB_SHA::8}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: 🌍 Determine environment
        id: env
        run: |
          if [[ "${{ github.event.inputs.environment }}" != "" ]]; then
            ENV="${{ github.event.inputs.environment }}"
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            ENV="production"
          else
            ENV="staging"
          fi
          echo "environment=$ENV" >> $GITHUB_OUTPUT
          echo "Environment: $ENV"

  # 🧪 Run full test suite before deployment
  test-before-deploy:
    name: 🧪 Full Test Suite
    uses: ./.github/workflows/test.yml
    needs: pre-deployment

  # 🏗️ Build for production
  build:
    name: 🏗️ Build Production
    runs-on: ubuntu-latest
    needs: [pre-deployment, test-before-deploy]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install dependencies
        run: |
          npm ci
          cd frontend && npm ci
          cd ../backend/functions && npm ci
          pip install tensorflow numpy pandas scikit-learn

      - name: 🏗️ Build frontend
        run: cd frontend && npm run build
        env:
          VITE_API_URL: ${{ secrets[format('{0}_API_URL', needs.pre-deployment.outputs.environment)] }}
          VITE_FIREBASE_CONFIG: ${{ secrets[format('{0}_FIREBASE_CONFIG', needs.pre-deployment.outputs.environment)] }}
          VITE_APP_VERSION: ${{ needs.pre-deployment.outputs.version }}

      - name: 🏗️ Build backend functions
        run: cd backend/functions && npm run build

      - name: 🤖 Prepare ML models
        run: |
          mkdir -p backend/functions/lib/ml/models
          # Copy pre-trained models if they exist
          if [ -d "ml-models" ]; then
            cp -r ml-models/* backend/functions/lib/ml/models/
          fi

      - name: 📦 Create deployment artifacts
        run: |
          tar -czf frontend-build.tar.gz -C frontend/dist .
          tar -czf backend-build.tar.gz -C backend/functions .

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts-${{ needs.pre-deployment.outputs.version }}
          path: |
            frontend-build.tar.gz
            backend-build.tar.gz
          retention-days: 30

  # 🚀 Deploy to Firebase
  deploy-firebase:
    name: 🚀 Deploy to Firebase
    runs-on: ubuntu-latest
    needs: [pre-deployment, build]
    environment: ${{ needs.pre-deployment.outputs.environment }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts-${{ needs.pre-deployment.outputs.version }}

      - name: 📦 Extract artifacts
        run: |
          mkdir -p frontend/dist
          mkdir -p backend/functions/lib
          tar -xzf frontend-build.tar.gz -C frontend/dist
          tar -xzf backend-build.tar.gz -C backend/functions

      - name: 🔥 Deploy to Firebase
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: ${{ secrets[format('{0}_FIREBASE_SERVICE_ACCOUNT', needs.pre-deployment.outputs.environment)] }}
          projectId: ${{ secrets[format('{0}_FIREBASE_PROJECT_ID', needs.pre-deployment.outputs.environment)] }}
          channelId: live
        env:
          FIREBASE_CLI_PREVIEWS: hostingchannels

      - name: 🔧 Deploy Functions
        run: |
          npm install -g firebase-tools
          cd backend
          firebase deploy --only functions --project ${{ secrets[format('{0}_FIREBASE_PROJECT_ID', needs.pre-deployment.outputs.environment)] }} --token ${{ secrets.FIREBASE_TOKEN }}

  # 🧪 Post-deployment tests
  post-deployment-tests:
    name: 🧪 Post-deployment Tests
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy-firebase]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install test dependencies
        run: cd tests && npm ci

      - name: 🧪 Run smoke tests
        run: cd tests && npm run test:smoke
        env:
          TEST_BASE_URL: ${{ secrets[format('{0}_APP_URL', needs.pre-deployment.outputs.environment)] }}
          TEST_API_URL: ${{ secrets[format('{0}_API_URL', needs.pre-deployment.outputs.environment)] }}

      - name: 🤖 Test ML/AI endpoints
        run: cd tests && npm run test:ml-endpoints
        env:
          TEST_API_URL: ${{ secrets[format('{0}_API_URL', needs.pre-deployment.outputs.environment)] }}
          TEST_API_KEY: ${{ secrets[format('{0}_API_KEY', needs.pre-deployment.outputs.environment)] }}

  # 📊 Performance monitoring
  performance-monitoring:
    name: 📊 Performance Monitoring
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy-firebase]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            ${{ secrets[format('{0}_APP_URL', needs.pre-deployment.outputs.environment)] }}
            ${{ secrets[format('{0}_APP_URL', needs.pre-deployment.outputs.environment)] }}/login
            ${{ secrets[format('{0}_APP_URL', needs.pre-deployment.outputs.environment)] }}/dashboard
            ${{ secrets[format('{0}_APP_URL', needs.pre-deployment.outputs.environment)] }}/analytics
          uploadArtifacts: true
          temporaryPublicStorage: true

  # 📢 Notification de déploiement
  notify-deployment:
    name: 📢 Deployment Notification
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy-firebase, post-deployment-tests, performance-monitoring]
    if: always()
    steps:
      - name: 📢 Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            🚀 AttendanceX Deployment to ${{ needs.pre-deployment.outputs.environment }}
            Version: ${{ needs.pre-deployment.outputs.version }}
            Status: ${{ job.status }}
            
            🧪 Test Results:
            - Post-deployment: ${{ needs.post-deployment-tests.result }}
            - Performance: ${{ needs.performance-monitoring.result }}
            
            🤖 ML/AI Features:
            - ✅ Prediction Service
            - ✅ Anomaly Detection
            - ✅ Recommendation Engine
            - ✅ Model Management
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 📧 Email notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "🚀 AttendanceX Deployed - ${{ needs.pre-deployment.outputs.environment }}"
          to: ${{ secrets.DEPLOYMENT_EMAIL_LIST }}
          from: "AttendanceX CI/CD <noreply@attendancex.com>"
          html_body: |
            <h2>🚀 AttendanceX Deployment Successful</h2>
            <p><strong>Environment:</strong> ${{ needs.pre-deployment.outputs.environment }}</p>
            <p><strong>Version:</strong> ${{ needs.pre-deployment.outputs.version }}</p>
            <p><strong>Deployed at:</strong> ${{ github.event.head_commit.timestamp }}</p>
            
            <h3>🧪 Test Results</h3>
            <ul>
              <li>Post-deployment tests: ${{ needs.post-deployment-tests.result }}</li>
              <li>Performance monitoring: ${{ needs.performance-monitoring.result }}</li>
            </ul>
            
            <h3>🤖 ML/AI Features Deployed</h3>
            <ul>
              <li>✅ Attendance Prediction Service</li>
              <li>✅ Anomaly Detection System</li>
              <li>✅ Intelligent Recommendations</li>
              <li>✅ ML Model Management</li>
            </ul>
            
            <p><a href="${{ secrets[format('{0}_APP_URL', needs.pre-deployment.outputs.environment)] }}">🔗 Access Application</a></p>

  # 🏷️ Create release
  create-release:
    name: 🏷️ Create Release
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy-firebase, post-deployment-tests]
    if: startsWith(github.ref, 'refs/tags/') && needs.post-deployment-tests.result == 'success'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📝 Generate changelog
        id: changelog
        run: |
          # Generate changelog from commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --max-count=10)
          fi
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 🏷️ Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.pre-deployment.outputs.version }}
          release_name: "AttendanceX ${{ needs.pre-deployment.outputs.version }}"
          body: |
            ## 🚀 AttendanceX Release ${{ needs.pre-deployment.outputs.version }}
            
            ### 🆕 What's New
            ${{ steps.changelog.outputs.changelog }}
            
            ### 🤖 ML/AI Features
            - 🔮 Advanced attendance predictions with 90%+ accuracy
            - 🚨 Real-time anomaly detection and alerts
            - 💡 Intelligent recommendations for event optimization
            - 🧠 ML model management and performance monitoring
            
            ### 📊 Performance
            - ⚡ Optimized loading times
            - 📱 Enhanced mobile experience
            - 🔒 Improved security measures
            
            ### 🔗 Links
            - [📱 Application](${{ secrets.PRODUCTION_APP_URL }})
            - [📚 Documentation](https://docs.attendancex.com)
            - [🐛 Report Issues](https://github.com/attendancex/attendancex/issues)
          draft: false
          prerelease: false