name: 🔄 Rollback Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to rollback'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      rollback_type:
        description: 'Type of rollback'
        required: true
        default: 'previous_version'
        type: choice
        options:
          - previous_version
          - specific_version
          - emergency_rollback
      target_version:
        description: 'Target version (for specific version rollback)'
        required: false
        type: string
      reason:
        description: 'Reason for rollback'
        required: true
        type: string

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  validate-rollback:
    name: 🔍 Validate Rollback Request
    runs-on: ubuntu-latest
    outputs:
      can-rollback: ${{ steps.validation.outputs.can-rollback }}
      target-version: ${{ steps.validation.outputs.target-version }}
      current-version: ${{ steps.validation.outputs.current-version }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Validate rollback request
        id: validation
        run: |
          echo "🔍 Validating rollback request..."
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Rollback type: ${{ github.event.inputs.rollback_type }}"
          echo "Reason: ${{ github.event.inputs.reason }}"
          
          # Get current deployed version
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            CURRENT_VERSION=$(git describe --tags --abbrev=0)
          else
            CURRENT_VERSION=$(git describe --tags --abbrev=0 --match="*-staging")
          fi
          
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Determine target version
          if [ "${{ github.event.inputs.rollback_type }}" = "specific_version" ]; then
            TARGET_VERSION="${{ github.event.inputs.target_version }}"
            if [ -z "$TARGET_VERSION" ]; then
              echo "❌ Target version required for specific version rollback"
              echo "can-rollback=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          else
            # Get previous version
            TARGET_VERSION=$(git describe --tags --abbrev=0 $CURRENT_VERSION^)
          fi
          
          echo "target-version=$TARGET_VERSION" >> $GITHUB_OUTPUT
          
          # Validate target version exists
          if ! git rev-parse "$TARGET_VERSION" >/dev/null 2>&1; then
            echo "❌ Target version $TARGET_VERSION does not exist"
            echo "can-rollback=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "✅ Rollback validation passed"
          echo "can-rollback=true" >> $GITHUB_OUTPUT

  backup-current:
    name: 💾 Backup Current State
    runs-on: ubuntu-latest
    needs: validate-rollback
    if: needs.validate-rollback.outputs.can-rollback == 'true'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 💾 Create backup
        run: |
          echo "💾 Creating backup of current state..."
          
          # Create backup directory
          mkdir -p backups
          
          # Backup current version info
          echo "Current Version: ${{ needs.validate-rollback.outputs.current-version }}" > backups/rollback-info.txt
          echo "Target Version: ${{ needs.validate-rollback.outputs.target-version }}" >> backups/rollback-info.txt
          echo "Rollback Time: $(date -u)" >> backups/rollback-info.txt
          echo "Rollback Reason: ${{ github.event.inputs.reason }}" >> backups/rollback-info.txt
          echo "Environment: ${{ github.event.inputs.environment }}" >> backups/rollback-info.txt
          
          # Backup database schema (if applicable)
          echo "📊 Backing up database schema..."
          # Add database backup commands here
          
          echo "✅ Backup completed"

      - name: 📤 Upload backup artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rollback-backup-${{ github.event.inputs.environment }}-${{ github.run_number }}
          path: backups/
          retention-days: 30

  rollback-frontend:
    name: 🎨 Rollback Frontend
    runs-on: ubuntu-latest
    needs: [validate-rollback, backup-current]
    if: needs.validate-rollback.outputs.can-rollback == 'true'
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: 📥 Checkout target version
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate-rollback.outputs.target-version }}

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: 🏗️ Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: 🚀 Deploy to Firebase Hosting
        working-directory: ./frontend
        run: |
          npm install -g firebase-tools
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            firebase deploy --only hosting --project=${{ secrets.FIREBASE_PROJECT_ID }} --token=${{ secrets.FIREBASE_TOKEN }}
          else
            firebase deploy --only hosting:staging --project=${{ secrets.FIREBASE_PROJECT_ID }} --token=${{ secrets.FIREBASE_TOKEN }}
          fi

  rollback-backend:
    name: ⚙️ Rollback Backend
    runs-on: ubuntu-latest
    needs: [validate-rollback, backup-current]
    if: needs.validate-rollback.outputs.can-rollback == 'true'
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: 📥 Checkout target version
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate-rollback.outputs.target-version }}

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        working-directory: ./backend/functions
        run: npm ci

      - name: 🏗️ Build backend
        working-directory: ./backend/functions
        run: npm run build

      - name: 🚀 Deploy Firebase Functions
        working-directory: ./backend
        run: |
          npm install -g firebase-tools
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            firebase deploy --only functions --project=${{ secrets.FIREBASE_PROJECT_ID }} --token=${{ secrets.FIREBASE_TOKEN }}
          else
            firebase deploy --only functions --project=${{ secrets.FIREBASE_PROJECT_ID }}-staging --token=${{ secrets.FIREBASE_TOKEN }}
          fi

  rollback-ml-models:
    name: 🤖 Rollback ML Models
    runs-on: ubuntu-latest
    needs: [validate-rollback, backup-current]
    if: needs.validate-rollback.outputs.can-rollback == 'true'
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: 📥 Checkout target version
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate-rollback.outputs.target-version }}

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install ML dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/functions/requirements.txt

      - name: 🤖 Rollback ML models
        run: |
          echo "🤖 Rolling back ML models to version ${{ needs.validate-rollback.outputs.target-version }}"
          
          # Rollback attendance prediction model
          echo "📊 Rolling back attendance prediction model..."
          # Add model rollback logic here
          
          # Rollback insights generation model
          echo "💡 Rolling back insights generation model..."
          # Add model rollback logic here
          
          echo "✅ ML models rollback completed"

  post-rollback-tests:
    name: 🧪 Post-Rollback Tests
    runs-on: ubuntu-latest
    needs: [rollback-frontend, rollback-backend, rollback-ml-models]
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: 📥 Checkout target version
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate-rollback.outputs.target-version }}

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🧪 Run smoke tests
        run: |
          echo "🧪 Running post-rollback smoke tests..."
          
          # Test frontend availability
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            FRONTEND_URL="https://${{ secrets.FIREBASE_PROJECT_ID }}.web.app"
          else
            FRONTEND_URL="https://${{ secrets.FIREBASE_PROJECT_ID }}-staging.web.app"
          fi
          
          echo "🌐 Testing frontend at $FRONTEND_URL"
          curl -f $FRONTEND_URL || exit 1
          
          # Test backend API
          echo "⚙️ Testing backend API..."
          # Add API health check here
          
          # Test ML endpoints
          echo "🤖 Testing ML endpoints..."
          # Add ML API tests here
          
          echo "✅ All smoke tests passed"

      - name: 🔍 Run critical path tests
        run: |
          echo "🔍 Running critical path tests..."
          
          # Install test dependencies
          npm ci
          
          # Run critical tests only
          npm run test:critical || exit 1
          
          echo "✅ Critical path tests passed"

  notify-rollback:
    name: 📢 Notify Rollback Completion
    runs-on: ubuntu-latest
    needs: [validate-rollback, post-rollback-tests]
    if: always()
    
    steps:
      - name: 📢 Notify success
        if: needs.post-rollback-tests.result == 'success'
        run: |
          echo "✅ Rollback completed successfully!"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "From: ${{ needs.validate-rollback.outputs.current-version }}"
          echo "To: ${{ needs.validate-rollback.outputs.target-version }}"
          echo "Reason: ${{ github.event.inputs.reason }}"

      - name: 📧 Send success notification
        if: needs.post-rollback-tests.result == 'success'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "✅ AttendanceX Rollback Successful - ${{ github.event.inputs.environment }}"
          body: |
            Rollback completed successfully!
            
            Environment: ${{ github.event.inputs.environment }}
            From Version: ${{ needs.validate-rollback.outputs.current-version }}
            To Version: ${{ needs.validate-rollback.outputs.target-version }}
            Reason: ${{ github.event.inputs.reason }}
            
            All post-rollback tests passed.
            
            Rollback initiated by: ${{ github.actor }}
            Time: ${{ github.event.created_at }}
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: AttendanceX CI/CD

      - name: 📢 Notify failure
        if: needs.post-rollback-tests.result == 'failure'
        run: |
          echo "❌ Rollback failed!"
          echo "Please check the logs and take manual action."

      - name: 📧 Send failure notification
        if: needs.post-rollback-tests.result == 'failure'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "❌ AttendanceX Rollback Failed - ${{ github.event.inputs.environment }}"
          body: |
            ⚠️ URGENT: Rollback failed!
            
            Environment: ${{ github.event.inputs.environment }}
            Target Version: ${{ needs.validate-rollback.outputs.target-version }}
            Reason: ${{ github.event.inputs.reason }}
            
            Manual intervention required immediately.
            
            Check the workflow logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            Rollback initiated by: ${{ github.actor }}
            Time: ${{ github.event.created_at }}
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: AttendanceX CI/CD

      - name: 💬 Slack notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ needs.post-rollback-tests.result }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          text: |
            🔄 Rollback ${{ needs.post-rollback-tests.result == 'success' && 'completed' || 'failed' }}!
            Environment: ${{ github.event.inputs.environment }}
            Version: ${{ needs.validate-rollback.outputs.current-version }} → ${{ needs.validate-rollback.outputs.target-version }}
            Reason: ${{ github.event.inputs.reason }}