# .github/workflows/test.yml - Tests complets pour AttendanceX
name: 🧪 Tests & Quality

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  # 🔍 Analyse de code et linting
  code-quality:
    name: 📊 Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          npm ci
          cd frontend && npm ci
          cd ../backend/functions && npm ci

      - name: 🔍 ESLint - Frontend
        run: cd frontend && npm run lint

      - name: 🔍 ESLint - Backend
        run: cd backend/functions && npm run lint

      - name: 🎨 Prettier check
        run: |
          cd frontend && npm run format:check
          cd ../backend/functions && npm run format:check

      - name: 📊 TypeScript check - Frontend
        run: cd frontend && npm run type-check

      - name: 📊 TypeScript check - Backend
        run: cd backend/functions && npm run type-check

  # 🧪 Tests Frontend
  frontend-tests:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: cd frontend && npm ci

      - name: 🧪 Run unit tests
        run: cd frontend && npm run test:unit

      - name: 🧪 Run integration tests
        run: cd frontend && npm run test:integration

      - name: 📊 Generate coverage report
        run: cd frontend && npm run test:coverage

      - name: 📈 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # 🔧 Tests Backend
  backend-tests:
    name: ⚙️ Backend Tests
    runs-on: ubuntu-latest
    needs: code-quality
    services:
      # Firebase Emulator pour les tests
      firebase:
        image: firebase/firebase-tools:latest
        options: --health-cmd "firebase --version" --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🐍 Setup Python (for ML dependencies)
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install dependencies
        run: |
          cd backend/functions && npm ci
          pip install tensorflow numpy pandas scikit-learn

      - name: 🔥 Setup Firebase Emulator
        run: |
          npm install -g firebase-tools
          cd backend && firebase emulators:start --only firestore,auth --detach

      - name: 🧪 Run unit tests
        run: cd backend/functions && npm run test:unit
        env:
          FIRESTORE_EMULATOR_HOST: localhost:8080
          FIREBASE_AUTH_EMULATOR_HOST: localhost:9099

      - name: 🧪 Run integration tests
        run: cd backend/functions && npm run test:integration
        env:
          FIRESTORE_EMULATOR_HOST: localhost:8080
          FIREBASE_AUTH_EMULATOR_HOST: localhost:9099

      - name: 🤖 Test ML/AI services
        run: cd backend/functions && npm run test:ml
        env:
          FIRESTORE_EMULATOR_HOST: localhost:8080

      - name: 📊 Generate coverage report
        run: cd backend/functions && npm run test:coverage

      - name: 📈 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/functions/coverage/lcov.info
          flags: backend
          name: backend-coverage

  # 🧪 Tests End-to-End
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          npm ci
          cd frontend && npm ci
          cd ../backend/functions && npm ci

      - name: 🔥 Setup Firebase Emulator
        run: |
          npm install -g firebase-tools
          cd backend && firebase emulators:start --only firestore,auth,functions --detach

      - name: 🚀 Build frontend
        run: cd frontend && npm run build

      - name: 🎭 Install Playwright
        run: cd tests && npx playwright install --with-deps

      - name: 🧪 Run E2E tests
        run: cd tests && npm run test:e2e
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000
          FIREBASE_EMULATOR_HOST: localhost:5001

      - name: 📸 Upload test artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report
          path: tests/playwright-report/

  # 🔒 Tests de sécurité
  security-tests:
    name: 🔒 Security Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          cd frontend && npm ci
          cd ../backend/functions && npm ci

      - name: 🔍 Run npm audit - Frontend
        run: cd frontend && npm audit --audit-level moderate

      - name: 🔍 Run npm audit - Backend
        run: cd backend/functions && npm audit --audit-level moderate

      - name: 🛡️ Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # 🚀 Build et déploiement de test
  build-and-deploy:
    name: 🚀 Build & Deploy Preview
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    if: github.event_name == 'pull_request'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          cd frontend && npm ci
          cd ../backend/functions && npm ci

      - name: 🏗️ Build frontend
        run: cd frontend && npm run build
        env:
          VITE_API_URL: ${{ secrets.PREVIEW_API_URL }}
          VITE_FIREBASE_CONFIG: ${{ secrets.FIREBASE_CONFIG }}

      - name: 🏗️ Build backend functions
        run: cd backend/functions && npm run build

      - name: 🚀 Deploy to Firebase Preview
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          projectId: '${{ secrets.FIREBASE_PROJECT_ID }}'
          channelId: 'pr-${{ github.event.number }}'
        env:
          FIREBASE_CLI_PREVIEWS: hostingchannels

  # 📊 Rapport de qualité final
  quality-report:
    name: 📊 Quality Report
    runs-on: ubuntu-latest
    needs: [code-quality, frontend-tests, backend-tests, e2e-tests, security-tests]
    if: always()
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📊 Generate quality report
        run: |
          echo "## 📊 Quality Report" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Tests | ${{ needs.frontend-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Tests | ${{ needs.backend-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Tests | ${{ needs.security-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🤖 ML/AI Features Tested" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Attendance Prediction Service" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Anomaly Detection" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Recommendation Engine" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ ML Model Management" >> $GITHUB_STEP_SUMMARY