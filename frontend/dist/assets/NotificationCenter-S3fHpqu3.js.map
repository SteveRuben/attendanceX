{"version":3,"file":"NotificationCenter-S3fHpqu3.js","sources":["../../../node_modules/lucide-react/dist/esm/icons/check-check.js","../../../node_modules/lucide-react/dist/esm/icons/message-square.js","../../../node_modules/lucide-react/dist/esm/icons/trash-2.js","../../src/pages/Notifications/NotificationCenter.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.525.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\"path\", { d: \"M18 6 7 17l-5-5\", key: \"116fxf\" }],\n  [\"path\", { d: \"m22 10-7.5 7.5L13 16\", key: \"ke71qq\" }]\n];\nconst CheckCheck = createLucideIcon(\"check-check\", __iconNode);\n\nexport { __iconNode, CheckCheck as default };\n//# sourceMappingURL=check-check.js.map\n","/**\n * @license lucide-react v0.525.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\"path\", { d: \"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\", key: \"1lielz\" }]\n];\nconst MessageSquare = createLucideIcon(\"message-square\", __iconNode);\n\nexport { __iconNode, MessageSquare as default };\n//# sourceMappingURL=message-square.js.map\n","/**\n * @license lucide-react v0.525.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\"path\", { d: \"M3 6h18\", key: \"d0wm0j\" }],\n  [\"path\", { d: \"M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6\", key: \"4alrt4\" }],\n  [\"path\", { d: \"M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2\", key: \"v07s0e\" }],\n  [\"line\", { x1: \"10\", x2: \"10\", y1: \"11\", y2: \"17\", key: \"1uufr5\" }],\n  [\"line\", { x1: \"14\", x2: \"14\", y1: \"11\", y2: \"17\", key: \"xtxkd\" }]\n];\nconst Trash2 = createLucideIcon(\"trash-2\", __iconNode);\n\nexport { __iconNode, Trash2 as default };\n//# sourceMappingURL=trash-2.js.map\n","// src/pages/Notifications/NotificationCenter.tsx - Centre de notifications\r\nimport { useState, useEffect } from 'react';\r\nimport { useAuth, usePermissions } from '@/hooks/use-auth';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { \r\n  Bell, \r\n  Search, \r\n  Filter,\r\n  Mail,\r\n  MessageSquare,\r\n  Smartphone,\r\n  Settings,\r\n  Check,\r\n  CheckCheck,\r\n  Trash2,\r\n  Calendar,\r\n  Users,\r\n  AlertCircle,\r\n  Info,\r\n  CheckCircle,\r\n  XCircle\r\n} from 'lucide-react';\r\nimport { notificationService } from '@/services';\r\nimport type { Notification, NotificationType, NotificationChannel } from '@attendance-x/shared';\r\nimport { toast } from 'react-toastify';\r\n\r\ninterface NotificationFilters {\r\n  search: string;\r\n  type: NotificationType | 'all';\r\n  channel: NotificationChannel | 'all';\r\n  unreadOnly: boolean;\r\n}\r\n\r\nconst NotificationCenter = () => {\r\n  const { user } = useAuth();\r\n  const { canSendNotifications } = usePermissions();\r\n  \r\n  const [notifications, setNotifications] = useState<Notification[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [filters, setFilters] = useState<NotificationFilters>({\r\n    search: '',\r\n    type: 'all',\r\n    channel: 'all',\r\n    unreadOnly: false\r\n  });\r\n  const [pagination, setPagination] = useState({\r\n    page: 1,\r\n    limit: 20,\r\n    total: 0,\r\n    totalPages: 0\r\n  });\r\n  const [selectedNotifications, setSelectedNotifications] = useState<string[]>([]);\r\n\r\n  useEffect(() => {\r\n    loadNotifications();\r\n  }, [filters, pagination.page]);\r\n\r\n  const loadNotifications = async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      const params: any = {\r\n        page: pagination.page,\r\n        limit: pagination.limit,\r\n        unreadOnly: filters.unreadOnly\r\n      };\r\n\r\n      if (filters.type !== 'all') params.type = filters.type;\r\n      if (filters.channel !== 'all') params.channel = filters.channel;\r\n\r\n      const response = await notificationService.getMyNotifications(params);\r\n      \r\n      if (response.success && response.data) {\r\n        setNotifications(response.data.data);\r\n        setPagination(prev => ({\r\n          ...prev,\r\n          total: response.data.pagination.total,\r\n          totalPages: response.data.pagination.totalPages\r\n        }));\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error loading notifications:', error);\r\n      toast.error('Erreur lors du chargement des notifications');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleFilterChange = (key: keyof NotificationFilters, value: any) => {\r\n    setFilters(prev => ({ ...prev, [key]: value }));\r\n    setPagination(prev => ({ ...prev, page: 1 }));\r\n  };\r\n\r\n  const getTypeIcon = (type: NotificationType) => {\r\n    const typeIcons = {\r\n      event_reminder: Calendar,\r\n      event_update: Calendar,\r\n      event_cancelled: XCircle,\r\n      attendance_reminder: CheckCircle,\r\n      attendance_marked: CheckCircle,\r\n      user_invitation: Users,\r\n      system_alert: AlertCircle,\r\n      general: Info\r\n    };\r\n    \r\n    const IconComponent = typeIcons[type] || Info;\r\n    return <IconComponent className=\"w-4 h-4\" />;\r\n  };\r\n\r\n  const getChannelBadge = (channel: NotificationChannel) => {\r\n    const channelConfig = {\r\n      email: { variant: 'default' as const, label: 'Email', icon: Mail },\r\n      sms: { variant: 'secondary' as const, label: 'SMS', icon: MessageSquare },\r\n      push: { variant: 'outline' as const, label: 'Push', icon: Smartphone },\r\n      in_app: { variant: 'outline' as const, label: 'App', icon: Bell }\r\n    };\r\n\r\n    const config = channelConfig[channel] || { variant: 'outline' as const, label: channel, icon: Bell };\r\n    const IconComponent = config.icon;\r\n    \r\n    return (\r\n      <Badge variant={config.variant} className=\"flex items-center gap-1\">\r\n        <IconComponent className=\"w-3 h-3\" />\r\n        {config.label}\r\n      </Badge>\r\n    );\r\n  };\r\n\r\n  const getTypeLabel = (type: NotificationType) => {\r\n    const typeLabels = {\r\n      event_reminder: 'Rappel d\\'événement',\r\n      event_update: 'Mise à jour d\\'événement',\r\n      event_cancelled: 'Événement annulé',\r\n      attendance_reminder: 'Rappel de présence',\r\n      attendance_marked: 'Présence marquée',\r\n      user_invitation: 'Invitation utilisateur',\r\n      system_alert: 'Alerte système',\r\n      general: 'Général'\r\n    };\r\n    return typeLabels[type] || type;\r\n  };\r\n\r\n  const handleMarkAsRead = async (notificationId: string) => {\r\n    try {\r\n      await notificationService.markAsRead(notificationId);\r\n      setNotifications(prev => \r\n        prev.map(n => n.id === notificationId ? { ...n, readAt: new Date().toISOString() } : n)\r\n      );\r\n      toast.success('Notification marquée comme lue');\r\n    } catch (error: any) {\r\n      toast.error('Erreur lors de la mise à jour');\r\n    }\r\n  };\r\n\r\n  const handleMarkAllAsRead = async () => {\r\n    try {\r\n      await notificationService.markAllAsRead();\r\n      setNotifications(prev => \r\n        prev.map(n => ({ ...n, readAt: n.readAt || new Date().toISOString() }))\r\n      );\r\n      toast.success('Toutes les notifications marquées comme lues');\r\n    } catch (error: any) {\r\n      toast.error('Erreur lors de la mise à jour');\r\n    }\r\n  };\r\n\r\n  const handleDeleteNotification = async (notificationId: string) => {\r\n    try {\r\n      await notificationService.deleteNotification(notificationId);\r\n      setNotifications(prev => prev.filter(n => n.id !== notificationId));\r\n      toast.success('Notification supprimée');\r\n    } catch (error: any) {\r\n      toast.error('Erreur lors de la suppression');\r\n    }\r\n  };\r\n\r\n  const handleBulkAction = async (action: 'read' | 'delete') => {\r\n    if (selectedNotifications.length === 0) {\r\n      toast.warning('Aucune notification sélectionnée');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      if (action === 'read') {\r\n        await Promise.all(selectedNotifications.map(id => notificationService.markAsRead(id)));\r\n        setNotifications(prev => \r\n          prev.map(n => selectedNotifications.includes(n.id) \r\n            ? { ...n, readAt: new Date().toISOString() } \r\n            : n\r\n          )\r\n        );\r\n        toast.success('Notifications marquées comme lues');\r\n      } else {\r\n        await Promise.all(selectedNotifications.map(id => notificationService.deleteNotification(id)));\r\n        setNotifications(prev => prev.filter(n => !selectedNotifications.includes(n.id)));\r\n        toast.success('Notifications supprimées');\r\n      }\r\n      setSelectedNotifications([]);\r\n    } catch (error: any) {\r\n      toast.error('Erreur lors de l\\'action groupée');\r\n    }\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    const date = new Date(dateString);\r\n    const now = new Date();\r\n    const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);\r\n\r\n    if (diffInHours < 1) {\r\n      return 'Il y a quelques minutes';\r\n    } else if (diffInHours < 24) {\r\n      return `Il y a ${Math.floor(diffInHours)} heure(s)`;\r\n    } else if (diffInHours < 48) {\r\n      return 'Hier';\r\n    } else {\r\n      return date.toLocaleDateString('fr-FR', {\r\n        day: 'numeric',\r\n        month: 'short',\r\n        year: 'numeric'\r\n      });\r\n    }\r\n  };\r\n\r\n  const unreadCount = notifications.filter(n => !n.readAt).length;\r\n\r\n  if (loading && notifications.length === 0) {\r\n    return (\r\n      <div className=\"container-fluid py-6\">\r\n        <div className=\"animate-pulse space-y-6\">\r\n          <div className=\"h-8 bg-muted rounded w-1/3\"></div>\r\n          <div className=\"grid gap-4\">\r\n            {[...Array(5)].map((_, i) => (\r\n              <div key={i} className=\"h-24 bg-muted rounded\"></div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"container-fluid py-6 space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold text-foreground flex items-center\">\r\n            <Bell className=\"w-8 h-8 mr-3\" />\r\n            Notifications\r\n            {unreadCount > 0 && (\r\n              <Badge variant=\"destructive\" className=\"ml-3\">\r\n                {unreadCount} non lue{unreadCount > 1 ? 's' : ''}\r\n              </Badge>\r\n            )}\r\n          </h1>\r\n          <p className=\"text-muted-foreground mt-1\">\r\n            Gérez vos notifications et préférences\r\n          </p>\r\n        </div>\r\n        <div className=\"flex items-center space-x-3\">\r\n          {unreadCount > 0 && (\r\n            <Button variant=\"outline\" onClick={handleMarkAllAsRead}>\r\n              <CheckCheck className=\"w-4 h-4 mr-2\" />\r\n              Tout marquer comme lu\r\n            </Button>\r\n          )}\r\n          <Button variant=\"outline\">\r\n            <Settings className=\"w-4 h-4 mr-2\" />\r\n            Préférences\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      <Tabs defaultValue=\"all\" className=\"space-y-6\">\r\n        <TabsList>\r\n          <TabsTrigger value=\"all\">\r\n            Toutes ({notifications.length})\r\n          </TabsTrigger>\r\n          <TabsTrigger value=\"unread\">\r\n            Non lues ({unreadCount})\r\n          </TabsTrigger>\r\n          <TabsTrigger value=\"events\">\r\n            Événements\r\n          </TabsTrigger>\r\n          <TabsTrigger value=\"attendance\">\r\n            Présences\r\n          </TabsTrigger>\r\n        </TabsList>\r\n\r\n        <TabsContent value=\"all\" className=\"space-y-6\">\r\n          {/* Filters */}\r\n          <Card>\r\n            <CardContent className=\"p-6\">\r\n              <div className=\"flex flex-col sm:flex-row gap-4\">\r\n                <div className=\"flex-1\">\r\n                  <div className=\"relative\">\r\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\r\n                    <Input\r\n                      placeholder=\"Rechercher dans les notifications...\"\r\n                      value={filters.search}\r\n                      onChange={(e) => handleFilterChange('search', e.target.value)}\r\n                      className=\"pl-10\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <Select value={filters.type} onValueChange={(value) => handleFilterChange('type', value)}>\r\n                  <SelectTrigger className=\"w-[200px]\">\r\n                    <SelectValue placeholder=\"Type\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"all\">Tous les types</SelectItem>\r\n                    <SelectItem value=\"event_reminder\">Rappel d'événement</SelectItem>\r\n                    <SelectItem value=\"event_update\">Mise à jour d'événement</SelectItem>\r\n                    <SelectItem value=\"attendance_reminder\">Rappel de présence</SelectItem>\r\n                    <SelectItem value=\"user_invitation\">Invitation</SelectItem>\r\n                    <SelectItem value=\"system_alert\">Alerte système</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n                <Select value={filters.channel} onValueChange={(value) => handleFilterChange('channel', value)}>\r\n                  <SelectTrigger className=\"w-[150px]\">\r\n                    <SelectValue placeholder=\"Canal\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"all\">Tous les canaux</SelectItem>\r\n                    <SelectItem value=\"email\">Email</SelectItem>\r\n                    <SelectItem value=\"sms\">SMS</SelectItem>\r\n                    <SelectItem value=\"push\">Push</SelectItem>\r\n                    <SelectItem value=\"in_app\">App</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {/* Bulk Actions */}\r\n          {selectedNotifications.length > 0 && (\r\n            <Card>\r\n              <CardContent className=\"p-4\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span className=\"text-sm text-muted-foreground\">\r\n                    {selectedNotifications.length} notification(s) sélectionnée(s)\r\n                  </span>\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <Button variant=\"outline\" size=\"sm\" onClick={() => handleBulkAction('read')}>\r\n                      <Check className=\"w-4 h-4 mr-2\" />\r\n                      Marquer comme lues\r\n                    </Button>\r\n                    <Button variant=\"outline\" size=\"sm\" onClick={() => handleBulkAction('delete')}>\r\n                      <Trash2 className=\"w-4 h-4 mr-2\" />\r\n                      Supprimer\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          )}\r\n\r\n          {/* Notifications List */}\r\n          <div className=\"space-y-4\">\r\n            {notifications.length > 0 ? (\r\n              notifications.map((notification) => (\r\n                <Card \r\n                  key={notification.id} \r\n                  className={`card-interactive ${!notification.readAt ? 'border-l-4 border-l-primary' : ''}`}\r\n                >\r\n                  <CardContent className=\"p-6\">\r\n                    <div className=\"flex items-start space-x-4\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        checked={selectedNotifications.includes(notification.id)}\r\n                        onChange={(e) => {\r\n                          if (e.target.checked) {\r\n                            setSelectedNotifications(prev => [...prev, notification.id]);\r\n                          } else {\r\n                            setSelectedNotifications(prev => prev.filter(id => id !== notification.id));\r\n                          }\r\n                        }}\r\n                        className=\"mt-1\"\r\n                      />\r\n                      \r\n                      <div className=\"flex-shrink-0 mt-1\">\r\n                        {getTypeIcon(notification.type)}\r\n                      </div>\r\n                      \r\n                      <div className=\"flex-1 min-w-0\">\r\n                        <div className=\"flex items-center justify-between mb-2\">\r\n                          <div className=\"flex items-center space-x-2\">\r\n                            <h3 className={`font-medium ${!notification.readAt ? 'font-semibold' : ''}`}>\r\n                              {notification.title}\r\n                            </h3>\r\n                            {!notification.readAt && (\r\n                              <Badge variant=\"destructive\" className=\"text-xs\">\r\n                                Nouveau\r\n                              </Badge>\r\n                            )}\r\n                          </div>\r\n                          <div className=\"flex items-center space-x-2\">\r\n                            {getChannelBadge(notification.channel)}\r\n                            <span className=\"text-xs text-muted-foreground\">\r\n                              {formatDate(notification.createdAt)}\r\n                            </span>\r\n                          </div>\r\n                        </div>\r\n                        \r\n                        <p className=\"text-muted-foreground text-sm mb-3\">\r\n                          {notification.message}\r\n                        </p>\r\n                        \r\n                        <div className=\"flex items-center justify-between\">\r\n                          <Badge variant=\"outline\" className=\"text-xs\">\r\n                            {getTypeLabel(notification.type)}\r\n                          </Badge>\r\n                          \r\n                          <div className=\"flex items-center space-x-2\">\r\n                            {!notification.readAt && (\r\n                              <Button \r\n                                variant=\"outline\" \r\n                                size=\"sm\"\r\n                                onClick={() => handleMarkAsRead(notification.id)}\r\n                              >\r\n                                <Check className=\"w-4 h-4 mr-2\" />\r\n                                Marquer comme lu\r\n                              </Button>\r\n                            )}\r\n                            <Button \r\n                              variant=\"outline\" \r\n                              size=\"sm\"\r\n                              onClick={() => handleDeleteNotification(notification.id)}\r\n                            >\r\n                              <Trash2 className=\"w-4 h-4\" />\r\n                            </Button>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n              ))\r\n            ) : (\r\n              <Card>\r\n                <CardContent className=\"p-12 text-center\">\r\n                  <Bell className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\r\n                  <h3 className=\"text-lg font-medium text-foreground mb-2\">\r\n                    Aucune notification\r\n                  </h3>\r\n                  <p className=\"text-muted-foreground\">\r\n                    Vous n'avez pas encore reçu de notifications.\r\n                  </p>\r\n                </CardContent>\r\n              </Card>\r\n            )}\r\n          </div>\r\n\r\n          {/* Pagination */}\r\n          {pagination.totalPages > 1 && (\r\n            <div className=\"flex items-center justify-between\">\r\n              <p className=\"text-sm text-muted-foreground\">\r\n                Affichage de {((pagination.page - 1) * pagination.limit) + 1} à{' '}\r\n                {Math.min(pagination.page * pagination.limit, pagination.total)} sur {pagination.total} notifications\r\n              </p>\r\n              <div className=\"flex items-center space-x-2\">\r\n                <Button\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  onClick={() => setPagination(prev => ({ ...prev, page: prev.page - 1 }))}\r\n                  disabled={pagination.page === 1}\r\n                >\r\n                  Précédent\r\n                </Button>\r\n                <Button\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  onClick={() => setPagination(prev => ({ ...prev, page: prev.page + 1 }))}\r\n                  disabled={pagination.page === pagination.totalPages}\r\n                >\r\n                  Suivant\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </TabsContent>\r\n\r\n        {/* Other tabs content would be similar with filtered data */}\r\n        <TabsContent value=\"unread\">\r\n          <div className=\"text-center py-12\">\r\n            <p className=\"text-muted-foreground\">\r\n              Filtrage par notifications non lues...\r\n            </p>\r\n          </div>\r\n        </TabsContent>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotificationCenter;"],"names":["__iconNode","CheckCheck","createLucideIcon","MessageSquare","Trash2","NotificationCenter","user","useAuth","usePermissions","notifications","setNotifications","useState","loading","setLoading","filters","setFilters","pagination","setPagination","selectedNotifications","setSelectedNotifications","useEffect","loadNotifications","params","response","notificationService","prev","error","toast","handleFilterChange","key","value","getTypeIcon","type","IconComponent","Calendar","XCircle","CheckCircle","Users","AlertCircle","Info","jsx","getChannelBadge","channel","config","Mail","Smartphone","Bell","Badge","getTypeLabel","handleMarkAsRead","notificationId","n","handleMarkAllAsRead","handleDeleteNotification","handleBulkAction","action","id","formatDate","dateString","date","diffInHours","unreadCount","jsxs","_","i","Button","Settings","Tabs","TabsList","TabsTrigger","TabsContent","Card","CardContent","Search","Input","e","Select","SelectTrigger","SelectValue","SelectContent","SelectItem","Check","notification"],"mappings":"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","x_google_ignoreList":[0,1,2]}