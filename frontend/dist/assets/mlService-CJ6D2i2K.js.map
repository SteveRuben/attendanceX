{"version":3,"file":"mlService-CJ6D2i2K.js","sources":["../../../node_modules/lucide-react/dist/esm/icons/target.js","../../../node_modules/lucide-react/dist/esm/icons/trending-down.js","../../src/services/mlService.ts"],"sourcesContent":["/**\n * @license lucide-react v0.525.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\"circle\", { cx: \"12\", cy: \"12\", r: \"10\", key: \"1mglay\" }],\n  [\"circle\", { cx: \"12\", cy: \"12\", r: \"6\", key: \"1vlfrh\" }],\n  [\"circle\", { cx: \"12\", cy: \"12\", r: \"2\", key: \"1c9p78\" }]\n];\nconst Target = createLucideIcon(\"target\", __iconNode);\n\nexport { __iconNode, Target as default };\n//# sourceMappingURL=target.js.map\n","/**\n * @license lucide-react v0.525.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\"path\", { d: \"M16 17h6v-6\", key: \"t6n2it\" }],\n  [\"path\", { d: \"m22 17-8.5-8.5-5 5L2 7\", key: \"x473p\" }]\n];\nconst TrendingDown = createLucideIcon(\"trending-down\", __iconNode);\n\nexport { __iconNode, TrendingDown as default };\n//# sourceMappingURL=trending-down.js.map\n","// src/services/mlService.ts - Service ML/IA pour le frontend\r\nimport { apiService, type ApiResponse } from './apiService';\r\n\r\n// Types pour les pr√©dictions\r\nexport interface AttendancePrediction {\r\n  userId: string;\r\n  userName: string;\r\n  eventId: string;\r\n  prediction: {\r\n    willAttend: boolean;\r\n    probability: number;\r\n    confidence: 'low' | 'medium' | 'high';\r\n    expectedStatus: 'present' | 'late' | 'absent' | 'excused';\r\n    riskLevel: 'low' | 'medium' | 'high';\r\n    expectedArrivalTime?: string;\r\n  };\r\n  influencingFactors: Array<{\r\n    name: string;\r\n    impact: number;\r\n    direction: 'positive' | 'negative';\r\n  }>;\r\n  recommendations: string[];\r\n  generatedAt: string;\r\n  modelVersion: string;\r\n}\r\n\r\n// Types pour les recommandations\r\nexport interface MLRecommendation {\r\n  type: string;\r\n  title: string;\r\n  description: string;\r\n  confidence: number;\r\n  priority: 'low' | 'medium' | 'high';\r\n  actionable: boolean;\r\n  action?: {\r\n    type: string;\r\n    description: string;\r\n    target?: string;\r\n  };\r\n}\r\n\r\n// Types pour les anomalies\r\nexport interface MLAnomaly {\r\n  id: string;\r\n  type: string;\r\n  severity: 'low' | 'medium' | 'high';\r\n  description: string;\r\n  affectedEntities: string[];\r\n  detectedAt: string;\r\n  confidence: number;\r\n  recommendations?: string[];\r\n}\r\n\r\n// Types pour les insights\r\nexport interface MLInsight {\r\n  type: string;\r\n  title: string;\r\n  description: string;\r\n  confidence: number;\r\n  category: string;\r\n  actionable: boolean;\r\n  action?: {\r\n    type: string;\r\n    description: string;\r\n    target?: string;\r\n  };\r\n  data?: Record<string, any>;\r\n}\r\n\r\n// Types pour les mod√®les\r\nexport interface MLModel {\r\n  id: string;\r\n  type: string;\r\n  description: string;\r\n  status: 'active' | 'training' | 'failed' | 'archived';\r\n  performance?: {\r\n    accuracy: number;\r\n    f1Score: number;\r\n  };\r\n  trainedAt: string;\r\n  trainedBy: string;\r\n  lastUsed?: string;\r\n}\r\n\r\n// Types pour les facteurs d'influence\r\nexport interface InfluencingFactor {\r\n  name: string;\r\n  impact: number;\r\n  direction: 'positive' | 'negative';\r\n}\r\n\r\n// Types pour les tendances\r\nexport interface MLTrend {\r\n  metric: string;\r\n  direction: 'up' | 'down' | 'stable';\r\n  change: number;\r\n  significance: 'low' | 'medium' | 'high';\r\n}\r\n\r\n// Types pour les analytics ML\r\nexport interface MLAnalytics {\r\n  insights: MLInsight[];\r\n  trends: MLTrend[];\r\n  recommendations: string[];\r\n}\r\n\r\nclass MLService {\r\n  // üîÆ PR√âDICTIONS DE PR√âSENCE\r\n  async predictAttendance(data: {\r\n    userId: string;\r\n    eventId: string;\r\n    includeFactors?: boolean;\r\n  }): Promise<ApiResponse<AttendancePrediction>> {\r\n    return apiService.post<AttendancePrediction>('/ml/predict-attendance', data);\r\n  }\r\n\r\n  // Pr√©dictions en masse\r\n  async batchPredictAttendance(data: {\r\n    eventId: string;\r\n    userIds: string[];\r\n    includeFactors?: boolean;\r\n    includeRecommendations?: boolean;\r\n  }): Promise<ApiResponse<AttendancePrediction[]>> {\r\n    return apiService.post<AttendancePrediction[]>('/ml/batch-predict', data);\r\n  }\r\n\r\n  // üí° RECOMMANDATIONS INTELLIGENTES\r\n  async getRecommendations(data: {\r\n    type: 'attendance' | 'event' | 'user' | 'department';\r\n    targetId: string;\r\n    context?: Record<string, any>;\r\n  }): Promise<ApiResponse<{\r\n    recommendations: string[];\r\n    confidence: number;\r\n    basedOn: string[];\r\n  }>> {\r\n    return apiService.post('/ml/recommendations', data);\r\n  }\r\n\r\n  // üö® D√âTECTION D'ANOMALIES\r\n  async detectAnomalies(data: {\r\n    type: 'attendance' | 'behavior' | 'event';\r\n    timeframe: {\r\n      start: string;\r\n      end: string;\r\n    };\r\n    threshold?: number;\r\n    includeRecommendations?: boolean;\r\n  }): Promise<ApiResponse<{\r\n    anomalies: MLAnomaly[];\r\n    summary: {\r\n      totalAnomalies: number;\r\n      severityBreakdown: Record<string, number>;\r\n      mostCommonType: string;\r\n    };\r\n  }>> {\r\n    return apiService.post('/ml/anomalies', data);\r\n  }\r\n\r\n  // üìä G√âN√âRATION D'INSIGHTS\r\n  async generateInsights(data: {\r\n    type: 'user' | 'event' | 'department' | 'global';\r\n    targetId?: string;\r\n    timeframe: {\r\n      start: string;\r\n      end: string;\r\n    };\r\n    includeRecommendations?: boolean;\r\n  }): Promise<ApiResponse<MLAnalytics>> {\r\n    return apiService.post<MLAnalytics>('/ml/insights', data);\r\n  }\r\n\r\n  // üîç ANALYSE DES FACTEURS D'INFLUENCE\r\n  async analyzeFactors(data: {\r\n    userId?: string;\r\n    eventId?: string;\r\n    timeframe?: {\r\n      start: string;\r\n      end: string;\r\n    };\r\n  }): Promise<ApiResponse<InfluencingFactor[]>> {\r\n    return apiService.post<InfluencingFactor[]>('/ml/analyze-factors', data);\r\n  }\r\n\r\n  // ü§ñ GESTION DES MOD√àLES ML\r\n  async listModels(filters: {\r\n    type?: string;\r\n    status?: 'active' | 'training' | 'failed' | 'archived';\r\n    page?: number;\r\n    limit?: number;\r\n  } = {}): Promise<ApiResponse<{\r\n    data: MLModel[];\r\n    pagination: {\r\n      page: number;\r\n      limit: number;\r\n      total: number;\r\n      totalPages: number;\r\n    };\r\n  }>> {\r\n    return apiService.get('/ml/models', filters);\r\n  }\r\n\r\n  async getModelDetails(id: string): Promise<ApiResponse<MLModel & {\r\n    featureImportance?: Array<{\r\n      featureName: string;\r\n      importance: number;\r\n      rank: number;\r\n    }>;\r\n    config: Record<string, any>;\r\n    usageCount?: number;\r\n  }>> {\r\n    return apiService.get(`/ml/models/${id}`);\r\n  }\r\n\r\n  async trainModel(data: {\r\n    type: 'attendance_prediction' | 'behavior_analysis' | 'anomaly_detection';\r\n    config?: {\r\n      epochs?: number;\r\n      batchSize?: number;\r\n      learningRate?: number;\r\n      validationSplit?: number;\r\n    };\r\n    description?: string;\r\n  }): Promise<ApiResponse<{\r\n    modelId: string;\r\n    status: string;\r\n    estimatedCompletionTime?: string;\r\n  }>> {\r\n    return apiService.post('/ml/models/train', data);\r\n  }\r\n\r\n  // üìà ANALYTICS ML\r\n  async getMLAnalytics(filters: {\r\n    timeframe?: {\r\n      start: string;\r\n      end: string;\r\n    };\r\n    type?: 'predictions' | 'accuracy' | 'usage' | 'performance';\r\n  } = {}): Promise<ApiResponse<{\r\n    totalPredictions: number;\r\n    accuracyRate: number;\r\n    modelUsage: Record<string, number>;\r\n    trends: MLTrend[];\r\n    insights: MLInsight[];\r\n  }>> {\r\n    return apiService.get('/ml/analytics', filters);\r\n  }\r\n\r\n  // üß™ TEST ET VALIDATION\r\n  async testPrediction(data: {\r\n    modelId: string;\r\n    testData: {\r\n      userId: string;\r\n      eventId: string;\r\n    };\r\n  }): Promise<ApiResponse<AttendancePrediction>> {\r\n    return apiService.post('/ml/test-prediction', data);\r\n  }\r\n\r\n  // üè• SANT√â DU SERVICE ML\r\n  async healthCheck(): Promise<ApiResponse<{\r\n    status: string;\r\n    models: {\r\n      total: number;\r\n      active: number;\r\n    };\r\n    lastTraining?: string;\r\n    version: string;\r\n  }>> {\r\n    return apiService.get('/ml/health');\r\n  }\r\n\r\n  // üéØ M√âTHODES UTILITAIRES\r\n\r\n  // Formater la probabilit√© en pourcentage\r\n  formatProbability(probability: number): string {\r\n    return `${Math.round(probability * 100)}%`;\r\n  }\r\n\r\n  // Obtenir la couleur selon le niveau de risque\r\n  getRiskColor(riskLevel: 'low' | 'medium' | 'high'): string {\r\n    const colors = {\r\n      low: 'text-green-600',\r\n      medium: 'text-yellow-600',\r\n      high: 'text-red-600'\r\n    };\r\n    return colors[riskLevel];\r\n  }\r\n\r\n  // Obtenir l'ic√¥ne selon le niveau de confiance\r\n  getConfidenceIcon(confidence: 'low' | 'medium' | 'high'): string {\r\n    const icons = {\r\n      low: '‚ö†Ô∏è',\r\n      medium: '‚úÖ',\r\n      high: 'üéØ'\r\n    };\r\n    return icons[confidence];\r\n  }\r\n\r\n  // Formater les facteurs d'influence\r\n  formatInfluencingFactors(factors: InfluencingFactor[]): string {\r\n    const positive = factors.filter(f => f.direction === 'positive');\r\n    const negative = factors.filter(f => f.direction === 'negative');\r\n\r\n    let result = '';\r\n    if (positive.length > 0) {\r\n      result += `Facteurs positifs: ${positive.map(f => f.name).join(', ')}. `;\r\n    }\r\n    if (negative.length > 0) {\r\n      result += `Facteurs n√©gatifs: ${negative.map(f => f.name).join(', ')}.`;\r\n    }\r\n\r\n    return result.trim();\r\n  }\r\n\r\n  // Obtenir le statut de pr√©diction en fran√ßais\r\n  getStatusLabel(status: string): string {\r\n    const labels = {\r\n      present: 'Pr√©sent',\r\n      late: 'En retard',\r\n      absent: 'Absent',\r\n      excused: 'Excus√©'\r\n    };\r\n    return labels[status as keyof typeof labels] || status;\r\n  }\r\n\r\n  // Calculer le score de fiabilit√© global\r\n  calculateReliabilityScore(predictions: AttendancePrediction[]): number {\r\n    if (predictions.length === 0) return 0;\r\n\r\n    const totalConfidence = predictions.reduce((sum, pred) => {\r\n      const confidenceScore = pred.prediction.confidence === 'high' ? 1 :\r\n        pred.prediction.confidence === 'medium' ? 0.7 : 0.4;\r\n      return sum + confidenceScore;\r\n    }, 0);\r\n\r\n    return Math.round((totalConfidence / predictions.length) * 100);\r\n  }\r\n\r\n  // Grouper les anomalies par s√©v√©rit√©\r\n  groupAnomaliesBySeverity(anomalies: MLAnomaly[]): Record<string, MLAnomaly[]> {\r\n    return anomalies.reduce((groups, anomaly) => {\r\n      const severity = anomaly.severity;\r\n      if (!groups[severity]) {\r\n        groups[severity] = [];\r\n      }\r\n      groups[severity].push(anomaly);\r\n      return groups;\r\n    }, {} as Record<string, MLAnomaly[]>);\r\n  }\r\n\r\n  // Obtenir les recommandations prioritaires\r\n  getPriorityRecommendations(recommendations: MLRecommendation[]): MLRecommendation[] {\r\n    return recommendations\r\n      .filter(rec => rec.actionable && rec.priority === 'high')\r\n      .sort((a, b) => b.confidence - a.confidence)\r\n      .slice(0, 3);\r\n  }\r\n}\r\n\r\nexport const mlService = new MLService();\r\nexport default mlService;"],"names":["__iconNode","Target","createLucideIcon","TrendingDown","MLService","data","apiService","filters","id","probability","riskLevel","confidence","factors","positive","f","negative","result","status","predictions","totalConfidence","sum","pred","confidenceScore","anomalies","groups","anomaly","severity","recommendations","rec","a","b","mlService"],"mappings":"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","x_google_ignoreList":[0,1]}