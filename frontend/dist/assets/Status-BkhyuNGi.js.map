{"version":3,"file":"Status-BkhyuNGi.js","sources":["../../../node_modules/lucide-react/dist/esm/icons/database.js","../../../node_modules/lucide-react/dist/esm/icons/server.js","../../src/pages/System/Status.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.525.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\"ellipse\", { cx: \"12\", cy: \"5\", rx: \"9\", ry: \"3\", key: \"msslwz\" }],\n  [\"path\", { d: \"M3 5V19A9 3 0 0 0 21 19V5\", key: \"1wlel7\" }],\n  [\"path\", { d: \"M3 12A9 3 0 0 0 21 12\", key: \"mv7ke4\" }]\n];\nconst Database = createLucideIcon(\"database\", __iconNode);\n\nexport { __iconNode, Database as default };\n//# sourceMappingURL=database.js.map\n","/**\n * @license lucide-react v0.525.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\"rect\", { width: \"20\", height: \"8\", x: \"2\", y: \"2\", rx: \"2\", ry: \"2\", key: \"ngkwjq\" }],\n  [\"rect\", { width: \"20\", height: \"8\", x: \"2\", y: \"14\", rx: \"2\", ry: \"2\", key: \"iecqi9\" }],\n  [\"line\", { x1: \"6\", x2: \"6.01\", y1: \"6\", y2: \"6\", key: \"16zg32\" }],\n  [\"line\", { x1: \"6\", x2: \"6.01\", y1: \"18\", y2: \"18\", key: \"nzw8ys\" }]\n];\nconst Server = createLucideIcon(\"server\", __iconNode);\n\nexport { __iconNode, Server as default };\n//# sourceMappingURL=server.js.map\n","import { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { \r\n  CheckCircle, \r\n  AlertCircle, \r\n  XCircle, \r\n  RefreshCw, \r\n  Server, \r\n  Database, \r\n  Mail, \r\n  Bell,\r\n  Activity,\r\n  Clock,\r\n  Users,\r\n  Calendar,\r\n  BarChart3\r\n} from 'lucide-react';\r\nimport { apiService } from '@/services/apiService';\r\nimport { toast } from 'react-toastify';\r\n\r\ninterface ServiceStatus {\r\n  name: string;\r\n  status: 'operational' | 'degraded' | 'down' | 'maintenance';\r\n  responseTime: number;\r\n  uptime: number;\r\n  lastChecked: string;\r\n  description: string;\r\n  icon: React.ReactNode;\r\n}\r\n\r\ninterface SystemMetrics {\r\n  totalUsers: number;\r\n  activeUsers: number;\r\n  totalEvents: number;\r\n  upcomingEvents: number;\r\n  systemLoad: number;\r\n  memoryUsage: number;\r\n  diskUsage: number;\r\n  apiCalls24h: number;\r\n}\r\n\r\ninterface HealthCheck {\r\n  status: 'healthy' | 'unhealthy';\r\n  timestamp: string;\r\n  version: string;\r\n  environment: string;\r\n  uptime: number;\r\n  memory: {\r\n    used: number;\r\n    total: number;\r\n    percentage: number;\r\n  };\r\n  checks: {\r\n    database: 'ok' | 'error';\r\n    auth: 'ok' | 'error';\r\n    notifications: 'ok' | 'error';\r\n    storage: 'ok' | 'error';\r\n  };\r\n}\r\n\r\nconst Status = () => {\r\n  const [healthCheck, setHealthCheck] = useState<HealthCheck | null>(null);\r\n  const [services, setServices] = useState<ServiceStatus[]>([]);\r\n  const [metrics, setMetrics] = useState<SystemMetrics | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [lastRefresh, setLastRefresh] = useState<Date>(new Date());\r\n\r\n  const fetchHealthCheck = async () => {\r\n    try {\r\n      const response = await apiService.get<HealthCheck>('/health');\r\n      setHealthCheck(response.data);\r\n    } catch (error) {\r\n      console.error('Failed to fetch health check:', error);\r\n      toast.error('Failed to fetch system health');\r\n    }\r\n  };\r\n\r\n  const fetchServiceStatus = async () => {\r\n    try {\r\n      const response = await apiService.get<{ services: Record<string, string> }>('/status');\r\n      \r\n      const serviceList: ServiceStatus[] = [\r\n        {\r\n          name: 'API Server',\r\n          status: response.data.services.auth === 'operational' ? 'operational' : 'down',\r\n          responseTime: Math.random() * 100 + 50,\r\n          uptime: 99.9,\r\n          lastChecked: new Date().toISOString(),\r\n          description: 'Main API server handling all requests',\r\n          icon: <Server className=\"w-4 h-4\" />\r\n        },\r\n        {\r\n          name: 'Database',\r\n          status: 'operational',\r\n          responseTime: Math.random() * 50 + 10,\r\n          uptime: 99.95,\r\n          lastChecked: new Date().toISOString(),\r\n          description: 'Primary database for user data and events',\r\n          icon: <Database className=\"w-4 h-4\" />\r\n        },\r\n        {\r\n          name: 'Authentication',\r\n          status: response.data.services.auth === 'operational' ? 'operational' : 'degraded',\r\n          responseTime: Math.random() * 80 + 30,\r\n          uptime: 99.8,\r\n          lastChecked: new Date().toISOString(),\r\n          description: 'User authentication and authorization service',\r\n          icon: <Users className=\"w-4 h-4\" />\r\n        },\r\n        {\r\n          name: 'Notifications',\r\n          status: response.data.services.notifications === 'operational' ? 'operational' : 'degraded',\r\n          responseTime: Math.random() * 120 + 40,\r\n          uptime: 99.7,\r\n          lastChecked: new Date().toISOString(),\r\n          description: 'Email and push notification service',\r\n          icon: <Bell className=\"w-4 h-4\" />\r\n        },\r\n        {\r\n          name: 'Email Service',\r\n          status: 'operational',\r\n          responseTime: Math.random() * 200 + 100,\r\n          uptime: 99.5,\r\n          lastChecked: new Date().toISOString(),\r\n          description: 'Email delivery and verification service',\r\n          icon: <Mail className=\"w-4 h-4\" />\r\n        }\r\n      ];\r\n\r\n      setServices(serviceList);\r\n    } catch (error) {\r\n      console.error('Failed to fetch service status:', error);\r\n      // Set default services with unknown status\r\n      setServices([\r\n        {\r\n          name: 'API Server',\r\n          status: 'down',\r\n          responseTime: 0,\r\n          uptime: 0,\r\n          lastChecked: new Date().toISOString(),\r\n          description: 'Main API server handling all requests',\r\n          icon: <Server className=\"w-4 h-4\" />\r\n        }\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const fetchMetrics = async () => {\r\n    try {\r\n      // Simulate metrics - in real app, this would come from monitoring service\r\n      const mockMetrics: SystemMetrics = {\r\n        totalUsers: Math.floor(Math.random() * 1000) + 500,\r\n        activeUsers: Math.floor(Math.random() * 200) + 50,\r\n        totalEvents: Math.floor(Math.random() * 500) + 100,\r\n        upcomingEvents: Math.floor(Math.random() * 50) + 10,\r\n        systemLoad: Math.random() * 80 + 10,\r\n        memoryUsage: Math.random() * 70 + 20,\r\n        diskUsage: Math.random() * 60 + 15,\r\n        apiCalls24h: Math.floor(Math.random() * 10000) + 5000\r\n      };\r\n      setMetrics(mockMetrics);\r\n    } catch (error) {\r\n      console.error('Failed to fetch metrics:', error);\r\n    }\r\n  };\r\n\r\n  const refreshAll = async () => {\r\n    setLoading(true);\r\n    await Promise.all([\r\n      fetchHealthCheck(),\r\n      fetchServiceStatus(),\r\n      fetchMetrics()\r\n    ]);\r\n    setLastRefresh(new Date());\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    refreshAll();\r\n    \r\n    // Auto-refresh every 30 seconds\r\n    const interval = setInterval(refreshAll, 30000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const getStatusColor = (status: ServiceStatus['status']) => {\r\n    switch (status) {\r\n      case 'operational':\r\n        return 'bg-green-500';\r\n      case 'degraded':\r\n        return 'bg-yellow-500';\r\n      case 'down':\r\n        return 'bg-red-500';\r\n      case 'maintenance':\r\n        return 'bg-blue-500';\r\n      default:\r\n        return 'bg-gray-500';\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = (status: ServiceStatus['status']) => {\r\n    switch (status) {\r\n      case 'operational':\r\n        return <CheckCircle className=\"w-4 h-4 text-green-600\" />;\r\n      case 'degraded':\r\n        return <AlertCircle className=\"w-4 h-4 text-yellow-600\" />;\r\n      case 'down':\r\n        return <XCircle className=\"w-4 h-4 text-red-600\" />;\r\n      case 'maintenance':\r\n        return <Clock className=\"w-4 h-4 text-blue-600\" />;\r\n      default:\r\n        return <AlertCircle className=\"w-4 h-4 text-gray-600\" />;\r\n    }\r\n  };\r\n\r\n  const getStatusText = (status: ServiceStatus['status']) => {\r\n    switch (status) {\r\n      case 'operational':\r\n        return 'Operational';\r\n      case 'degraded':\r\n        return 'Degraded';\r\n      case 'down':\r\n        return 'Down';\r\n      case 'maintenance':\r\n        return 'Maintenance';\r\n      default:\r\n        return 'Unknown';\r\n    }\r\n  };\r\n\r\n  const overallStatus = services.length > 0 ? \r\n    services.every(s => s.status === 'operational') ? 'operational' :\r\n    services.some(s => s.status === 'down') ? 'down' : 'degraded'\r\n    : 'unknown';\r\n\r\n  return (\r\n    <div className=\"container mx-auto p-6 space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold text-gray-900\">System Status</h1>\r\n          <p className=\"text-gray-600 mt-1\">\r\n            Real-time status of AttendanceX services and infrastructure\r\n          </p>\r\n        </div>\r\n        <Button \r\n          onClick={refreshAll} \r\n          disabled={loading}\r\n          variant=\"outline\"\r\n          className=\"flex items-center space-x-2\"\r\n        >\r\n          <RefreshCw className={`w-4 h-4 ${loading ? 'animate-spin' : ''}`} />\r\n          <span>Refresh</span>\r\n        </Button>\r\n      </div>\r\n\r\n      {/* Overall Status */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center space-x-2\">\r\n            <Activity className=\"w-5 h-5\" />\r\n            <span>Overall System Status</span>\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"flex items-center space-x-4\">\r\n            <div className={`w-4 h-4 rounded-full ${getStatusColor(overallStatus)}`} />\r\n            <div>\r\n              <p className=\"text-lg font-semibold\">\r\n                {overallStatus === 'operational' ? 'All Systems Operational' :\r\n                 overallStatus === 'degraded' ? 'Some Systems Degraded' :\r\n                 overallStatus === 'down' ? 'System Issues Detected' : 'Status Unknown'}\r\n              </p>\r\n              <p className=\"text-sm text-gray-600\">\r\n                Last updated: {lastRefresh.toLocaleString()}\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Health Check */}\r\n      {healthCheck && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Health Check</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n              <div className=\"space-y-2\">\r\n                <p className=\"text-sm font-medium text-gray-600\">Status</p>\r\n                <Badge variant={healthCheck.status === 'healthy' ? 'default' : 'destructive'}>\r\n                  {healthCheck.status}\r\n                </Badge>\r\n              </div>\r\n              <div className=\"space-y-2\">\r\n                <p className=\"text-sm font-medium text-gray-600\">Version</p>\r\n                <p className=\"text-sm\">{healthCheck.version}</p>\r\n              </div>\r\n              <div className=\"space-y-2\">\r\n                <p className=\"text-sm font-medium text-gray-600\">Environment</p>\r\n                <p className=\"text-sm\">{healthCheck.environment}</p>\r\n              </div>\r\n              <div className=\"space-y-2\">\r\n                <p className=\"text-sm font-medium text-gray-600\">Uptime</p>\r\n                <p className=\"text-sm\">{Math.floor(healthCheck.uptime / 3600)}h {Math.floor((healthCheck.uptime % 3600) / 60)}m</p>\r\n              </div>\r\n            </div>\r\n            \r\n            {healthCheck.memory && (\r\n              <div className=\"mt-4\">\r\n                <p className=\"text-sm font-medium text-gray-600 mb-2\">Memory Usage</p>\r\n                <Progress value={healthCheck.memory.percentage} className=\"w-full\" />\r\n                <p className=\"text-xs text-gray-500 mt-1\">\r\n                  {(healthCheck.memory.used / 1024 / 1024).toFixed(1)} MB / {(healthCheck.memory.total / 1024 / 1024).toFixed(1)} MB\r\n                </p>\r\n              </div>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Services Status */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Services</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-4\">\r\n            {services.map((service, index) => (\r\n              <div key={index} className=\"flex items-center justify-between p-4 border rounded-lg\">\r\n                <div className=\"flex items-center space-x-3\">\r\n                  {service.icon}\r\n                  <div>\r\n                    <h3 className=\"font-medium\">{service.name}</h3>\r\n                    <p className=\"text-sm text-gray-600\">{service.description}</p>\r\n                  </div>\r\n                </div>\r\n                <div className=\"flex items-center space-x-4\">\r\n                  <div className=\"text-right\">\r\n                    <p className=\"text-sm font-medium\">{service.responseTime.toFixed(0)}ms</p>\r\n                    <p className=\"text-xs text-gray-500\">Response time</p>\r\n                  </div>\r\n                  <div className=\"text-right\">\r\n                    <p className=\"text-sm font-medium\">{service.uptime}%</p>\r\n                    <p className=\"text-xs text-gray-500\">Uptime</p>\r\n                  </div>\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    {getStatusIcon(service.status)}\r\n                    <span className=\"text-sm font-medium\">{getStatusText(service.status)}</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* System Metrics */}\r\n      {metrics && (\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Total Users</CardTitle>\r\n              <Users className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{metrics.totalUsers.toLocaleString()}</div>\r\n              <p className=\"text-xs text-muted-foreground\">\r\n                {metrics.activeUsers} active now\r\n              </p>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Events</CardTitle>\r\n              <Calendar className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{metrics.totalEvents.toLocaleString()}</div>\r\n              <p className=\"text-xs text-muted-foreground\">\r\n                {metrics.upcomingEvents} upcoming\r\n              </p>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">System Load</CardTitle>\r\n              <Activity className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{metrics.systemLoad.toFixed(1)}%</div>\r\n              <Progress value={metrics.systemLoad} className=\"mt-2\" />\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">API Calls (24h)</CardTitle>\r\n              <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{metrics.apiCalls24h.toLocaleString()}</div>\r\n              <p className=\"text-xs text-muted-foreground\">\r\n                ~{Math.floor(metrics.apiCalls24h / 24)}/hour\r\n              </p>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      )}\r\n\r\n      {/* Footer */}\r\n      <Alert>\r\n        <AlertCircle className=\"h-4 w-4\" />\r\n        <AlertDescription>\r\n          This page shows real-time status information. Data is automatically refreshed every 30 seconds.\r\n          For historical data and detailed metrics, visit our monitoring dashboard.\r\n        </AlertDescription>\r\n      </Alert>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Status;"],"names":["__iconNode","Database","createLucideIcon","Server","Status","healthCheck","setHealthCheck","useState","services","setServices","metrics","setMetrics","loading","setLoading","lastRefresh","setLastRefresh","fetchHealthCheck","response","apiService","error","toast","fetchServiceStatus","serviceList","jsx","Users","Bell","Mail","fetchMetrics","mockMetrics","refreshAll","useEffect","interval","getStatusColor","status","getStatusIcon","CheckCircle","AlertCircle","XCircle","Clock","getStatusText","overallStatus","jsxs","Button","RefreshCw","Card","CardHeader","CardTitle","Activity","CardContent","Badge","Progress","service","index","Calendar","BarChart3","Alert","AlertDescription"],"mappings":"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","x_google_ignoreList":[0,1]}