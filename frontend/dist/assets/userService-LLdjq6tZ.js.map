{"version":3,"file":"userService-LLdjq6tZ.js","sources":["../../src/services/userService.ts"],"sourcesContent":["// src/services/userService.ts - Service pour la gestion des utilisateurs\r\nimport { apiService, type ApiResponse, type PaginatedResponse } from './apiService';\r\nimport { type User, type CreateUserRequest, type UpdateUserRequest, UserRole, UserStatus } from '@attendance-x/shared';\r\n\r\nexport interface UserSearchFilters {\r\n  page?: number;\r\n  limit?: number;\r\n  role?: UserRole;\r\n  status?: UserStatus;\r\n  department?: string;\r\n  search?: string;\r\n  includeInactive?: boolean;\r\n}\r\n\r\nexport interface UserStats {\r\n  total: number;\r\n  active: number;\r\n  inactive: number;\r\n  byRole: Record<UserRole, number>;\r\n  byDepartment: Record<string, number>;\r\n  recentlyJoined: number;\r\n}\r\n\r\nclass UserService {\r\n  // Get current user profile\r\n  async getMyProfile(): Promise<ApiResponse<User>> {\r\n    return apiService.get<User>('/users/me');\r\n  }\r\n\r\n  // Update current user profile\r\n  async updateProfile(data: Partial<UpdateUserRequest>): Promise<ApiResponse<User>> {\r\n    return apiService.put<User>('/users/me', data);\r\n  }\r\n\r\n  // Get all users with filters\r\n  async getUsers(filters: UserSearchFilters = {}): Promise<ApiResponse<PaginatedResponse<User>>> {\r\n    return apiService.get<PaginatedResponse<User>>('/users', filters);\r\n  }\r\n\r\n  // Get user by ID\r\n  async getUserById(id: string): Promise<ApiResponse<User>> {\r\n    return apiService.get<User>(`/users/${id}`);\r\n  }\r\n\r\n  // Create new user\r\n  async createUser(data: CreateUserRequest): Promise<ApiResponse<User>> {\r\n    return apiService.post<User>('/users', data);\r\n  }\r\n\r\n  // Update user\r\n  async updateUser(id: string, data: Partial<UpdateUserRequest>): Promise<ApiResponse<User>> {\r\n    return apiService.put<User>(`/users/${id}`, data);\r\n  }\r\n\r\n  // Change user role\r\n  async changeUserRole(id: string, role: UserRole): Promise<ApiResponse<User>> {\r\n    return apiService.post<User>(`/users/${id}/role`, { role });\r\n  }\r\n\r\n  // Change user status\r\n  async changeUserStatus(id: string, status: UserStatus, reason?: string): Promise<ApiResponse<User>> {\r\n    return apiService.post<User>(`/users/${id}/status`, { status, reason });\r\n  }\r\n\r\n  // Search users\r\n  async searchUsers(query: string, filters?: Partial<UserSearchFilters>): Promise<ApiResponse<User[]>> {\r\n    return apiService.post<User[]>('/users/search', { query, ...filters });\r\n  }\r\n\r\n  // Get user statistics\r\n  async getUserStats(): Promise<ApiResponse<UserStats>> {\r\n    return apiService.get<UserStats>('/users/stats');\r\n  }\r\n\r\n  // Accept invitation\r\n  async acceptInvitation(token: string, password: string): Promise<ApiResponse<User>> {\r\n    return apiService.post<User>('/users/invitations/accept', { token, password });\r\n  }\r\n}\r\n\r\nexport const userService = new UserService();"],"names":["UserService","apiService","data","filters","id","role","status","reason","query","token","password","userService"],"mappings":"wCAuBA,MAAMA,CAAY,CAEhB,MAAM,cAA2C,CAC/C,OAAOC,EAAW,IAAU,WAAW,CAAA,CAIzC,MAAM,cAAcC,EAA8D,CAChF,OAAOD,EAAW,IAAU,YAAaC,CAAI,CAAA,CAI/C,MAAM,SAASC,EAA6B,GAAmD,CAC7F,OAAOF,EAAW,IAA6B,SAAUE,CAAO,CAAA,CAIlE,MAAM,YAAYC,EAAwC,CACxD,OAAOH,EAAW,IAAU,UAAUG,CAAE,EAAE,CAAA,CAI5C,MAAM,WAAWF,EAAqD,CACpE,OAAOD,EAAW,KAAW,SAAUC,CAAI,CAAA,CAI7C,MAAM,WAAWE,EAAYF,EAA8D,CACzF,OAAOD,EAAW,IAAU,UAAUG,CAAE,GAAIF,CAAI,CAAA,CAIlD,MAAM,eAAeE,EAAYC,EAA4C,CAC3E,OAAOJ,EAAW,KAAW,UAAUG,CAAE,QAAS,CAAE,KAAAC,EAAM,CAAA,CAI5D,MAAM,iBAAiBD,EAAYE,EAAoBC,EAA6C,CAClG,OAAON,EAAW,KAAW,UAAUG,CAAE,UAAW,CAAE,OAAAE,EAAQ,OAAAC,EAAQ,CAAA,CAIxE,MAAM,YAAYC,EAAeL,EAAoE,CACnG,OAAOF,EAAW,KAAa,gBAAiB,CAAE,MAAAO,EAAO,GAAGL,EAAS,CAAA,CAIvE,MAAM,cAAgD,CACpD,OAAOF,EAAW,IAAe,cAAc,CAAA,CAIjD,MAAM,iBAAiBQ,EAAeC,EAA8C,CAClF,OAAOT,EAAW,KAAW,4BAA6B,CAAE,MAAAQ,EAAO,SAAAC,EAAU,CAAA,CAEjF,CAEO,MAAMC,EAAc,IAAIX"}