{"version":3,"file":"eventService-DkagHfbT.js","sources":["../../src/services/eventService.ts"],"sourcesContent":["// src/services/eventService.ts - Service pour la gestion des événements\r\nimport { apiService, type ApiResponse, type PaginatedResponse } from './apiService';\r\nimport { type Event, type CreateEventRequest, type UpdateEventRequest, EventType, EventStatus } from '@attendance-x/shared';\r\n\r\nexport interface EventSearchFilters {\r\n  page?: number;\r\n  limit?: number;\r\n  sortBy?: 'startDate' | 'title' | 'createdAt';\r\n  sortOrder?: 'asc' | 'desc';\r\n  type?: EventType;\r\n  status?: EventStatus;\r\n  organizerId?: string;\r\n  participantId?: string;\r\n  startDate?: string;\r\n  endDate?: string;\r\n  search?: string;\r\n  tags?: string;\r\n  isPrivate?: boolean;\r\n  location?: 'physical' | 'virtual' | 'hybrid';\r\n}\r\n\r\nexport interface EventStats {\r\n  total: number;\r\n  upcoming: number;\r\n  ongoing: number;\r\n  completed: number;\r\n  cancelled: number;\r\n  byType: Record<EventType, number>;\r\n  byStatus: Record<EventStatus, number>;\r\n  averageAttendance: number;\r\n  totalParticipants: number;\r\n}\r\n\r\nexport interface EventAnalytics {\r\n  attendanceRate: number;\r\n  totalRegistered: number;\r\n  totalAttended: number;\r\n  lateArrivals: number;\r\n  earlyDepartures: number;\r\n  noShows: number;\r\n  attendanceByHour: Array<{ hour: number; count: number }>;\r\n  participantFeedback: {\r\n    average: number;\r\n    total: number;\r\n    distribution: Record<number, number>;\r\n  };\r\n}\r\n\r\nexport interface ConflictCheck {\r\n  hasConflicts: boolean;\r\n  conflicts: Array<{\r\n    eventId: string;\r\n    title: string;\r\n    startDate: string;\r\n    endDate: string;\r\n    conflictType: 'time' | 'location' | 'participant';\r\n  }>;\r\n}\r\n\r\nclass EventService {\r\n  // Get events with filters\r\n  async getEvents(filters: EventSearchFilters = {}): Promise<ApiResponse<PaginatedResponse<Event>>> {\r\n    return apiService.get<PaginatedResponse<Event>>('/events', filters);\r\n  }\r\n\r\n  // Get my events\r\n  async getMyEvents(filters: Partial<EventSearchFilters> = {}): Promise<ApiResponse<PaginatedResponse<Event>>> {\r\n    return apiService.get<PaginatedResponse<Event>>('/events/my-events', filters);\r\n  }\r\n\r\n  // Get upcoming events\r\n  async getUpcomingEvents(limit: number = 10): Promise<ApiResponse<Event[]>> {\r\n    return apiService.get<Event[]>('/events/upcoming', { limit });\r\n  }\r\n\r\n  // Get event by ID\r\n  async getEventById(id: string): Promise<ApiResponse<Event>> {\r\n    return apiService.get<Event>(`/events/${id}`);\r\n  }\r\n\r\n  // Create new event\r\n  async createEvent(data: CreateEventRequest): Promise<ApiResponse<Event>> {\r\n    return apiService.post<Event>('/events', data);\r\n  }\r\n\r\n  // Update event\r\n  async updateEvent(id: string, data: Partial<UpdateEventRequest>): Promise<ApiResponse<Event>> {\r\n    return apiService.put<Event>(`/events/${id}`, data);\r\n  }\r\n\r\n  // Duplicate event\r\n  async duplicateEvent(id: string, modifications?: {\r\n    title?: string;\r\n    startDate?: string;\r\n    endDate?: string;\r\n    participants?: string[];\r\n  }): Promise<ApiResponse<Event>> {\r\n    return apiService.post<Event>(`/events/${id}/duplicate`, modifications);\r\n  }\r\n\r\n  // Change event status\r\n  async changeEventStatus(id: string, status: EventStatus, reason?: string): Promise<ApiResponse<Event>> {\r\n    return apiService.post<Event>(`/events/${id}/status`, { status, reason });\r\n  }\r\n\r\n  // Search events\r\n  async searchEvents(query: string, filters?: Partial<EventSearchFilters>): Promise<ApiResponse<Event[]>> {\r\n    return apiService.post<Event[]>('/events/search', { query, ...filters });\r\n  }\r\n\r\n  // Get recommended events\r\n  async getRecommendedEvents(limit: number = 5): Promise<ApiResponse<Event[]>> {\r\n    return apiService.get<Event[]>('/events/recommendations', { limit });\r\n  }\r\n\r\n  // Get event statistics\r\n  async getEventStats(organizerId?: string): Promise<ApiResponse<EventStats>> {\r\n    return apiService.get<EventStats>('/events/stats', organizerId ? { organizerId } : {});\r\n  }\r\n\r\n  // Get event analytics\r\n  async getEventAnalytics(id: string): Promise<ApiResponse<EventAnalytics>> {\r\n    return apiService.get<EventAnalytics>(`/events/${id}/analytics`);\r\n  }\r\n\r\n  // Check schedule conflicts\r\n  async checkScheduleConflicts(data: {\r\n    startDateTime: string;\r\n    endDateTime: string;\r\n    participantIds?: string[];\r\n    location?: {\r\n      name: string;\r\n      coordinates?: { latitude: number; longitude: number };\r\n    };\r\n    excludeEventId?: string;\r\n  }): Promise<ApiResponse<ConflictCheck>> {\r\n    return apiService.post<ConflictCheck>('/events/check-conflicts', data);\r\n  }\r\n\r\n  // Participant management\r\n  async addParticipant(eventId: string, userId: string): Promise<ApiResponse<void>> {\r\n    return apiService.post<void>(`/events/${eventId}/participants`, { userId });\r\n  }\r\n\r\n  async removeParticipant(eventId: string, userId: string, reason?: string): Promise<ApiResponse<void>> {\r\n    return apiService.delete<void>(`/events/${eventId}/participants/${userId}`);\r\n  }\r\n\r\n  async confirmParticipant(eventId: string, userId: string): Promise<ApiResponse<void>> {\r\n    return apiService.post<void>(`/events/${eventId}/participants/${userId}/confirm`);\r\n  }\r\n\r\n  async bulkInviteParticipants(eventId: string, userIds: string[]): Promise<ApiResponse<void>> {\r\n    return apiService.post<void>(`/events/${eventId}/participants/bulk-invite`, { userIds });\r\n  }\r\n\r\n  // Bulk operations\r\n  async bulkOperations(operation: 'update_status' | 'delete' | 'duplicate', eventIds: string[], data?: any): Promise<ApiResponse<void>> {\r\n    return apiService.post<void>('/events/bulk-operations', { operation, eventIds, data });\r\n  }\r\n\r\n  // Export events\r\n  async exportEvents(filters: Partial<EventSearchFilters>, format: 'csv' | 'json' | 'excel' = 'csv'): Promise<ApiResponse<Blob>> {\r\n    return apiService.post<Blob>('/events/export', { filters, format });\r\n  }\r\n}\r\n\r\nexport const eventService = new EventService();"],"names":["EventService","filters","apiService","limit","id","data","modifications","status","reason","query","organizerId","eventId","userId","userIds","operation","eventIds","format","eventService"],"mappings":"wCA2DA,MAAMA,CAAa,CAEjB,MAAM,UAAUC,EAA8B,GAAoD,CAChG,OAAOC,EAAW,IAA8B,UAAWD,CAAO,CAAA,CAIpE,MAAM,YAAYA,EAAuC,GAAoD,CAC3G,OAAOC,EAAW,IAA8B,oBAAqBD,CAAO,CAAA,CAI9E,MAAM,kBAAkBE,EAAgB,GAAmC,CACzE,OAAOD,EAAW,IAAa,mBAAoB,CAAE,MAAAC,EAAO,CAAA,CAI9D,MAAM,aAAaC,EAAyC,CAC1D,OAAOF,EAAW,IAAW,WAAWE,CAAE,EAAE,CAAA,CAI9C,MAAM,YAAYC,EAAuD,CACvE,OAAOH,EAAW,KAAY,UAAWG,CAAI,CAAA,CAI/C,MAAM,YAAYD,EAAYC,EAAgE,CAC5F,OAAOH,EAAW,IAAW,WAAWE,CAAE,GAAIC,CAAI,CAAA,CAIpD,MAAM,eAAeD,EAAYE,EAKD,CAC9B,OAAOJ,EAAW,KAAY,WAAWE,CAAE,aAAcE,CAAa,CAAA,CAIxE,MAAM,kBAAkBF,EAAYG,EAAqBC,EAA8C,CACrG,OAAON,EAAW,KAAY,WAAWE,CAAE,UAAW,CAAE,OAAAG,EAAQ,OAAAC,EAAQ,CAAA,CAI1E,MAAM,aAAaC,EAAeR,EAAsE,CACtG,OAAOC,EAAW,KAAc,iBAAkB,CAAE,MAAAO,EAAO,GAAGR,EAAS,CAAA,CAIzE,MAAM,qBAAqBE,EAAgB,EAAkC,CAC3E,OAAOD,EAAW,IAAa,0BAA2B,CAAE,MAAAC,EAAO,CAAA,CAIrE,MAAM,cAAcO,EAAwD,CAC1E,OAAOR,EAAW,IAAgB,gBAAiBQ,EAAc,CAAE,YAAAA,CAAA,EAAgB,EAAE,CAAA,CAIvF,MAAM,kBAAkBN,EAAkD,CACxE,OAAOF,EAAW,IAAoB,WAAWE,CAAE,YAAY,CAAA,CAIjE,MAAM,uBAAuBC,EASW,CACtC,OAAOH,EAAW,KAAoB,0BAA2BG,CAAI,CAAA,CAIvE,MAAM,eAAeM,EAAiBC,EAA4C,CAChF,OAAOV,EAAW,KAAW,WAAWS,CAAO,gBAAiB,CAAE,OAAAC,EAAQ,CAAA,CAG5E,MAAM,kBAAkBD,EAAiBC,EAAgBJ,EAA6C,CACpG,OAAON,EAAW,OAAa,WAAWS,CAAO,iBAAiBC,CAAM,EAAE,CAAA,CAG5E,MAAM,mBAAmBD,EAAiBC,EAA4C,CACpF,OAAOV,EAAW,KAAW,WAAWS,CAAO,iBAAiBC,CAAM,UAAU,CAAA,CAGlF,MAAM,uBAAuBD,EAAiBE,EAA+C,CAC3F,OAAOX,EAAW,KAAW,WAAWS,CAAO,4BAA6B,CAAE,QAAAE,EAAS,CAAA,CAIzF,MAAM,eAAeC,EAAqDC,EAAoBV,EAAwC,CACpI,OAAOH,EAAW,KAAW,0BAA2B,CAAE,UAAAY,EAAW,SAAAC,EAAU,KAAAV,EAAM,CAAA,CAIvF,MAAM,aAAaJ,EAAsCe,EAAmC,MAAmC,CAC7H,OAAOd,EAAW,KAAW,iBAAkB,CAAE,QAAAD,EAAS,OAAAe,EAAQ,CAAA,CAEtE,CAEO,MAAMC,EAAe,IAAIjB"}