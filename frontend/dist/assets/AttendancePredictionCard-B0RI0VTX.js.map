{"version":3,"file":"AttendancePredictionCard-B0RI0VTX.js","sources":["../../src/components/ml/AttendancePredictionCard.tsx"],"sourcesContent":["// src/components/ml/AttendancePredictionCard.tsx - Composant de prédiction de présence\r\nimport { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { \r\n  TrendingUp, \r\n  TrendingDown, \r\n  AlertTriangle, \r\n  CheckCircle, \r\n  Clock, \r\n  User,\r\n  Brain,\r\n  Target,\r\n  Info\r\n} from 'lucide-react';\r\nimport { mlService, type AttendancePrediction } from '@/services';\r\nimport { toast } from 'react-toastify';\r\n\r\ninterface AttendancePredictionCardProps {\r\n  userId: string;\r\n  eventId: string;\r\n  userName?: string;\r\n  compact?: boolean;\r\n  showFactors?: boolean;\r\n  showRecommendations?: boolean;\r\n  onPredictionUpdate?: (prediction: AttendancePrediction) => void;\r\n}\r\n\r\nconst AttendancePredictionCard = ({\r\n  userId,\r\n  eventId,\r\n  userName,\r\n  compact = false,\r\n  showFactors = true,\r\n  showRecommendations = true,\r\n  onPredictionUpdate\r\n}: AttendancePredictionCardProps) => {\r\n  const [prediction, setPrediction] = useState<AttendancePrediction | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    loadPrediction();\r\n  }, [userId, eventId]);\r\n\r\n  const loadPrediction = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const response = await mlService.predictAttendance({\r\n        userId,\r\n        eventId,\r\n        includeFactors: showFactors\r\n      });\r\n\r\n      if (response.success && response.data) {\r\n        setPrediction(response.data);\r\n        onPredictionUpdate?.(response.data);\r\n      } else {\r\n        setError('Impossible de charger la prédiction');\r\n      }\r\n    } catch (err: any) {\r\n      setError(err.message || 'Erreur lors du chargement');\r\n      toast.error('Erreur lors de la prédiction');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getProbabilityColor = (probability: number) => {\r\n    if (probability >= 0.8) return 'text-green-600';\r\n    if (probability >= 0.6) return 'text-yellow-600';\r\n    return 'text-red-600';\r\n  };\r\n\r\n  const getRiskIcon = (riskLevel: string) => {\r\n    switch (riskLevel) {\r\n      case 'low': return <CheckCircle className=\"w-4 h-4 text-green-600\" />;\r\n      case 'medium': return <Clock className=\"w-4 h-4 text-yellow-600\" />;\r\n      case 'high': return <AlertTriangle className=\"w-4 h-4 text-red-600\" />;\r\n      default: return <Info className=\"w-4 h-4 text-gray-600\" />;\r\n    }\r\n  };\r\n\r\n  const getStatusBadge = (status: string, probability: number) => {\r\n    const variants = {\r\n      present: 'default',\r\n      late: 'secondary',\r\n      absent: 'destructive',\r\n      excused: 'outline'\r\n    } as const;\r\n\r\n    return (\r\n      <Badge variant={variants[status as keyof typeof variants] || 'outline'}>\r\n        {mlService.getStatusLabel(status)} ({mlService.formatProbability(probability)})\r\n      </Badge>\r\n    );\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Card className={compact ? 'h-32' : 'h-48'}>\r\n        <CardContent className=\"p-6 flex items-center justify-center\">\r\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  if (error || !prediction) {\r\n    return (\r\n      <Card className={compact ? 'h-32' : 'h-48'}>\r\n        <CardContent className=\"p-6 flex flex-col items-center justify-center\">\r\n          <AlertTriangle className=\"w-8 h-8 text-red-500 mb-2\" />\r\n          <p className=\"text-sm text-muted-foreground text-center\">{error || 'Aucune prédiction disponible'}</p>\r\n          <Button variant=\"outline\" size=\"sm\" onClick={loadPrediction} className=\"mt-2\">\r\n            Réessayer\r\n          </Button>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  if (compact) {\r\n    return (\r\n      <Card className=\"h-32\">\r\n        <CardContent className=\"p-4\">\r\n          <div className=\"flex items-center justify-between mb-2\">\r\n            <div className=\"flex items-center space-x-2\">\r\n              <User className=\"w-4 h-4 text-muted-foreground\" />\r\n              <span className=\"text-sm font-medium\">{userName || 'Utilisateur'}</span>\r\n            </div>\r\n            {getRiskIcon(prediction.prediction.riskLevel)}\r\n          </div>\r\n          \r\n          <div className=\"flex items-center justify-between mb-2\">\r\n            {getStatusBadge(prediction.prediction.expectedStatus, prediction.prediction.probability)}\r\n            <Badge variant=\"outline\" className=\"text-xs\">\r\n              {mlService.getConfidenceIcon(prediction.prediction.confidence)} {prediction.prediction.confidence}\r\n            </Badge>\r\n          </div>\r\n\r\n          <Progress \r\n            value={prediction.prediction.probability * 100} \r\n            className=\"h-2\"\r\n          />\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader className=\"pb-3\">\r\n        <CardTitle className=\"flex items-center justify-between\">\r\n          <div className=\"flex items-center space-x-2\">\r\n            <Brain className=\"w-5 h-5 text-primary\" />\r\n            <span>Prédiction de Présence</span>\r\n          </div>\r\n          <Badge variant=\"outline\" className=\"text-xs\">\r\n            IA v{prediction.modelVersion}\r\n          </Badge>\r\n        </CardTitle>\r\n      </CardHeader>\r\n\r\n      <CardContent className=\"space-y-4\">\r\n        {/* Utilisateur */}\r\n        <div className=\"flex items-center space-x-2\">\r\n          <User className=\"w-4 h-4 text-muted-foreground\" />\r\n          <span className=\"font-medium\">{userName || prediction.userName}</span>\r\n        </div>\r\n\r\n        {/* Prédiction principale */}\r\n        <div className=\"space-y-3\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <span className=\"text-sm text-muted-foreground\">Statut prédit:</span>\r\n            {getStatusBadge(prediction.prediction.expectedStatus, prediction.prediction.probability)}\r\n          </div>\r\n\r\n          <div className=\"space-y-2\">\r\n            <div className=\"flex items-center justify-between text-sm\">\r\n              <span>Probabilité de présence</span>\r\n              <span className={`font-medium ${getProbabilityColor(prediction.prediction.probability)}`}>\r\n                {mlService.formatProbability(prediction.prediction.probability)}\r\n              </span>\r\n            </div>\r\n            <Progress \r\n              value={prediction.prediction.probability * 100} \r\n              className=\"h-2\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"flex items-center justify-between\">\r\n            <span className=\"text-sm text-muted-foreground\">Niveau de risque:</span>\r\n            <div className=\"flex items-center space-x-1\">\r\n              {getRiskIcon(prediction.prediction.riskLevel)}\r\n              <span className=\"text-sm capitalize\">{prediction.prediction.riskLevel}</span>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"flex items-center justify-between\">\r\n            <span className=\"text-sm text-muted-foreground\">Confiance:</span>\r\n            <Badge variant=\"outline\" className=\"text-xs\">\r\n              {mlService.getConfidenceIcon(prediction.prediction.confidence)} {prediction.prediction.confidence}\r\n            </Badge>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Facteurs d'influence */}\r\n        {showFactors && prediction.influencingFactors.length > 0 && (\r\n          <div className=\"space-y-2\">\r\n            <h4 className=\"text-sm font-medium flex items-center\">\r\n              <Target className=\"w-4 h-4 mr-1\" />\r\n              Facteurs d'influence\r\n            </h4>\r\n            <div className=\"space-y-1\">\r\n              {prediction.influencingFactors.slice(0, 3).map((factor, index) => (\r\n                <div key={index} className=\"flex items-center justify-between text-xs\">\r\n                  <span className=\"flex items-center\">\r\n                    {factor.direction === 'positive' ? \r\n                      <TrendingUp className=\"w-3 h-3 text-green-500 mr-1\" /> : \r\n                      <TrendingDown className=\"w-3 h-3 text-red-500 mr-1\" />\r\n                    }\r\n                    {factor.name}\r\n                  </span>\r\n                  <span className=\"font-medium\">\r\n                    {Math.round(factor.impact * 100)}%\r\n                  </span>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Recommandations */}\r\n        {showRecommendations && prediction.recommendations.length > 0 && (\r\n          <div className=\"space-y-2\">\r\n            <h4 className=\"text-sm font-medium\">Recommandations</h4>\r\n            <div className=\"space-y-1\">\r\n              {prediction.recommendations.slice(0, 2).map((recommendation, index) => (\r\n                <div key={index} className=\"text-xs text-muted-foreground bg-muted p-2 rounded\">\r\n                  {recommendation}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Actions */}\r\n        <div className=\"flex items-center justify-between pt-2 border-t\">\r\n          <span className=\"text-xs text-muted-foreground\">\r\n            Généré {new Date(prediction.generatedAt).toLocaleString('fr-FR')}\r\n          </span>\r\n          <Button variant=\"outline\" size=\"sm\" onClick={loadPrediction}>\r\n            Actualiser\r\n          </Button>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default AttendancePredictionCard;"],"names":["AttendancePredictionCard","userId","eventId","userName","compact","showFactors","showRecommendations","onPredictionUpdate","prediction","setPrediction","useState","loading","setLoading","error","setError","useEffect","loadPrediction","response","mlService","err","toast","getProbabilityColor","probability","getRiskIcon","riskLevel","jsx","CheckCircle","Clock","AlertTriangle","Info","getStatusBadge","status","variants","Badge","Card","CardContent","jsxs","Button","User","Progress","CardHeader","CardTitle","Brain","Target","factor","index","TrendingUp","TrendingDown","recommendation"],"mappings":"uhBA8BA,MAAMA,EAA2B,CAAC,CAChC,OAAAC,EACA,QAAAC,EACA,SAAAC,EACA,QAAAC,EAAU,GACV,YAAAC,EAAc,GACd,oBAAAC,EAAsB,GACtB,mBAAAC,CACF,IAAqC,CACnC,KAAM,CAACC,EAAYC,CAAa,EAAIC,EAAAA,SAAsC,IAAI,EACxE,CAACC,EAASC,CAAU,EAAIF,EAAAA,SAAS,EAAI,EACrC,CAACG,EAAOC,CAAQ,EAAIJ,EAAAA,SAAwB,IAAI,EAEtDK,EAAAA,UAAU,IAAM,CACdC,EAAA,CAAe,EACd,CAACf,EAAQC,CAAO,CAAC,EAEpB,MAAMc,EAAiB,SAAY,CACjC,GAAI,CACFJ,EAAW,EAAI,EACfE,EAAS,IAAI,EAEb,MAAMG,EAAW,MAAMC,EAAU,kBAAkB,CACjD,OAAAjB,EACA,QAAAC,EACA,eAAgBG,CAAA,CACjB,EAEGY,EAAS,SAAWA,EAAS,MAC/BR,EAAcQ,EAAS,IAAI,EAC3BV,GAAA,MAAAA,EAAqBU,EAAS,OAE9BH,EAAS,qCAAqC,CAChD,OACOK,EAAU,CACjBL,EAASK,EAAI,SAAW,2BAA2B,EACnDC,EAAM,MAAM,8BAA8B,CAAA,QAC5C,CACER,EAAW,EAAK,CAAA,CAClB,EAGIS,EAAuBC,GACvBA,GAAe,GAAY,iBAC3BA,GAAe,GAAY,kBACxB,eAGHC,EAAeC,GAAsB,CACzC,OAAQA,EAAA,CACN,IAAK,MAAO,OAAOC,EAAAA,IAACC,EAAA,CAAY,UAAU,wBAAA,CAAyB,EACnE,IAAK,SAAU,OAAOD,EAAAA,IAACE,EAAA,CAAM,UAAU,yBAAA,CAA0B,EACjE,IAAK,OAAQ,OAAOF,EAAAA,IAACG,EAAA,CAAc,UAAU,sBAAA,CAAuB,EACpE,QAAS,OAAOH,EAAAA,IAACI,EAAA,CAAK,UAAU,uBAAA,CAAwB,CAAA,CAC1D,EAGIC,EAAiB,CAACC,EAAgBT,IAAwB,CAC9D,MAAMU,EAAW,CACf,QAAS,UACT,KAAM,YACN,OAAQ,cACR,QAAS,SAAA,EAGX,cACGC,EAAA,CAAM,QAASD,EAASD,CAA+B,GAAK,UAC1D,SAAA,CAAAb,EAAU,eAAea,CAAM,EAAE,KAAGb,EAAU,kBAAkBI,CAAW,EAAE,GAAA,EAChF,CAAA,EAIJ,OAAIX,EAEAc,EAAAA,IAACS,EAAA,CAAK,UAAW9B,EAAU,OAAS,OAClC,SAAAqB,EAAAA,IAACU,EAAA,CAAY,UAAU,uCACrB,SAAAV,EAAAA,IAAC,MAAA,CAAI,UAAU,6DAAA,CAA8D,EAC/E,EACF,EAIAZ,GAAS,CAACL,EAEViB,EAAAA,IAACS,GAAK,UAAW9B,EAAU,OAAS,OAClC,SAAAgC,EAAAA,KAACD,EAAA,CAAY,UAAU,gDACrB,SAAA,CAAAV,EAAAA,IAACG,EAAA,CAAc,UAAU,2BAAA,CAA4B,EACrDH,EAAAA,IAAC,IAAA,CAAE,UAAU,4CAA6C,YAAS,+BAA+B,EAClGA,EAAAA,IAACY,EAAA,CAAO,QAAQ,UAAU,KAAK,KAAK,QAASrB,EAAgB,UAAU,OAAO,SAAA,WAAA,CAE9E,CAAA,CAAA,CACF,CAAA,CACF,EAIAZ,QAEC8B,EAAA,CAAK,UAAU,OACd,SAAAE,EAAAA,KAACD,EAAA,CAAY,UAAU,MACrB,SAAA,CAAAC,EAAAA,KAAC,MAAA,CAAI,UAAU,yCACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,8BACb,SAAA,CAAAX,EAAAA,IAACa,EAAA,CAAK,UAAU,+BAAA,CAAgC,EAChDb,EAAAA,IAAC,OAAA,CAAK,UAAU,sBAAuB,YAAY,aAAA,CAAc,CAAA,EACnE,EACCF,EAAYf,EAAW,WAAW,SAAS,CAAA,EAC9C,EAEA4B,EAAAA,KAAC,MAAA,CAAI,UAAU,yCACZ,SAAA,CAAAN,EAAetB,EAAW,WAAW,eAAgBA,EAAW,WAAW,WAAW,EACvF4B,EAAAA,KAACH,EAAA,CAAM,QAAQ,UAAU,UAAU,UAChC,SAAA,CAAAf,EAAU,kBAAkBV,EAAW,WAAW,UAAU,EAAE,IAAEA,EAAW,WAAW,UAAA,CAAA,CACzF,CAAA,EACF,EAEAiB,EAAAA,IAACc,EAAA,CACC,MAAO/B,EAAW,WAAW,YAAc,IAC3C,UAAU,KAAA,CAAA,CACZ,CAAA,CACF,CAAA,CACF,SAKD0B,EAAA,CACC,SAAA,CAAAT,EAAAA,IAACe,GAAW,UAAU,OACpB,SAAAJ,EAAAA,KAACK,EAAA,CAAU,UAAU,oCACnB,SAAA,CAAAL,EAAAA,KAAC,MAAA,CAAI,UAAU,8BACb,SAAA,CAAAX,EAAAA,IAACiB,EAAA,CAAM,UAAU,sBAAA,CAAuB,EACxCjB,EAAAA,IAAC,QAAK,SAAA,wBAAA,CAAsB,CAAA,EAC9B,EACAW,EAAAA,KAACH,EAAA,CAAM,QAAQ,UAAU,UAAU,UAAU,SAAA,CAAA,OACtCzB,EAAW,YAAA,CAAA,CAClB,CAAA,CAAA,CACF,CAAA,CACF,EAEA4B,EAAAA,KAACD,EAAA,CAAY,UAAU,YAErB,SAAA,CAAAC,EAAAA,KAAC,MAAA,CAAI,UAAU,8BACb,SAAA,CAAAX,EAAAA,IAACa,EAAA,CAAK,UAAU,+BAAA,CAAgC,QAC/C,OAAA,CAAK,UAAU,cAAe,SAAAnC,GAAYK,EAAW,QAAA,CAAS,CAAA,EACjE,EAGA4B,EAAAA,KAAC,MAAA,CAAI,UAAU,YACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,oCACb,SAAA,CAAAX,EAAAA,IAAC,OAAA,CAAK,UAAU,gCAAgC,SAAA,iBAAc,EAC7DK,EAAetB,EAAW,WAAW,eAAgBA,EAAW,WAAW,WAAW,CAAA,EACzF,EAEA4B,EAAAA,KAAC,MAAA,CAAI,UAAU,YACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,4CACb,SAAA,CAAAX,EAAAA,IAAC,QAAK,SAAA,yBAAA,CAAuB,EAC7BA,EAAAA,IAAC,OAAA,CAAK,UAAW,eAAeJ,EAAoBb,EAAW,WAAW,WAAW,CAAC,GACnF,SAAAU,EAAU,kBAAkBV,EAAW,WAAW,WAAW,CAAA,CAChE,CAAA,EACF,EACAiB,EAAAA,IAACc,EAAA,CACC,MAAO/B,EAAW,WAAW,YAAc,IAC3C,UAAU,KAAA,CAAA,CACZ,EACF,EAEA4B,EAAAA,KAAC,MAAA,CAAI,UAAU,oCACb,SAAA,CAAAX,EAAAA,IAAC,OAAA,CAAK,UAAU,gCAAgC,SAAA,oBAAiB,EACjEW,EAAAA,KAAC,MAAA,CAAI,UAAU,8BACZ,SAAA,CAAAb,EAAYf,EAAW,WAAW,SAAS,QAC3C,OAAA,CAAK,UAAU,qBAAsB,SAAAA,EAAW,WAAW,SAAA,CAAU,CAAA,CAAA,CACxE,CAAA,EACF,EAEA4B,EAAAA,KAAC,MAAA,CAAI,UAAU,oCACb,SAAA,CAAAX,EAAAA,IAAC,OAAA,CAAK,UAAU,gCAAgC,SAAA,aAAU,EAC1DW,EAAAA,KAACH,EAAA,CAAM,QAAQ,UAAU,UAAU,UAChC,SAAA,CAAAf,EAAU,kBAAkBV,EAAW,WAAW,UAAU,EAAE,IAAEA,EAAW,WAAW,UAAA,CAAA,CACzF,CAAA,CAAA,CACF,CAAA,EACF,EAGCH,GAAeG,EAAW,mBAAmB,OAAS,GACrD4B,OAAC,MAAA,CAAI,UAAU,YACb,SAAA,CAAAA,EAAAA,KAAC,KAAA,CAAG,UAAU,wCACZ,SAAA,CAAAX,EAAAA,IAACkB,EAAA,CAAO,UAAU,cAAA,CAAe,EAAE,sBAAA,EAErC,QACC,MAAA,CAAI,UAAU,YACZ,SAAAnC,EAAW,mBAAmB,MAAM,EAAG,CAAC,EAAE,IAAI,CAACoC,EAAQC,IACtDT,EAAAA,KAAC,MAAA,CAAgB,UAAU,4CACzB,SAAA,CAAAA,EAAAA,KAAC,OAAA,CAAK,UAAU,oBACb,SAAA,CAAAQ,EAAO,YAAc,WACpBnB,EAAAA,IAACqB,EAAA,CAAW,UAAU,8BAA8B,EACpDrB,EAAAA,IAACsB,EAAA,CAAa,UAAU,2BAAA,CAA4B,EAErDH,EAAO,IAAA,EACV,EACAR,EAAAA,KAAC,OAAA,CAAK,UAAU,cACb,SAAA,CAAA,KAAK,MAAMQ,EAAO,OAAS,GAAG,EAAE,GAAA,CAAA,CACnC,CAAA,CAAA,EAVQC,CAWV,CACD,CAAA,CACH,CAAA,EACF,EAIDvC,GAAuBE,EAAW,gBAAgB,OAAS,GAC1D4B,OAAC,MAAA,CAAI,UAAU,YACb,SAAA,CAAAX,EAAAA,IAAC,KAAA,CAAG,UAAU,sBAAsB,SAAA,kBAAe,EACnDA,EAAAA,IAAC,OAAI,UAAU,YACZ,WAAW,gBAAgB,MAAM,EAAG,CAAC,EAAE,IAAI,CAACuB,EAAgBH,IAC3DpB,MAAC,MAAA,CAAgB,UAAU,qDACxB,SAAAuB,GADOH,CAEV,CACD,CAAA,CACH,CAAA,EACF,EAIFT,EAAAA,KAAC,MAAA,CAAI,UAAU,kDACb,SAAA,CAAAA,EAAAA,KAAC,OAAA,CAAK,UAAU,gCAAgC,SAAA,CAAA,UACtC,IAAI,KAAK5B,EAAW,WAAW,EAAE,eAAe,OAAO,CAAA,EACjE,EACAiB,EAAAA,IAACY,GAAO,QAAQ,UAAU,KAAK,KAAK,QAASrB,EAAgB,SAAA,YAAA,CAE7D,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,EACF,CAEJ"}