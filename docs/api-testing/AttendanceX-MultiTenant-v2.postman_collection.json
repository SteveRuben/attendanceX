{
  "info": {
    "name": "AttendanceX Multi-Tenant v2.0",
    "description": "Collection compl√®te pour tester le nouveau syst√®me multi-tenant unifi√© d'AttendanceX v2.0",
    "version": "2.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{accessToken}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-refresh token if expired",
          "const token = pm.environment.get('accessToken');",
          "if (token) {",
          "  const payload = JSON.parse(atob(token.split('.')[1]));",
          "  const now = Math.floor(Date.now() / 1000);",
          "  if (payload.exp && payload.exp < now + 60) {",
          "    console.log('Token expires soon, should refresh');",
          "  }",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test for deprecation warnings",
          "if (pm.response.headers.get('Deprecation')) {",
          "  console.warn('‚ö†Ô∏è DEPRECATED ENDPOINT USED');",
          "  console.warn('Sunset:', pm.response.headers.get('Sunset'));",
          "  console.warn('Replacement:', pm.response.headers.get('Link'));",
          "}",
          "",
          "// Store tokens automatically",
          "if (pm.response.json() && pm.response.json().data) {",
          "  const data = pm.response.json().data;",
          "  if (data.accessToken) {",
          "    pm.environment.set('accessToken', data.accessToken);",
          "  }",
          "  if (data.refreshToken) {",
          "    pm.environment.set('refreshToken', data.refreshToken);",
          "  }",
          "  if (data.tokens) {",
          "    pm.environment.set('accessToken', data.tokens.accessToken);",
          "    pm.environment.set('refreshToken', data.tokens.refreshToken);",
          "  }",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "{{baseUrl}}",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üîê Authentication Flow",
      "item": [
        {
          "name": "1. Register (Simplified)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Registration successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.email).to.exist;",
                  "    pm.environment.set('userEmail', response.data.email);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"SecurePass123!\",\n  \"confirmPassword\": \"SecurePass123!\",\n  \"acceptTerms\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            }
          }
        },
        {
          "name": "2. Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.accessToken).to.exist;",
                  "    pm.environment.set('accessToken', response.data.accessToken);",
                  "    pm.environment.set('refreshToken', response.data.refreshToken);",
                  "    pm.environment.set('userId', response.data.user.id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"SecurePass123!\",\n  \"rememberMe\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          }
        },
        {
          "name": "3. Forgot Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{userEmail}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/forgot-password",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "forgot-password"]
            }
          }
        },
        {
          "name": "4. Resend Email Verification",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{userEmail}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/send-email-verification",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "send-email-verification"]
            }
          }
        }
      ]
    },
    {
      "name": "üè¢ Tenant Management",
      "item": [
        {
          "name": "1. Create Tenant",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Tenant created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.tenant.id).to.exist;",
                  "    pm.environment.set('tenantId', response.data.tenant.id);",
                  "    pm.environment.set('membershipId', response.data.membership.id);",
                  "    // Update token with tenant context",
                  "    if (response.data.tokens) {",
                  "        pm.environment.set('accessToken', response.data.tokens.accessToken);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"{{$randomCompanyName}}\",\n  \"slug\": \"{{$randomUserName}}-org\",\n  \"industry\": \"technology\",\n  \"size\": \"10-50\",\n  \"planId\": \"basic\",\n  \"settings\": {\n    \"timezone\": \"Europe/Paris\",\n    \"locale\": \"fr-FR\",\n    \"currency\": \"EUR\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants/register",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "register"]
            }
          }
        },
        {
          "name": "2. Get User Tenants",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Tenants retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/tenants",
              "host": ["{{baseUrl}}"],
              "path": ["tenants"]
            }
          }
        },
        {
          "name": "3. Switch Tenant Context",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Context switched successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.token).to.exist;",
                  "    pm.environment.set('accessToken', response.data.token);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"tenantId\": \"{{tenantId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants/switch-context",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "switch-context"]
            }
          }
        }
      ]
    },
    {
      "name": "‚ö†Ô∏è Deprecated Routes (Organizations)",
      "item": [
        {
          "name": "Create Organization (DEPRECATED)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Deprecation warning present', function () {",
                  "    pm.expect(pm.response.headers.get('Deprecation')).to.equal('true');",
                  "    const response = pm.response.json();",
                  "    pm.expect(response._deprecated).to.exist;",
                  "    pm.expect(response._deprecated.replacement).to.exist;",
                  "});",
                  "",
                  "pm.test('Still works but deprecated', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Organization\",\n  \"sector\": \"technology\",\n  \"contactInfo\": {\n    \"email\": \"{{userEmail}}\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/organizations",
              "host": ["{{baseUrl}}"],
              "path": ["organizations"]
            }
          }
        },
        {
          "name": "Get My Organization",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/organizations/my-organization",
              "host": ["{{baseUrl}}"],
              "path": ["organizations", "my-organization"]
            }
          }
        }
      ]
    },
    {
      "name": "üë• User Management",
      "item": [
        {
          "name": "Get User Profile",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/users/me",
              "host": ["{{baseUrl}}"],
              "path": ["users", "me"]
            }
          }
        },
        {
          "name": "List Tenant Users",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/users?page=1&limit=20",
              "host": ["{{baseUrl}}"],
              "path": ["users"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "20"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "üìÖ Events Management",
      "item": [
        {
          "name": "Create Event",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Event created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.id).to.exist;",
                  "    pm.environment.set('eventId', response.data.id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"{{$randomLoremWords}}\",\n  \"description\": \"Test event created via Postman\",\n  \"startDate\": \"{{$isoTimestamp}}\",\n  \"endDate\": \"{{$isoTimestamp}}\",\n  \"location\": \"Salle de conf√©rence A\",\n  \"type\": \"meeting\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/events",
              "host": ["{{baseUrl}}"],
              "path": ["events"]
            }
          }
        },
        {
          "name": "List Events",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/events?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["events"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          }
        },
        {
          "name": "Get Event Details",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/events/{{eventId}}",
              "host": ["{{baseUrl}}"],
              "path": ["events", "{{eventId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "üîß Admin & Migration",
      "item": [
        {
          "name": "Validate System Integrity",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/admin/migration/validate-integrity",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "migration", "validate-integrity"]
            }
          }
        },
        {
          "name": "Migrate Organizations to Tenants",
          "request": {
            "method": "POST",
            "url": {
              "raw": "{{baseUrl}}/admin/migration/organizations-to-tenants",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "migration", "organizations-to-tenants"]
            }
          }
        },
        {
          "name": "Cleanup Duplicates",
          "request": {
            "method": "POST",
            "url": {
              "raw": "{{baseUrl}}/admin/migration/cleanup-duplicates",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "migration", "cleanup-duplicates"]
            }
          }
        },
        {
          "name": "Run Full Migration",
          "request": {
            "method": "POST",
            "url": {
              "raw": "{{baseUrl}}/admin/migration/run-full",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "migration", "run-full"]
            }
          }
        }
      ]
    },
    {
      "name": "üìä System Status",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          }
        },
        {
          "name": "System Status",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/status",
              "host": ["{{baseUrl}}"],
              "path": ["status"]
            }
          }
        },
        {
          "name": "API Info",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/api",
              "host": ["{{baseUrl}}"],
              "path": ["api"]
            }
          }
        }
      ]
    }
  ]
}