{
  "info": {
    "name": "AttendanceX Complete API v3.0 - Fixed",
    "description": "Collection compl√®te avec corrections des champs requis (confirmPassword, acceptTerms)",
    "version": "3.0.1",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{accessToken}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-refresh token if expired",
          "const token = pm.environment.get('accessToken');",
          "if (token) {",
          "    try {",
          "        const payload = JSON.parse(atob(token.split('.')[1]));",
          "        const now = Math.floor(Date.now() / 1000);",
          "        if (payload.exp < now + 60) {",
          "            console.log('Token expires soon, consider refreshing...');",
          "        }",
          "    } catch (e) {",
          "        console.log('Invalid token format');",
          "    }",
          "}",
          "",
          "// Add tenant context header if available",
          "const tenantId = pm.environment.get('tenantId');",
          "if (tenantId) {",
          "    pm.request.headers.add({",
          "        key: 'X-Tenant-ID',",
          "        value: tenantId",
          "    });",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "{{baseUrl}}",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üîê Authentication",
      "description": "Routes d'authentification et gestion des sessions",
      "item": [
        {
          "name": "Register User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{testEmail}}\",\n  \"password\": \"{{testPassword}}\",\n  \"confirmPassword\": \"{{testPassword}}\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"acceptTerms\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Registration successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.accessToken) {",
                  "        pm.environment.set('accessToken', jsonData.accessToken);",
                  "    }",
                  "    if (jsonData.refreshToken) {",
                  "        pm.environment.set('refreshToken', jsonData.refreshToken);",
                  "    }",
                  "    if (jsonData.user && jsonData.user.id) {",
                  "        pm.environment.set('userId', jsonData.user.id);",
                  "    }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{testEmail}}\",\n  \"password\": \"{{testPassword}}\",\n  \"rememberMe\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.accessToken) {",
                  "        pm.environment.set('accessToken', jsonData.accessToken);",
                  "    }",
                  "    if (jsonData.refreshToken) {",
                  "        pm.environment.set('refreshToken', jsonData.refreshToken);",
                  "    }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Reset Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"{{resetToken}}\",\n  \"newPassword\": \"NewPassword123!\",\n  \"confirmPassword\": \"NewPassword123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/reset-password",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "reset-password"]
            }
          }
        },
        {
          "name": "Change Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"currentPassword\": \"{{testPassword}}\",\n  \"newPassword\": \"NewPassword123!\",\n  \"confirmPassword\": \"NewPassword123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/change-password",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "change-password"]
            }
          }
        }
      ]
    },
    {
      "name": "üè¢ Tenant Management",
      "description": "Gestion des tenants/organisations multi-tenant",
      "item": [
        {
          "name": "Register Tenant",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Company\",\n  \"slug\": \"test-company\",\n  \"industry\": \"technology\",\n  \"size\": \"small\",\n  \"planId\": \"basic\",\n  \"settings\": {\n    \"timezone\": \"Europe/Paris\",\n    \"locale\": \"fr\",\n    \"currency\": \"EUR\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants/register",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Tenant created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.data && jsonData.data.tenant) {",
                  "        pm.environment.set('tenantId', jsonData.data.tenant.id);",
                  "    }",
                  "    if (jsonData.data && jsonData.data.tokens) {",
                  "        pm.environment.set('accessToken', jsonData.data.tokens.accessToken);",
                  "        pm.environment.set('refreshToken', jsonData.data.tokens.refreshToken);",
                  "    }",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}