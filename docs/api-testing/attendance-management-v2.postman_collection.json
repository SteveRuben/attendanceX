{
  "info": {
    "name": "Attendance Management System API v3 - Multi-Tenant",
    "description": "Collection Postman compl√®te pour l'API SaaS multi-tenant du syst√®me de gestion de pr√©sence",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "3.0.0"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{jwt_token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-inject tenant context",
          "const tenantId = pm.environment.get('tenant_id');",
          "if (tenantId && !pm.request.headers.has('X-Tenant-ID')) {",
          "  pm.request.headers.add({",
          "    key: 'X-Tenant-ID',",
          "    value: tenantId",
          "  });",
          "}",
          "",
          "// Auto-refresh token si expir√©",
          "const token = pm.environment.get('jwt_token');",
          "if (token) {",
          "  try {",
          "    const payload = JSON.parse(atob(token.split('.')[1]));",
          "    const now = Math.floor(Date.now() / 1000);",
          "    if (payload.exp < now) {",
          "      console.log('Token expir√©, tentative de refresh...');",
          "    }",
          "  } catch (e) {",
          "    console.log('Invalid token format');",
          "  }",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:5001/api/v1",
      "type": "string"
    },
    {
      "key": "jwt_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "refresh_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "tenant_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "organization_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "event_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "subscription_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üîê Authentication",
      "item": [
        {
          "name": "Register Tenant & User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData.data).to.have.property('tenant');",
                  "    pm.expect(jsonData.data).to.have.property('user');",
                  "    pm.expect(jsonData.data).to.have.property('token');",
                  "});",
                  "",
                  "// Sauvegarder les donn√©es pour les requ√™tes suivantes",
                  "if (pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set('jwt_token', jsonData.data.token);",
                  "    pm.environment.set('refresh_token', jsonData.data.refreshToken);",
                  "    pm.environment.set('user_id', jsonData.data.user.id);",
                  "    pm.environment.set('tenant_id', jsonData.data.tenant.id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"{{$randomCompanyName}}\",\n  \"slug\": \"{{$randomWord}}-{{$randomInt}}\",\n  \"adminUser\": {\n    \"email\": \"{{$randomEmail}}\",\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"password\": \"SecurePassword123!\"\n  },\n  \"planId\": \"basic\",\n  \"settings\": {\n    \"timezone\": \"Europe/Paris\",\n    \"locale\": \"fr\",\n    \"currency\": \"EUR\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/tenants/register",
              "host": ["{{base_url}}"],
              "path": ["tenants", "register"]
            }
          }
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Login successful', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData.data).to.have.property('token');",
                  "});",
                  "",
                  "// Sauvegarder les tokens",
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set('jwt_token', jsonData.data.token);",
                  "    pm.environment.set('refresh_token', jsonData.data.refreshToken);",
                  "    pm.environment.set('user_id', jsonData.data.user.id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@example.com\",\n  \"password\": \"SecurePassword123!\",\n  \"tenantId\": \"{{tenant_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            }
          }
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Mettre √† jour les tokens",
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set('jwt_token', jsonData.data.token);",
                  "    pm.environment.set('refresh_token', jsonData.data.refreshToken);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refresh_token}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/refresh",
              "host": ["{{base_url}}"],
              "path": ["auth", "refresh"]
            }
          }
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/auth/logout",
              "host": ["{{base_url}}"],
              "path": ["auth", "logout"]
            }
          }
        }
      ]
    },
    {
      "name": "üë• Users",
      "item": [
        {
          "name": "Get Users List",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has users array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('users');",
                  "    pm.expect(jsonData.data.users).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users?page=1&limit=20",
              "host": ["{{base_url}}"],
              "path": ["users"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "20"
                }
              ]
            }
          }
        },
        {
          "name": "Get User by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["users", "{{user_id}}"]
            }
          }
        },
        {
          "name": "Create User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "// Sauvegarder l'ID du nouvel utilisateur",
                  "if (pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set('new_user_id', jsonData.data.user.id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\",\n  \"role\": \"participant\",\n  \"sendInvitation\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/users",
              "host": ["{{base_url}}"],
              "path": ["users"]
            }
          }
        },
        {
          "name": "Update User",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Name\",\n  \"phone\": \"+33123456789\",\n  \"status\": \"active\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["users", "{{user_id}}"]
            }
          }
        },
        {
          "name": "Delete User",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/{{new_user_id}}",
              "host": ["{{base_url}}"],
              "path": ["users", "{{new_user_id}}"]
            }
          }
        }
      ]
    },
    {
      "name": "üìÖ Events",
      "item": [
        {
          "name": "Get Events List",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has events array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('events');",
                  "    pm.expect(jsonData.data.events).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/events?page=1&limit=20&type=meeting",
              "host": ["{{base_url}}"],
              "path": ["events"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "20"
                },
                {
                  "key": "type",
                  "value": "meeting"
                }
              ]
            }
          }
        },
        {
          "name": "Create Event",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "// Sauvegarder l'ID de l'√©v√©nement",
                  "if (pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set('event_id', jsonData.data.event.id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"R√©union d'√©quipe\",\n  \"description\": \"R√©union hebdomadaire de l'√©quipe de d√©veloppement\",\n  \"type\": \"meeting\",\n  \"startDateTime\": \"2024-12-20T09:00:00Z\",\n  \"endDateTime\": \"2024-12-20T10:00:00Z\",\n  \"location\": {\n    \"type\": \"physical\",\n    \"address\": \"Salle de conf√©rence A\"\n  },\n  \"maxParticipants\": 10\n}"
            },
            "url": {
              "raw": "{{base_url}}/events",
              "host": ["{{base_url}}"],
              "path": ["events"]
            }
          }
        },
        {
          "name": "Get Event by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/events/{{event_id}}",
              "host": ["{{base_url}}"],
              "path": ["events", "{{event_id}}"]
            }
          }
        },
        {
          "name": "Update Event",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"R√©union d'√©quipe - Mise √† jour\",\n  \"status\": \"published\",\n  \"maxParticipants\": 15\n}"
            },
            "url": {
              "raw": "{{base_url}}/events/{{event_id}}",
              "host": ["{{base_url}}"],
              "path": ["events", "{{event_id}}"]
            }
          }
        },
        {
          "name": "Delete Event",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/events/{{event_id}}",
              "host": ["{{base_url}}"],
              "path": ["events", "{{event_id}}"]
            }
          }
        }
      ]
    },
    {
      "name": "üè¢ Organizations",
      "item": [
        {
          "name": "Get Organizations List",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/organizations?page=1&limit=20",
              "host": ["{{base_url}}"],
              "path": ["organizations"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "20"
                }
              ]
            }
          }
        },
        {
          "name": "Get Organization by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/organizations/{{organization_id}}",
              "host": ["{{base_url}}"],
              "path": ["organizations", "{{organization_id}}"]
            }
          }
        }
      ]
    },
    {
      "name": "‚úÖ Attendance",
      "item": [
        {
          "name": "Clock In",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"location\": {\n    \"latitude\": 48.8566,\n    \"longitude\": 2.3522\n  },\n  \"notes\": \"Arriv√©e au bureau\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/presence/employees/{{user_id}}/clock-in",
              "host": ["{{base_url}}"],
              "path": ["presence", "employees", "{{user_id}}", "clock-in"]
            }
          }
        },
        {
          "name": "Clock Out",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"location\": {\n    \"latitude\": 48.8566,\n    \"longitude\": 2.3522\n  },\n  \"notes\": \"Fin de journ√©e\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/presence/employees/{{user_id}}/clock-out",
              "host": ["{{base_url}}"],
              "path": ["presence", "employees", "{{user_id}}", "clock-out"]
            }
          }
        },
        {
          "name": "Get Presence Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/presence/employees/{{user_id}}/status",
              "host": ["{{base_url}}"],
              "path": ["presence", "employees", "{{user_id}}", "status"]
            }
          }
        }
      ]
    },
    {
      "name": "üîî Notifications",
      "item": [
        {
          "name": "Get Notifications",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/notifications?page=1&limit=20",
              "host": ["{{base_url}}"],
              "path": ["notifications"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "20"
                }
              ]
            }
          }
        },
        {
          "name": "Send Notification",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Notification de test\",\n  \"message\": \"Ceci est une notification de test\",\n  \"type\": \"info\",\n  \"recipients\": [\"{{user_id}}\"],\n  \"channels\": [\"email\", \"push\"]\n}"
            },
            "url": {
              "raw": "{{base_url}}/notifications/send",
              "host": ["{{base_url}}"],
              "path": ["notifications", "send"]
            }
          }
        }
      ]
    },
    {
      "name": "üìä Reports",
      "item": [
        {
          "name": "Generate Attendance Report",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"attendance\",\n  \"period\": {\n    \"startDate\": \"2024-12-01\",\n    \"endDate\": \"2024-12-31\"\n  },\n  \"format\": \"pdf\",\n  \"filters\": {\n    \"departments\": [],\n    \"users\": []\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/reports/generate",
              "host": ["{{base_url}}"],
              "path": ["reports", "generate"]
            }
          }
        },
        {
          "name": "Get Reports List",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/reports?page=1&limit=20",
              "host": ["{{base_url}}"],
              "path": ["reports"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "20"
                }
              ]
            }
          }
        }
      ]
    }
  ]
}