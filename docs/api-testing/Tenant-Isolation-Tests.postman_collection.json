{
  "info": {
    "name": "Tenant Isolation Tests",
    "description": "Collection spécialisée pour tester l'isolation des données entre tenants",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{accessToken}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "{{baseUrl}}",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "🏗️ Setup Test Tenants",
      "item": [
        {
          "name": "Create Tenant A",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Tenant A Test\",\n  \"slug\": \"tenant-a-test\",\n  \"industry\": \"technology\",\n  \"size\": \"small\",\n  \"planId\": \"basic\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants/register",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Tenant A created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.data && jsonData.data.tenant) {",
                  "        pm.environment.set('tenantA_id', jsonData.data.tenant.id);",
                  "        pm.environment.set('tenantA_token', jsonData.data.tokens.accessToken);",
                  "    }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Tenant B",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Tenant B Test\",\n  \"slug\": \"tenant-b-test\",\n  \"industry\": \"healthcare\",\n  \"size\": \"medium\",\n  \"planId\": \"pro\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants/register",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Tenant B created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.data && jsonData.data.tenant) {",
                  "        pm.environment.set('tenantB_id', jsonData.data.tenant.id);",
                  "        pm.environment.set('tenantB_token', jsonData.data.tokens.accessToken);",
                  "    }",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "🔒 Data Isolation Tests",
      "item": [
        {
          "name": "Create Invitation in Tenant A",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{tenantA_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user-a@example.com\",\n  \"firstName\": \"User\",\n  \"lastName\": \"A\",\n  \"role\": \"member\",\n  \"message\": \"Welcome to Tenant A!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/user-invitations/invite",
              "host": ["{{baseUrl}}"],
              "path": ["user-invitations", "invite"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Invitation created in Tenant A', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.data && jsonData.data.id) {",
                  "        pm.environment.set('tenantA_invitationId', jsonData.data.id);",
                  "    }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Invitation in Tenant B",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{tenantB_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user-b@example.com\",\n  \"firstName\": \"User\",\n  \"lastName\": \"B\",\n  \"role\": \"member\",\n  \"message\": \"Welcome to Tenant B!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/user-invitations/invite",
              "host": ["{{baseUrl}}"],
              "path": ["user-invitations", "invite"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Invitation created in Tenant B', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.data && jsonData.data.id) {",
                  "        pm.environment.set('tenantB_invitationId', jsonData.data.id);",
                  "    }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "List Invitations from Tenant A",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{tenantA_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/user-invitations",
              "host": ["{{baseUrl}}"],
              "path": ["user-invitations"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Tenant A sees only its invitations', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const jsonData = pm.response.json();",
                  "    ",
                  "    // Should only see invitations from Tenant A",
                  "    if (jsonData.data && jsonData.data.invitations) {",
                  "        const invitations = jsonData.data.invitations;",
                  "        const tenantA_id = pm.environment.get('tenantA_id');",
                  "        ",
                  "        invitations.forEach(invitation => {",
                  "            pm.expect(invitation.tenantId).to.equal(tenantA_id);",
                  "        });",
                  "        ",
                  "        // Should find the invitation we created",
                  "        const ourInvitation = invitations.find(inv => inv.email === 'user-a@example.com');",
                  "        pm.expect(ourInvitation).to.not.be.undefined;",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "List Invitations from Tenant B",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{tenantB_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/user-invitations",
              "host": ["{{baseUrl}}"],
              "path": ["user-invitations"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Tenant B sees only its invitations', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const jsonData = pm.response.json();",
                  "    ",
                  "    // Should only see invitations from Tenant B",
                  "    if (jsonData.data && jsonData.data.invitations) {",
                  "        const invitations = jsonData.data.invitations;",
                  "        const tenantB_id = pm.environment.get('tenantB_id');",
                  "        ",
                  "        invitations.forEach(invitation => {",
                  "            pm.expect(invitation.tenantId).to.equal(tenantB_id);",
                  "        });",
                  "        ",
                  "        // Should find the invitation we created",
                  "        const ourInvitation = invitations.find(inv => inv.email === 'user-b@example.com');",
                  "        pm.expect(ourInvitation).to.not.be.undefined;",
                  "        ",
                  "        // Should NOT find Tenant A's invitation",
                  "        const tenantAInvitation = invitations.find(inv => inv.email === 'user-a@example.com');",
                  "        pm.expect(tenantAInvitation).to.be.undefined;",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "🚫 Cross-Tenant Access Tests",
      "item": [
        {
          "name": "Tenant A tries to access Tenant B invitation",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{tenantA_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "url": {
              "raw": "{{baseUrl}}/user-invitations/{{tenantB_invitationId}}",
              "host": ["{{baseUrl}}"],
              "path": ["user-invitations", "{{tenantB_invitationId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Cross-tenant access denied', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([403, 404]);",
                  "    ",
                  "    if (pm.response.code === 403) {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData.error.code).to.be.oneOf(['TENANT_ACCESS_DENIED', 'PERMISSION_DENIED']);",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Tenant B tries to access Tenant A invitation",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{tenantB_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "url": {
              "raw": "{{baseUrl}}/user-invitations/{{tenantA_invitationId}}",
              "host": ["{{baseUrl}}"],
              "path": ["user-invitations", "{{tenantA_invitationId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Cross-tenant access denied', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([403, 404]);",
                  "    ",
                  "    if (pm.response.code === 403) {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData.error.code).to.be.oneOf(['TENANT_ACCESS_DENIED', 'PERMISSION_DENIED']);",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "🎯 Feature Isolation Tests",
      "item": [
        {
          "name": "Test Basic Plan Limitations (Tenant A)",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{tenantA_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/billing/usage",
              "host": ["{{baseUrl}}"],
              "path": ["billing", "usage"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Basic plan has appropriate limits', function () {",
                  "    if (pm.response.code === 200) {",
                  "        const jsonData = pm.response.json();",
                  "        if (jsonData.data && jsonData.data.limits) {",
                  "            // Basic plan should have limited features",
                  "            pm.expect(jsonData.data.limits.users).to.be.greaterThan(0);",
                  "            pm.expect(jsonData.data.limits.users).to.be.lessThan(1000); // Not unlimited",
                  "        }",
                  "    } else if (pm.response.code === 403) {",
                  "        // Feature might not be available in basic plan",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData.error.code).to.equal('FEATURE_NOT_AVAILABLE');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Test Pro Plan Features (Tenant B)",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{tenantB_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/billing/usage",
              "host": ["{{baseUrl}}"],
              "path": ["billing", "usage"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Pro plan has enhanced features', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const jsonData = pm.response.json();",
                  "    ",
                  "    if (jsonData.data && jsonData.data.limits) {",
                  "        // Pro plan should have higher limits",
                  "        pm.expect(jsonData.data.limits.users).to.be.greaterThan(10);",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "🧹 Cleanup Test Data",
      "item": [
        {
          "name": "Cancel Tenant A Invitations",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{tenantA_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "url": {
              "raw": "{{baseUrl}}/user-invitations/{{tenantA_invitationId}}",
              "host": ["{{baseUrl}}"],
              "path": ["user-invitations", "{{tenantA_invitationId}}"]
            }
          }
        },
        {
          "name": "Cancel Tenant B Invitations",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{tenantB_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "url": {
              "raw": "{{baseUrl}}/user-invitations/{{tenantB_invitationId}}",
              "host": ["{{baseUrl}}"],
              "path": ["user-invitations", "{{tenantB_invitationId}}"]
            }
          }
        }
      ]
    }
  ]
}