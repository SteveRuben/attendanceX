{
  "name": "📅 Event Management Workflow",
  "description": "Automated workflow: Login → Create Event → Add Participants → Generate QR → Track Attendance → Analytics",
  "item": [
    {
      "name": "1. Login (Required)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Login successful', function () {",
              "    pm.expect(pm.response.code).to.equal(200);",
              "});",
              "",
              "if (pm.response.code === 200) {",
              "    const data = pm.response.json();",
              "    pm.globals.set('accessToken', data.accessToken);",
              "    pm.globals.set('refreshToken', data.refreshToken);",
              "    pm.globals.set('tokenExpiry', new Date().getTime() + (data.expiresIn * 1000));",
              "    pm.globals.set('userId', data.user.id);",
              "    console.log('✅ Login successful, proceeding to event creation');",
              "    ",
              "    setTimeout(() => {",
              "        postman.setNextRequest('2. Create Event');",
              "    }, 500);",
              "} else {",
              "    console.log('❌ Login failed, stopping workflow');",
              "    postman.setNextRequest(null);",
              "}"
            ]
          }
        }
      ],
      "request": {
        "auth": { "type": "noauth" },
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"{{testEmail}}\",\n  \"password\": \"{{testPassword}}\",\n  \"rememberMe\": false\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/auth/login",
          "host": ["{{baseUrl}}"],
          "path": ["auth", "login"]
        }
      }
    },
    {
      "name": "2. Create Event",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Event created successfully', function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
              "});",
              "",
              "if (pm.response.code === 201 || pm.response.code === 200) {",
              "    const data = pm.response.json();",
              "    pm.globals.set('eventId', data.data.id);",
              "    console.log('✅ Event created: ' + data.data.title);",
              "    ",
              "    setTimeout(() => {",
              "        postman.setNextRequest('3. Generate QR Code');",
              "    }, 500);",
              "} else {",
              "    console.log('❌ Event creation failed');",
              "    postman.setNextRequest(null);",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"title\": \"Team Standup - {{$randomDateRecent}}\",\n  \"description\": \"Daily team standup meeting\",\n  \"type\": \"meeting\",\n  \"startDateTime\": \"{{$isoTimestamp}}\",\n  \"endDateTime\": \"2024-12-31T10:30:00Z\",\n  \"location\": {\n    \"name\": \"Conference Room A\",\n    \"address\": \"123 Main St\",\n    \"coordinates\": {\n      \"latitude\": 40.7128,\n      \"longitude\": -74.0060\n    }\n  },\n  \"participants\": [],\n  \"isPrivate\": false,\n  \"tags\": [\"standup\", \"daily\", \"team\"]\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/events",
          "host": ["{{baseUrl}}"],
          "path": ["events"]
        }
      }
    },
    {
      "name": "3. Generate QR Code",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('QR Code generated', function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
              "});",
              "",
              "if (pm.response.code === 201 || pm.response.code === 200) {",
              "    const data = pm.response.json();",
              "    pm.globals.set('qrCodeData', data.data.qrCodeData);",
              "    console.log('✅ QR Code generated for event');",
              "    ",
              "    setTimeout(() => {",
              "        postman.setNextRequest('4. Simulate Check-in');",
              "    }, 500);",
              "} else {",
              "    console.log('⚠️ QR Code generation failed, continuing anyway');",
              "    setTimeout(() => {",
              "        postman.setNextRequest('4. Simulate Check-in');",
              "    }, 500);",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"expiresAt\": \"2024-12-31T23:59:59Z\",\n  \"maxUsage\": 50,\n  \"timeWindow\": {\n    \"start\": \"2024-12-01T08:00:00Z\",\n    \"end\": \"2024-12-31T18:00:00Z\"\n  },\n  \"maxScansPerUser\": 1\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/qr-codes/events/{{eventId}}/generate",
          "host": ["{{baseUrl}}"],
          "path": ["qr-codes", "events", "{{eventId}}", "generate"]
        }
      }
    },
    {
      "name": "4. Simulate Check-in",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Check-in successful', function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
              "});",
              "",
              "if (pm.response.code === 201 || pm.response.code === 200) {",
              "    const data = pm.response.json();",
              "    pm.globals.set('attendanceId', data.data.id);",
              "    console.log('✅ User checked in to event');",
              "    ",
              "    setTimeout(() => {",
              "        postman.setNextRequest('5. Get Event Analytics');",
              "    }, 500);",
              "} else {",
              "    console.log('❌ Check-in failed');",
              "    postman.setNextRequest('5. Get Event Analytics');",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"eventId\": \"{{eventId}}\",\n  \"method\": \"qr_code\",\n  \"location\": {\n    \"latitude\": 40.7128,\n    \"longitude\": -74.0060,\n    \"accuracy\": 5\n  },\n  \"qrCodeData\": \"{{qrCodeData}}\",\n  \"notes\": \"Workflow automated check-in\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/attendances/check-in",
          "host": ["{{baseUrl}}"],
          "path": ["attendances", "check-in"]
        }
      }
    },
    {
      "name": "5. Get Event Analytics",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Analytics retrieved', function () {",
              "    pm.expect(pm.response.code).to.equal(200);",
              "});",
              "",
              "if (pm.response.code === 200) {",
              "    const data = pm.response.json();",
              "    console.log('✅ Event analytics retrieved');",
              "    console.log('📊 Analytics Summary:');",
              "    if (data.data) {",
              "        console.log('- Total Participants: ' + (data.data.totalParticipants || 0));",
              "        console.log('- Attendance Rate: ' + (data.data.attendanceRate || 0) + '%');",
              "    }",
              "    ",
              "    setTimeout(() => {",
              "        postman.setNextRequest('6. Workflow Summary');",
              "    }, 500);",
              "} else {",
              "    console.log('⚠️ Analytics retrieval failed');",
              "    setTimeout(() => {",
              "        postman.setNextRequest('6. Workflow Summary');",
              "    }, 500);",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/events/{{eventId}}/analytics",
          "host": ["{{baseUrl}}"],
          "path": ["events", "{{eventId}}", "analytics"]
        }
      }
    },
    {
      "name": "6. Workflow Summary",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "console.log('🎉 EVENT MANAGEMENT WORKFLOW COMPLETE! 🎉');",
              "console.log('');",
              "console.log('📋 Workflow Results:');",
              "console.log('✅ Event ID: ' + pm.globals.get('eventId'));",
              "console.log('✅ QR Code: ' + (pm.globals.get('qrCodeData') ? 'Generated' : 'Failed'));",
              "console.log('✅ Attendance ID: ' + pm.globals.get('attendanceId'));",
              "console.log('✅ Analytics: Retrieved');",
              "console.log('');",
              "console.log('🔗 Next Steps:');",
              "console.log('- Use eventId to test other event endpoints');",
              "console.log('- Use attendanceId to test attendance management');",
              "console.log('- Generate reports using the event data');",
              "",
              "pm.test('Event workflow completed', function () {",
              "    pm.expect(pm.globals.get('eventId')).to.not.be.undefined;",
              "});",
              "",
              "postman.setNextRequest(null);"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/events/{{eventId}}",
          "host": ["{{baseUrl}}"],
          "path": ["events", "{{eventId}}"]
        }
      }
    }
  ]
}