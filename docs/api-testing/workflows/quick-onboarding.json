{
  "info": {
    "name": "Quick Onboarding Workflow",
    "description": "Fast user onboarding: Register → Login → Create Tenant. Perfect for testing basic user setup flow.",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{accessToken}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Initialize onboarding data",
          "if (!pm.globals.get('onboardingId') || pm.info.requestName.includes('Step 1')) {",
          "    const timestamp = Date.now();",
          "    const onboardingId = 'onboard_' + timestamp;",
          "    pm.globals.set('onboardingId', onboardingId);",
          "    pm.globals.set('testEmail', `onboard${timestamp}@example.com`);",
          "    pm.globals.set('organizationName', `Onboard Org ${timestamp}`);",
          "    console.log('🚀 Starting Quick Onboarding:', onboardingId);",
          "}",
          "",
          "console.log('📍 Current Step:', pm.info.requestName);"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "{{baseUrl}}",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "🚀 Step 1: Register User",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "console.log('📝 Executing: User Registration');",
              "",
              "if (pm.response.code === 201) {",
              "    const data = pm.response.json();",
              "    ",
              "    pm.globals.set('userId', data.data.user.id);",
              "    pm.globals.set('userEmail', data.data.user.email);",
              "    ",
              "    pm.test('✅ User registered successfully', () => {",
              "        pm.expect(data.success).to.be.true;",
              "        pm.expect(data.data.user.id).to.be.a('string');",
              "    });",
              "    ",
              "    console.log('✅ Registration complete. Proceeding to login...');",
              "    postman.setNextRequest('🔐 Step 2: Login User');",
              "} else {",
              "    pm.test('❌ Registration failed', () => {",
              "        pm.expect.fail(`Registration failed: ${pm.response.code}`);",
              "    });",
              "    postman.setNextRequest(null);",
              "}"
            ]
          }
        }
      ],
      "request": {
        "auth": { "type": "noauth" },
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\\n  \"email\": \"{{testEmail}}\",\\n  \"password\": \"{{testPassword}}\",\\n  \"firstName\": \"{{firstName}}\",\\n  \"lastName\": \"{{lastName}}\",\\n  \"organizationName\": \"{{organizationName}}\"\\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/auth/register",
          "host": ["{{baseUrl}}"],
          "path": ["auth", "register"]
        }
      }
    },
    {
      "name": "🔐 Step 2: Login User",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "console.log('🔐 Executing: User Login');",
              "",
              "if (pm.response.code === 200) {",
              "    const data = pm.response.json();",
              "    ",
              "    pm.globals.set('accessToken', data.accessToken);",
              "    pm.globals.set('refreshToken', data.refreshToken);",
              "    pm.globals.set('tokenExpiry', new Date().getTime() + (data.expiresIn * 1000));",
              "    ",
              "    pm.test('✅ Login successful', () => {",
              "        pm.expect(data.accessToken).to.be.a('string');",
              "        pm.expect(data.user.id).to.equal(pm.globals.get('userId'));",
              "    });",
              "    ",
              "    console.log('✅ Login complete. Proceeding to tenant setup...');",
              "    postman.setNextRequest('🏢 Step 3: Create Tenant');",
              "} else {",
              "    pm.test('❌ Login failed', () => {",
              "        pm.expect.fail(`Login failed: ${pm.response.code}`);",
              "    });",
              "    postman.setNextRequest(null);",
              "}"
            ]
          }
        }
      ],
      "request": {
        "auth": { "type": "noauth" },
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\\n  \"email\": \"{{testEmail}}\",\\n  \"password\": \"{{testPassword}}\",\\n  \"rememberMe\": false\\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/auth/login",
          "host": ["{{baseUrl}}"],
          "path": ["auth", "login"]
        }
      }
    },
    {
      "name": "🏢 Step 3: Create Tenant",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "console.log('🏢 Executing: Tenant Creation');",
              "",
              "if (pm.response.code === 201) {",
              "    const data = pm.response.json();",
              "    ",
              "    pm.globals.set('tenantId', data.data.tenant.id);",
              "    pm.globals.set('organizationId', data.data.tenant.id);",
              "    ",
              "    pm.test('✅ Tenant created successfully', () => {",
              "        pm.expect(data.data.tenant.id).to.be.a('string');",
              "        pm.expect(data.data.tenant.name).to.equal(pm.globals.get('organizationName'));",
              "    });",
              "    ",
              "    console.log('✅ Tenant created successfully!');",
              "    console.log('🎉 Quick Onboarding completed!');",
              "    console.log('');",
              "    console.log('📋 Onboarding Summary:');",
              "    console.log('   🆔 Onboarding ID:', pm.globals.get('onboardingId'));",
              "    console.log('   👤 User ID:', pm.globals.get('userId'));",
              "    console.log('   📧 Email:', pm.globals.get('testEmail'));",
              "    console.log('   🏢 Tenant ID:', pm.globals.get('tenantId'));",
              "    console.log('   🏢 Organization:', pm.globals.get('organizationName'));",
              "    console.log('');",
              "    console.log('✅ User is now ready to use the platform!');",
              "    ",
              "    postman.setNextRequest(null);",
              "} else {",
              "    pm.test('❌ Tenant creation failed', () => {",
              "        pm.expect.fail(`Tenant creation failed: ${pm.response.code}`);",
              "    });",
              "    postman.setNextRequest(null);",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\\n  \"name\": \"{{organizationName}}\",\\n  \"slug\": \"onboard-org-{{onboardingId}}\",\\n  \"industry\": \"technology\",\\n  \"size\": \"1-10\",\\n  \"planId\": \"basic\",\\n  \"settings\": {\\n    \"timezone\": \"Europe/Paris\",\\n    \"locale\": \"en\",\\n    \"currency\": \"EUR\"\\n  }\\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/tenants/register",
          "host": ["{{baseUrl}}"],
          "path": ["tenants", "register"]
        }
      }
    }
  ]
}