{
  "name": "🎯 Complete User Onboarding Workflow",
  "description": "Automated workflow: Register → Login → Create Tenant → Setup Profile → Create Event → Check-in",
  "item": [
    {
      "name": "1. Register New User",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Registration successful', function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
              "});",
              "",
              "if (pm.response.code === 201 || pm.response.code === 200) {",
              "    const data = pm.response.json();",
              "    if (data.accessToken) {",
              "        pm.globals.set('accessToken', data.accessToken);",
              "        pm.globals.set('refreshToken', data.refreshToken);",
              "        pm.globals.set('tokenExpiry', new Date().getTime() + (data.expiresIn * 1000));",
              "        pm.globals.set('userId', data.user.id);",
              "        console.log('✅ Step 1 Complete: User registered and logged in');",
              "    }",
              "    ",
              "    // Auto-continue to next request",
              "    setTimeout(() => {",
              "        postman.setNextRequest('2. Create Organization/Tenant');",
              "    }, 1000);",
              "} else {",
              "    console.log('❌ Registration failed, stopping workflow');",
              "    postman.setNextRequest(null);",
              "}"
            ]
          }
        }
      ],
      "request": {
        "auth": { "type": "noauth" },
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"{{workflowEmail}}\",\n  \"password\": \"{{workflowPassword}}\",\n  \"firstName\": \"Workflow\",\n  \"lastName\": \"User\",\n  \"organizationName\": \"Workflow Test Org\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/auth/register",
          "host": ["{{baseUrl}}"],
          "path": ["auth", "register"]
        }
      }
    },
    {
      "name": "2. Create Organization/Tenant",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Tenant creation successful', function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
              "});",
              "",
              "if (pm.response.code === 201 || pm.response.code === 200) {",
              "    const data = pm.response.json();",
              "    if (data.data && data.data.tenant) {",
              "        pm.globals.set('tenantId', data.data.tenant.id);",
              "        pm.globals.set('organizationId', data.data.tenant.id);",
              "        console.log('✅ Step 2 Complete: Tenant created with ID: ' + data.data.tenant.id);",
              "    }",
              "    ",
              "    setTimeout(() => {",
              "        postman.setNextRequest('3. Update User Profile');",
              "    }, 1000);",
              "} else {",
              "    console.log('❌ Tenant creation failed, stopping workflow');",
              "    postman.setNextRequest(null);",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"Workflow Test Organization\",\n  \"slug\": \"workflow-test-{{$randomInt}}\",\n  \"industry\": \"technology\",\n  \"size\": \"10-50\",\n  \"planId\": \"basic\",\n  \"settings\": {\n    \"timezone\": \"Europe/Paris\",\n    \"locale\": \"en\",\n    \"currency\": \"USD\"\n  }\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/tenants/register",
          "host": ["{{baseUrl}}"],
          "path": ["tenants", "register"]
        }
      }
    },
    {
      "name": "3. Update User Profile",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Profile update successful', function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
              "});",
              "",
              "if (pm.response.code === 200) {",
              "    console.log('✅ Step 3 Complete: User profile updated');",
              "    setTimeout(() => {",
              "        postman.setNextRequest('4. Create First Event');",
              "    }, 1000);",
              "} else {",
              "    console.log('⚠️ Profile update failed, continuing anyway');",
              "    setTimeout(() => {",
              "        postman.setNextRequest('4. Create First Event');",
              "    }, 1000);",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"firstName\": \"Workflow\",\n  \"lastName\": \"TestUser\",\n  \"phone\": \"+1234567890\",\n  \"preferences\": {\n    \"language\": \"en\",\n    \"timezone\": \"America/New_York\",\n    \"notifications\": {\n      \"email\": true,\n      \"sms\": false,\n      \"push\": true\n    }\n  }\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/users/me",
          "host": ["{{baseUrl}}"],
          "path": ["users", "me"]
        }
      }
    }
  ]
}    ,{

      "name": "4. Create First Event",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Event creation successful', function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
              "});",
              "",
              "if (pm.response.code === 201 || pm.response.code === 200) {",
              "    const data = pm.response.json();",
              "    if (data.data && data.data.id) {",
              "        pm.globals.set('eventId', data.data.id);",
              "        console.log('✅ Step 4 Complete: Event created with ID: ' + data.data.id);",
              "    }",
              "    ",
              "    setTimeout(() => {",
              "        postman.setNextRequest('5. Generate QR Code for Event');",
              "    }, 1000);",
              "} else {",
              "    console.log('❌ Event creation failed, stopping workflow');",
              "    postman.setNextRequest(null);",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"title\": \"Workflow Test Meeting\",\n  \"description\": \"Automated workflow test event\",\n  \"type\": \"meeting\",\n  \"startDateTime\": \"{{$isoTimestamp}}\",\n  \"endDateTime\": \"2024-12-31T15:00:00Z\",\n  \"location\": {\n    \"name\": \"Virtual Meeting Room\",\n    \"address\": \"Online\",\n    \"coordinates\": {\n      \"latitude\": 40.7128,\n      \"longitude\": -74.0060\n    }\n  },\n  \"participants\": [],\n  \"isPrivate\": false,\n  \"tags\": [\"workflow\", \"test\", \"automated\"]\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/events",
          "host": ["{{baseUrl}}"],
          "path": ["events"]
        }
      }
    },
    {
      "name": "5. Generate QR Code for Event",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('QR Code generation successful', function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
              "});",
              "",
              "if (pm.response.code === 201 || pm.response.code === 200) {",
              "    const data = pm.response.json();",
              "    if (data.data && data.data.qrCodeData) {",
              "        pm.globals.set('qrCodeData', data.data.qrCodeData);",
              "        console.log('✅ Step 5 Complete: QR Code generated');",
              "    }",
              "    ",
              "    setTimeout(() => {",
              "        postman.setNextRequest('6. Check-in to Event');",
              "    }, 1000);",
              "} else {",
              "    console.log('⚠️ QR Code generation failed, continuing to check-in anyway');",
              "    setTimeout(() => {",
              "        postman.setNextRequest('6. Check-in to Event');",
              "    }, 1000);",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"expiresAt\": \"2024-12-31T23:59:59Z\",\n  \"maxUsage\": 100,\n  \"maxScansPerUser\": 1\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/qr-codes/events/{{eventId}}/generate",
          "host": ["{{baseUrl}}"],
          "path": ["qr-codes", "events", "{{eventId}}", "generate"]
        }
      }
    },
    {
      "name": "6. Check-in to Event",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Check-in successful', function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
              "});",
              "",
              "if (pm.response.code === 201 || pm.response.code === 200) {",
              "    const data = pm.response.json();",
              "    if (data.data && data.data.id) {",
              "        pm.globals.set('attendanceId', data.data.id);",
              "        console.log('✅ Step 6 Complete: Successfully checked in to event');",
              "    }",
              "    ",
              "    setTimeout(() => {",
              "        postman.setNextRequest('7. Generate Attendance Report');",
              "    }, 1000);",
              "} else {",
              "    console.log('❌ Check-in failed, stopping workflow');",
              "    postman.setNextRequest(null);",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"eventId\": \"{{eventId}}\",\n  \"method\": \"manual\",\n  \"location\": {\n    \"latitude\": 40.7128,\n    \"longitude\": -74.0060,\n    \"accuracy\": 10\n  },\n  \"notes\": \"Automated workflow check-in\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/attendances/check-in",
          "host": ["{{baseUrl}}"],
          "path": ["attendances", "check-in"]
        }
      }
    },
    {
      "name": "7. Generate Attendance Report",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Report generation successful', function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
              "});",
              "",
              "if (pm.response.code === 201 || pm.response.code === 200) {",
              "    const data = pm.response.json();",
              "    if (data.data && data.data.id) {",
              "        pm.globals.set('reportId', data.data.id);",
              "        console.log('✅ Step 7 Complete: Attendance report generated');",
              "    }",
              "    ",
              "    setTimeout(() => {",
              "        postman.setNextRequest('8. Workflow Complete - Summary');",
              "    }, 1000);",
              "} else {",
              "    console.log('⚠️ Report generation failed, completing workflow anyway');",
              "    setTimeout(() => {",
              "        postman.setNextRequest('8. Workflow Complete - Summary');",
              "    }, 1000);",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"type\": \"event_detail\",\n  \"format\": \"json\",\n  \"filters\": {\n    \"eventId\": \"{{eventId}}\"\n  },\n  \"options\": {\n    \"includeCharts\": false,\n    \"includeInsights\": true,\n    \"language\": \"en\"\n  }\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/reports/generate",
          "host": ["{{baseUrl}}"],
          "path": ["reports", "generate"]
        }
      }
    },
    {
      "name": "8. Workflow Complete - Summary",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "console.log('🎉 WORKFLOW COMPLETE! 🎉');",
              "console.log('');",
              "console.log('📊 Workflow Summary:');",
              "console.log('✅ User registered: ' + pm.globals.get('workflowEmail'));",
              "console.log('✅ Tenant created: ' + pm.globals.get('tenantId'));",
              "console.log('✅ Event created: ' + pm.globals.get('eventId'));",
              "console.log('✅ QR Code generated: ' + (pm.globals.get('qrCodeData') ? 'Yes' : 'No'));",
              "console.log('✅ Attendance recorded: ' + pm.globals.get('attendanceId'));",
              "console.log('✅ Report generated: ' + pm.globals.get('reportId'));",
              "console.log('');",
              "console.log('🔗 Available Variables:');",
              "console.log('- userId: ' + pm.globals.get('userId'));",
              "console.log('- tenantId: ' + pm.globals.get('tenantId'));",
              "console.log('- eventId: ' + pm.globals.get('eventId'));",
              "console.log('- attendanceId: ' + pm.globals.get('attendanceId'));",
              "console.log('- reportId: ' + pm.globals.get('reportId'));",
              "console.log('');",
              "console.log('🚀 You can now use these IDs to test other API endpoints!');",
              "",
              "pm.test('Workflow completed successfully', function () {",
              "    pm.expect(pm.globals.get('userId')).to.not.be.undefined;",
              "    pm.expect(pm.globals.get('tenantId')).to.not.be.undefined;",
              "    pm.expect(pm.globals.get('eventId')).to.not.be.undefined;",
              "});",
              "",
              "// Stop the workflow",
              "postman.setNextRequest(null);"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/me",
          "host": ["{{baseUrl}}"],
          "path": ["users", "me"]
        }
      }
    }