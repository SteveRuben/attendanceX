{
  "info": {
    "name": "Event Management Workflow",
    "description": "Event-focused workflow: Login ‚Üí Create Event ‚Üí Generate QR ‚Üí Manage Attendance. Assumes user already exists.",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{accessToken}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Initialize event management data",
          "if (!pm.globals.get('eventWorkflowId') || pm.info.requestName.includes('Step 1')) {",
          "    const timestamp = Date.now();",
          "    const eventWorkflowId = 'event_' + timestamp;",
          "    pm.globals.set('eventWorkflowId', eventWorkflowId);",
          "    console.log('üöÄ Starting Event Management Workflow:', eventWorkflowId);",
          "    ",
          "    // Use existing test credentials or set defaults",
          "    if (!pm.globals.get('testEmail')) {",
          "        pm.globals.set('testEmail', 'existing-user@example.com');",
          "        pm.globals.set('testPassword', 'ExistingPassword123!');",
          "    }",
          "}",
          "",
          "console.log('üìç Current Step:', pm.info.requestName);"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "{{baseUrl}}",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üîê Step 1: Login User",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "console.log('üîê Executing: User Login for Event Management');",
              "",
              "if (pm.response.code === 200) {",
              "    const data = pm.response.json();",
              "    ",
              "    pm.globals.set('accessToken', data.accessToken);",
              "    pm.globals.set('refreshToken', data.refreshToken);",
              "    pm.globals.set('tokenExpiry', new Date().getTime() + (data.expiresIn * 1000));",
              "    pm.globals.set('userId', data.user.id);",
              "    ",
              "    pm.test('‚úÖ Login successful', () => {",
              "        pm.expect(data.accessToken).to.be.a('string');",
              "        pm.expect(data.user.id).to.be.a('string');",
              "    });",
              "    ",
              "    console.log('‚úÖ Login complete. Proceeding to event creation...');",
              "    postman.setNextRequest('üìÖ Step 2: Create Event');",
              "} else {",
              "    pm.test('‚ùå Login failed', () => {",
              "        pm.expect.fail(`Login failed: ${pm.response.code}`);",
              "    });",
              "    console.log('‚ùå Login failed. Please check credentials or run onboarding first.');",
              "    postman.setNextRequest(null);",
              "}"
            ]
          }
        }
      ],
      "request": {
        "auth": { "type": "noauth" },
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\\n  \"email\": \"{{testEmail}}\",\\n  \"password\": \"{{testPassword}}\",\\n  \"rememberMe\": false\\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/auth/login",
          "host": ["{{baseUrl}}"],
          "path": ["auth", "login"]
        }
      }
    },
    {
      "name": "üìÖ Step 2: Create Event",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "console.log('üìÖ Executing: Event Creation');",
              "",
              "if (pm.response.code === 201) {",
              "    const data = pm.response.json();",
              "    ",
              "    pm.globals.set('eventId', data.data.id);",
              "    ",
              "    pm.test('‚úÖ Event created successfully', () => {",
              "        pm.expect(data.data.id).to.be.a('string');",
              "        pm.expect(data.data.title).to.include('Event Management Test');",
              "    });",
              "    ",
              "    console.log('‚úÖ Event created. ID:', data.data.id);",
              "    console.log('‚û°Ô∏è  Proceeding to QR code generation...');",
              "    postman.setNextRequest('üì± Step 3: Generate QR Code');",
              "} else {",
              "    pm.test('‚ùå Event creation failed', () => {",
              "        pm.expect.fail(`Event creation failed: ${pm.response.code}`);",
              "    });",
              "    postman.setNextRequest(null);",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\\n  \"title\": \"Event Management Test - {{eventWorkflowId}}\",\\n  \"description\": \"Test event for event management workflow\",\\n  \"type\": \"conference\",\\n  \"startDateTime\": \"2024-12-25T14:00:00Z\",\\n  \"endDateTime\": \"2024-12-25T17:00:00Z\",\\n  \"location\": {\\n    \"name\": \"Event Management Hall\",\\n    \"address\": \"456 Event Street\",\\n    \"coordinates\": {\\n      \"latitude\": 48.8566,\\n      \"longitude\": 2.3522\\n    }\\n  },\\n  \"participants\": [],\\n  \"isPrivate\": false,\\n  \"tags\": [\"management\", \"workflow\", \"test\"]\\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/events",
          "host": ["{{baseUrl}}"],
          "path": ["events"]
        }
      }
    },
    {
      "name": "üì± Step 3: Generate QR Code",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "console.log('üì± Executing: QR Code Generation');",
              "",
              "if (pm.response.code === 201) {",
              "    const data = pm.response.json();",
              "    ",
              "    pm.globals.set('qrCodeData', data.data.qrCodeData);",
              "    ",
              "    pm.test('‚úÖ QR Code generated successfully', () => {",
              "        pm.expect(data.data.qrCodeData).to.be.a('string');",
              "    });",
              "    ",
              "    console.log('‚úÖ QR Code generated successfully.');",
              "    console.log('‚û°Ô∏è  Proceeding to attendance check-in...');",
              "    postman.setNextRequest('‚úÖ Step 4: Check In Attendance');",
              "} else {",
              "    pm.test('‚ùå QR Code generation failed', () => {",
              "        pm.expect.fail(`QR Code generation failed: ${pm.response.code}`);",
              "    });",
              "    postman.setNextRequest(null);",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\\n  \"expiresAt\": \"2024-12-31T23:59:59Z\",\\n  \"maxUsage\": 50,\\n  \"timeWindow\": {\\n    \"start\": \"2024-12-25T12:00:00Z\",\\n    \"end\": \"2024-12-25T19:00:00Z\"\\n  },\\n  \"locationRadius\": {\\n    \"center\": {\\n      \"latitude\": 48.8566,\\n      \"longitude\": 2.3522\\n    },\\n    \"radius\": 50\\n  },\\n  \"maxScansPerUser\": 1\\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/qr-codes/events/{{eventId}}/generate",
          "host": ["{{baseUrl}}"],
          "path": ["qr-codes", "events", "{{eventId}}", "generate"]
        }
      }
    },
    {
      "name": "‚úÖ Step 4: Check In Attendance",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "console.log('‚úÖ Executing: Attendance Check-in');",
              "",
              "if (pm.response.code === 201) {",
              "    const data = pm.response.json();",
              "    ",
              "    pm.globals.set('attendanceId', data.data.id);",
              "    ",
              "    pm.test('‚úÖ Attendance recorded successfully', () => {",
              "        pm.expect(data.data.id).to.be.a('string');",
              "        pm.expect(data.data.status).to.equal('present');",
              "    });",
              "    ",
              "    console.log('‚úÖ Attendance recorded. ID:', data.data.id);",
              "    console.log('‚û°Ô∏è  Proceeding to attendance validation...');",
              "    postman.setNextRequest('üîç Step 5: Validate Attendance');",
              "} else {",
              "    pm.test('‚ùå Attendance check-in failed', () => {",
              "        pm.expect.fail(`Attendance check-in failed: ${pm.response.code}`);",
              "    });",
              "    postman.setNextRequest(null);",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\\n  \"eventId\": \"{{eventId}}\",\\n  \"method\": \"qr_code\",\\n  \"location\": {\\n    \"latitude\": 48.8566,\\n    \"longitude\": 2.3522,\\n    \"accuracy\": 5\\n  },\\n  \"qrCodeData\": \"{{qrCodeData}}\",\\n  \"notes\": \"Event management workflow check-in\"\\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/attendances/check-in",
          "host": ["{{baseUrl}}"],
          "path": ["attendances", "check-in"]
        }
      }
    },
    {
      "name": "üîç Step 5: Validate Attendance",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "console.log('üîç Executing: Attendance Validation');",
              "",
              "if (pm.response.code === 200) {",
              "    const data = pm.response.json();",
              "    ",
              "    pm.test('‚úÖ Attendance validation successful', () => {",
              "        pm.expect(data.data).to.be.an('array');",
              "        pm.expect(data.data.length).to.be.greaterThan(0);",
              "        ",
              "        // Find our attendance record",
              "        const ourAttendance = data.data.find(att => att.id === pm.globals.get('attendanceId'));",
              "        pm.expect(ourAttendance).to.not.be.undefined;",
              "        pm.expect(ourAttendance.status).to.equal('present');",
              "    });",
              "    ",
              "    console.log('‚úÖ Attendance validated successfully!');",
              "    console.log('üéâ Event Management Workflow completed!');",
              "    console.log('');",
              "    console.log('üìã Event Management Summary:');",
              "    console.log('   üÜî Workflow ID:', pm.globals.get('eventWorkflowId'));",
              "    console.log('   üë§ User ID:', pm.globals.get('userId'));",
              "    console.log('   üìÖ Event ID:', pm.globals.get('eventId'));",
              "    console.log('   üì± QR Code Generated: ‚úÖ');",
              "    console.log('   ‚úÖ Attendance ID:', pm.globals.get('attendanceId'));",
              "    console.log('   üîç Validation: ‚úÖ');",
              "    console.log('');",
              "    console.log('üéØ Event is ready for attendees!');",
              "    ",
              "    postman.setNextRequest(null);",
              "} else {",
              "    pm.test('‚ùå Attendance validation failed', () => {",
              "        pm.expect.fail(`Attendance validation failed: ${pm.response.code}`);",
              "    });",
              "    postman.setNextRequest(null);",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/attendances/events/{{eventId}}",
          "host": ["{{baseUrl}}"],
          "path": ["attendances", "events", "{{eventId}}"]
        }
      }
    }
  ]
}