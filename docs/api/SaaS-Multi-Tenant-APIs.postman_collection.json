{
  "info": {
    "name": "SaaS Multi-Tenant APIs",
    "description": "Collection compl√®te pour tester les APIs SaaS multi-tenant du syst√®me de gestion de pr√©sence",
    "version": "3.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{jwt_token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-inject tenant context",
          "const tenantId = pm.environment.get('tenant_id');",
          "if (tenantId && !pm.request.headers.has('X-Tenant-ID')) {",
          "  pm.request.headers.add({",
          "    key: 'X-Tenant-ID',",
          "    value: tenantId",
          "  });",
          "}",
          "",
          "// Auto-refresh token if expired",
          "const token = pm.environment.get('jwt_token');",
          "if (token) {",
          "  try {",
          "    const payload = JSON.parse(atob(token.split('.')[1]));",
          "    const now = Math.floor(Date.now() / 1000);",
          "    if (payload.exp < now) {",
          "      console.log('Token expired, attempting refresh...');",
          "    }",
          "  } catch (e) {",
          "    console.log('Invalid token format');",
          "  }",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:5001/api/v1",
      "type": "string"
    },
    {
      "key": "jwt_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "refresh_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "tenant_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "organization_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "subscription_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "event_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üè¢ Tenant Management",
      "description": "APIs pour la gestion des tenants (organisations SaaS)",
      "item": [
        {
          "name": "Register New Tenant",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Tenant created successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData.data).to.have.property('tenant');",
                  "    pm.expect(jsonData.data).to.have.property('onboardingSession');",
                  "});",
                  "",
                  "// Save tenant info for subsequent requests",
                  "if (pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set('tenant_id', jsonData.data.tenant.id);",
                  "    pm.environment.set('onboarding_session_id', jsonData.data.onboardingSession.id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"{{$randomCompanyName}}\",\n  \"slug\": \"{{$randomWord}}-{{$randomInt}}\",\n  \"adminUser\": {\n    \"email\": \"{{$randomEmail}}\",\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"password\": \"SecurePassword123!\"\n  },\n  \"planId\": \"basic\",\n  \"settings\": {\n    \"timezone\": \"Europe/Paris\",\n    \"locale\": \"fr\",\n    \"currency\": \"EUR\"\n  },\n  \"billingInfo\": {\n    \"companyName\": \"{{$randomCompanyName}}\",\n    \"email\": \"billing@{{$randomDomainName}}\",\n    \"address\": {\n      \"street\": \"{{$randomStreetAddress}}\",\n      \"city\": \"{{$randomCity}}\",\n      \"postalCode\": \"{{$randomInt}}\",\n      \"country\": \"FR\"\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/tenants/register",
              "host": ["{{base_url}}"],
              "path": ["tenants", "register"]
            }
          }
        },
        {
          "name": "Complete Tenant Onboarding",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Onboarding completed', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData.data.tenant.status).to.equal('active');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"sessionId\": \"{{onboarding_session_id}}\",\n  \"setupData\": {\n    \"branding\": {\n      \"primaryColor\": \"#007bff\",\n      \"secondaryColor\": \"#6c757d\",\n      \"logoUrl\": \"https://example.com/logo.png\"\n    },\n    \"features\": {\n      \"advancedReporting\": false,\n      \"apiAccess\": true,\n      \"customBranding\": true,\n      \"webhooks\": false\n    },\n    \"generateDemoData\": true,\n    \"demoTemplate\": \"corporate\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/tenants/onboarding/complete",
              "host": ["{{base_url}}"],
              "path": ["tenants", "onboarding", "complete"]
            }
          }
        },
        {
          "name": "Get Tenant Info",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/tenants/{{tenant_id}}",
              "host": ["{{base_url}}"],
              "path": ["tenants", "{{tenant_id}}"]
            }
          }
        },
        {
          "name": "Update Tenant Settings",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"settings\": {\n    \"timezone\": \"Europe/London\",\n    \"locale\": \"en\",\n    \"currency\": \"GBP\"\n  },\n  \"branding\": {\n    \"primaryColor\": \"#28a745\",\n    \"secondaryColor\": \"#6c757d\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/tenants/{{tenant_id}}",
              "host": ["{{base_url}}"],
              "path": ["tenants", "{{tenant_id}}"]
            }
          }
        },
        {
          "name": "Get Tenant Usage Metrics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/tenants/{{tenant_id}}/usage?period=current_month",
              "host": ["{{base_url}}"],
              "path": ["tenants", "{{tenant_id}}", "usage"],
              "query": [
                {
                  "key": "period",
                  "value": "current_month"
                }
              ]
            }
          }
        },
        {
          "name": "Switch Tenant Context",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Update tenant context",
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set('tenant_id', jsonData.data.tenantContext.tenantId);",
                  "    pm.environment.set('jwt_token', jsonData.data.token);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"tenantId\": \"{{tenant_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/tenants/switch-context",
              "host": ["{{base_url}}"],
              "path": ["tenants", "switch-context"]
            }
          }
        }
      ]
    },
    {
      "name": "üí≥ Subscription Management",
      "description": "APIs pour la gestion des abonnements et facturation",
      "item": [
        {
          "name": "Get Available Plans",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/subscriptions/plans",
              "host": ["{{base_url}}"],
              "path": ["subscriptions", "plans"]
            }
          }
        },
        {
          "name": "Create Subscription",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "// Save subscription ID",
                  "if (pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set('subscription_id', jsonData.data.subscription.id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"planId\": \"professional\",\n  \"billingCycle\": \"monthly\",\n  \"paymentMethodId\": \"pm_test_card_visa\",\n  \"discountCode\": \"WELCOME20\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/subscriptions",
              "host": ["{{base_url}}"],
              "path": ["subscriptions"]
            }
          }
        },
        {
          "name": "Get Subscription Details",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/subscriptions/{{subscription_id}}",
              "host": ["{{base_url}}"],
              "path": ["subscriptions", "{{subscription_id}}"]
            }
          }
        },
        {
          "name": "Update Subscription Plan",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"planId\": \"enterprise\",\n  \"prorationBehavior\": \"create_prorations\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/subscriptions/{{subscription_id}}/upgrade",
              "host": ["{{base_url}}"],
              "path": ["subscriptions", "{{subscription_id}}", "upgrade"]
            }
          }
        },
        {
          "name": "Cancel Subscription",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"cancelAtPeriodEnd\": true,\n  \"reason\": \"switching_service\",\n  \"feedback\": \"Moving to a different solution\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/subscriptions/{{subscription_id}}/cancel",
              "host": ["{{base_url}}"],
              "path": ["subscriptions", "{{subscription_id}}", "cancel"]
            }
          }
        },
        {
          "name": "Get Usage Report",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/subscriptions/{{subscription_id}}/usage?period=current_month",
              "host": ["{{base_url}}"],
              "path": ["subscriptions", "{{subscription_id}}", "usage"],
              "query": [
                {
                  "key": "period",
                  "value": "current_month"
                }
              ]
            }
          }
        },
        {
          "name": "Get Invoices",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/billing/invoices?limit=10&status=paid",
              "host": ["{{base_url}}"],
              "path": ["billing", "invoices"],
              "query": [
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "status",
                  "value": "paid"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "üîê Multi-Tenant Authentication",
      "description": "APIs d'authentification avec support multi-tenant",
      "item": [
        {
          "name": "Login with Tenant",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Login successful with tenant context', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData.data).to.have.property('token');",
                  "    pm.expect(jsonData.data).to.have.property('tenantContext');",
                  "});",
                  "",
                  "// Save authentication data",
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set('jwt_token', jsonData.data.token);",
                  "    pm.environment.set('refresh_token', jsonData.data.refreshToken);",
                  "    pm.environment.set('user_id', jsonData.data.user.id);",
                  "    pm.environment.set('tenant_id', jsonData.data.tenantContext.tenantId);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@example.com\",\n  \"password\": \"SecurePassword123!\",\n  \"tenantId\": \"{{tenant_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            }
          }
        },
        {
          "name": "Get User Tenants",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/auth/tenants",
              "host": ["{{base_url}}"],
              "path": ["auth", "tenants"]
            }
          }
        },
        {
          "name": "Invite User to Tenant",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"role\": \"member\",\n  \"permissions\": [\"read_events\", \"create_events\"],\n  \"message\": \"Welcome to our organization!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/invite",
              "host": ["{{base_url}}"],
              "path": ["auth", "invite"]
            }
          }
        },
        {
          "name": "Accept Tenant Invitation",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"invitation_token_here\",\n  \"password\": \"NewUserPassword123!\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/accept-invitation",
              "host": ["{{base_url}}"],
              "path": ["auth", "accept-invitation"]
            }
          }
        }
      ]
    },
    {
      "name": "üë• Multi-Tenant Users",
      "description": "Gestion des utilisateurs avec isolation par tenant",
      "item": [
        {
          "name": "Get Tenant Users",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/users?page=1&limit=20&role=member",
              "host": ["{{base_url}}"],
              "path": ["users"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "20"
                },
                {
                  "key": "role",
                  "value": "member"
                }
              ]
            }
          }
        },
        {
          "name": "Create Tenant User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('User created with tenant context', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.user.tenantId).to.equal(pm.environment.get('tenant_id'));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\",\n  \"role\": \"member\",\n  \"permissions\": [\"read_events\", \"create_events\"],\n  \"sendInvitation\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/users",
              "host": ["{{base_url}}"],
              "path": ["users"]
            }
          }
        },
        {
          "name": "Update User Permissions",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"role\": \"admin\",\n  \"permissions\": [\"read_events\", \"create_events\", \"delete_events\", \"manage_users\"]\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}/permissions",
              "host": ["{{base_url}}"],
              "path": ["users", "{{user_id}}", "permissions"]
            }
          }
        }
      ]
    },
    {
      "name": "üìÖ Multi-Tenant Events",
      "description": "Gestion des √©v√©nements avec isolation par tenant",
      "item": [
        {
          "name": "Get Tenant Events",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('All events belong to current tenant', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const currentTenantId = pm.environment.get('tenant_id');",
                  "    jsonData.data.events.forEach(event => {",
                  "        pm.expect(event.tenantId).to.equal(currentTenantId);",
                  "    });",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/events?page=1&limit=20&type=meeting",
              "host": ["{{base_url}}"],
              "path": ["events"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "20"
                },
                {
                  "key": "type",
                  "value": "meeting"
                }
              ]
            }
          }
        },
        {
          "name": "Create Tenant Event",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Event created with correct tenant', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.event.tenantId).to.equal(pm.environment.get('tenant_id'));",
                  "});",
                  "",
                  "// Save event ID",
                  "if (pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set('event_id', jsonData.data.event.id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Team Meeting - {{$randomWord}}\",\n  \"description\": \"Weekly team meeting for project updates\",\n  \"type\": \"meeting\",\n  \"startDateTime\": \"2024-12-20T09:00:00Z\",\n  \"endDateTime\": \"2024-12-20T10:00:00Z\",\n  \"timezone\": \"Europe/Paris\",\n  \"location\": {\n    \"type\": \"physical\",\n    \"name\": \"Conference Room A\",\n    \"address\": \"{{$randomStreetAddress}}\"\n  },\n  \"capacity\": 20,\n  \"attendanceSettings\": {\n    \"requireQRCode\": true,\n    \"requireGeolocation\": false,\n    \"allowLateCheckIn\": true,\n    \"lateCheckInGracePeriod\": 15\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/events",
              "host": ["{{base_url}}"],
              "path": ["events"]
            }
          }
        },
        {
          "name": "Check Feature Access - Advanced Reporting",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Feature access check works', function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (pm.response.code === 403) {",
                  "        pm.expect(jsonData.error.code).to.equal('FEATURE_NOT_AVAILABLE');",
                  "    } else {",
                  "        pm.expect(pm.response.code).to.equal(200);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/events/{{event_id}}/advanced-analytics",
              "host": ["{{base_url}}"],
              "path": ["events", "{{event_id}}", "advanced-analytics"]
            }
          }
        }
      ]
    },
    {
      "name": "üîî Multi-Tenant Notifications",
      "description": "Syst√®me de notifications avec branding par tenant",
      "item": [
        {
          "name": "Send Tenant-Branded Notification",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"event_reminder\",\n  \"title\": \"Event Reminder\",\n  \"message\": \"Don't forget about the meeting tomorrow\",\n  \"recipients\": [\"{{user_id}}\"],\n  \"channels\": [\"email\", \"push\"],\n  \"priority\": \"medium\",\n  \"data\": {\n    \"eventId\": \"{{event_id}}\"\n  },\n  \"useTenantBranding\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/notifications/send",
              "host": ["{{base_url}}"],
              "path": ["notifications", "send"]
            }
          }
        },
        {
          "name": "Get Tenant Notification Templates",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/notifications/templates?type=email",
              "host": ["{{base_url}}"],
              "path": ["notifications", "templates"],
              "query": [
                {
                  "key": "type",
                  "value": "email"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "üìä Multi-Tenant Analytics",
      "description": "Analytics et rapports isol√©s par tenant",
      "item": [
        {
          "name": "Get Tenant Dashboard",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/analytics/dashboard?period=last_30_days",
              "host": ["{{base_url}}"],
              "path": ["analytics", "dashboard"],
              "query": [
                {
                  "key": "period",
                  "value": "last_30_days"
                }
              ]
            }
          }
        },
        {
          "name": "Generate Tenant Report",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"attendance\",\n  \"period\": {\n    \"startDate\": \"2024-12-01\",\n    \"endDate\": \"2024-12-31\"\n  },\n  \"format\": \"pdf\",\n  \"includeTenantBranding\": true,\n  \"filters\": {\n    \"departments\": [],\n    \"users\": [],\n    \"events\": []\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/reports/generate",
              "host": ["{{base_url}}"],
              "path": ["reports", "generate"]
            }
          }
        }
      ]
    },
    {
      "name": "üîß Platform Admin APIs",
      "description": "APIs r√©serv√©es aux administrateurs de la plateforme",
      "item": [
        {
          "name": "Get All Tenants (Platform Admin)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Platform-Admin",
                "value": "true"
              }
            ],
            "url": {
              "raw": "{{base_url}}/platform/tenants?page=1&limit=50&status=active",
              "host": ["{{base_url}}"],
              "path": ["platform", "tenants"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "50"
                },
                {
                  "key": "status",
                  "value": "active"
                }
              ]
            }
          }
        },
        {
          "name": "Suspend Tenant (Platform Admin)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Platform-Admin",
                "value": "true"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reason\": \"payment_failure\",\n  \"notifyTenant\": true,\n  \"gracePeriodDays\": 7\n}"
            },
            "url": {
              "raw": "{{base_url}}/platform/tenants/{{tenant_id}}/suspend",
              "host": ["{{base_url}}"],
              "path": ["platform", "tenants", "{{tenant_id}}", "suspend"]
            }
          }
        },
        {
          "name": "Get Platform Metrics (Platform Admin)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Platform-Admin",
                "value": "true"
              }
            ],
            "url": {
              "raw": "{{base_url}}/platform/metrics?period=last_30_days&breakdown=by_plan",
              "host": ["{{base_url}}"],
              "path": ["platform", "metrics"],
              "query": [
                {
                  "key": "period",
                  "value": "last_30_days"
                },
                {
                  "key": "breakdown",
                  "value": "by_plan"
                }
              ]
            }
          }
        }
      ]
    }
  ]
}