import { Address, BaseEntity } from "./common.types";
import { UserRole } from "./role.types";


export enum UserStatus {
  ACTIVE = 'active',
  INACTIVE = 'inactive',
  SUSPENDED = 'suspended',
  PENDING = 'pending',
  DELETED = 'deleted',
  blocked = 'blocked',
  ARCHIVED = 'archived',
}

export interface UserPermissions {
  canCreateEvents: boolean;
  canManageUsers: boolean;
  canViewReports: boolean;
  canManageSettings: boolean;
  canSendNotifications: boolean;
  canExportData: boolean;
  canManageRoles: boolean;
  canAccessAnalytics: boolean;
  canModerateContent: boolean;
  canManageIntegrations: boolean;
  [key: string]: boolean; // Signature d'index pour permettre l'accès dynamique
}

export interface UserPreferences {
  emailNotifications: boolean;
  smsNotifications: boolean;
  pushNotifications: boolean;
  language: string;
  theme: 'light' | 'dark' | 'auto';
  timezone: string;
  dateFormat: string;
  timeFormat: '12h' | '24h';
  weekStartsOn: number; // 0 = Sunday, 1 = Monday
}

export interface UserProfile {
  bio?: string;
  department?: string;
  position?: string;
  employeeId?: string;
  hireDate?: Date;
  managerId?: string;
  skills?: string[];
  languages?: string[];
  emergencyContact?: {
    name: string;
    relationship: string;
    phone: string;
    email?: string;
  };
  address?: Address;
  preferences: UserPreferences;
}

export interface User extends BaseEntity {
  // Informations de base
  email: string;
  displayName: string;
  firstName: string;
  lastName: string;
  phoneNumber?: string;
  photoURL?: string;
  
  // Rôle et statut
  role: UserRole;
  status: UserStatus;
  permissions: UserPermissions;
  
  // Profil étendu
  profile: UserProfile;
  
  // Métadonnées d'authentification
  lastLoginAt?: Date;
  emailVerified: boolean;
  emailVerifiedAt?: Date;
  phoneVerified: boolean;
  twoFactorEnabled: boolean;
  
  // Email verification tracking
  emailVerificationSentAt?: Date;
  emailVerificationAttempts: number;
  lastVerificationRequestAt?: Date;
  verificationHistory?: Array<{
    sentAt: Date;
    verifiedAt?: Date;
    ipAddress: string;
  }>;
  
  // Relations organisationnelles
  organizationId?: string;
  departmentId?: string;
  managerId?: string;
  
  // Sécurité et tracking
  loginCount: number;
  failedLoginAttempts: number;
  lastFailedLoginAt?: Date;
  accountLockedUntil?: Date;
  hashedPassword: string;        // Nouveau
  passwordChangedAt?: Date;     // Garder
  mustChangePassword?: boolean; // No
  twoFactorSecret?: string;           // Pour 2FA
  twoFactorBackupCodes?: string[]; // Pour 2FA

  // Compliance
  termsAcceptedAt?: Date;
  privacyPolicyAcceptedAt?: Date;
}

export interface CreateUserRequest {
  id?: string; // Optional for new users, will be generated by the system
  email: string;
  displayName: string;
  firstName: string;
  lastName: string;
  phoneNumber?: string;
  role: UserRole;
  departmentId?: string;
  managerId?: string;
  sendInvitation?: boolean;
  password: string;           
  mustChangePassword?: boolean;
  hashedPassword?: string;
  emailVerified?: boolean;
  emailVerificationAttempts?: number;
  status?: UserStatus;
}

export interface UpdateUserRequest {
  displayName?: string;
  firstName?: string;
  lastName?: string;
  bio?: string;
  phoneNumber?: string;
  email?: string;
  photoURL?: string;
  role?: UserRole;
  status?: UserStatus;
  profile?: Partial<UserProfile>;
  permissions?: Partial<UserPermissions>;
}

export interface UserInvitation extends BaseEntity {
  email: string;
  invitedBy: string;
  role: UserRole;
  token: string;
  expiresAt: Date;
  acceptedAt?: Date;
  status: 'pending' | 'accepted' | 'expired' | 'cancelled';
  message?: string;
}

export interface UserSession {
  userId: string;
  sessionId: string;
  deviceInfo: {
    type: 'web' | 'mobile' | 'tablet';
    browser?: string;
    os?: string;
    ip: string;
  };
  createdAt: Date;
  lastActivity: Date;
  isActive: boolean;
}